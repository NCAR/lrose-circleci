
version: 2.1

orbs: 
  singularity: singularity/singularity@1.0.11
  psyplot-ci-orb: psyplot/psyplot-ci-orb@1.5.33

executors:
  my-executor:
    docker:
      # - image: centos  
      # - image: circleci/cci-demo-docker-primary:0.0.1
      # this is CentOS Linux release 7.6.1810 (Core) TODO: move this to centos 7.7
      - image: leavesntwigs/lrose-build-env:centos-20190301
    working_directory: /tmp

  centos7-executor:
    docker:
      # - image: centos
      # cat /etc/redhat-release
      # this is CentOS Linux release 7.7.1908 (Core)  
      - image: leavesntwigs/lrose-build-env-centos7:20191202
    working_directory: /tmp

  centos8-executor:
    docker:
      # - image: centos
      # cat /etc/redhat-release
      # this is CentOS Linux release 8.? (Core)  
      - image: leavesntwigs/lrose-build-env-centos8:20191203
    working_directory: /tmp

  ubuntu-executor:
    docker:
      - image: leavesntwigs/lrose-build-env-ubuntu:20191004
    working_directory: /tmp

  docker:
    description: Pre-build Docker container base to interact with Singularity
    parameters:
      singularity-version:
        type: string
        default: v3.8.2-slim
    docker:
      - image: 'quay.io/singularity/singularity:<< parameters.singularity-version >>'


jobs:


  cai-et-al:
    docker:
      - image: cimg/base:2023.07
    steps:
      - run:
           name: install packages
           command: |
             sudo apt-get update
             sudo apt-get install -y gcc gfortran libnetcdf-dev libnetcdff-dev libhdf5-dev hdf5-tools
             
             # libnetcdf-dev 
             
             # libhdf5-dev hdf5-tools \
             # libnetcdff-dev 
             
             # libhdf5_hl
             
      - run: git clone https://github.com/mmbell/Airborne-Radar-QC.git
      #             find / -name netcdf.inc
      #             find / -name libhdf5*
      - run: 
          name: build the code
          command: |
            pwd
            ls 
            cd Airborne-Radar-QC/navigation
            gfortran -g  -o readnetcdf_DBZ_VR  -fallow-argument-mismatch -fallow-invalid-boz readnetcdf_DBZ_VR.f90 -I/usr/include -L/usr/local/lib -lnetcdf -lnetcdff -lcurl -L/usr/lib/x86_64-linux-gnu/hdf5/serial -lhdf5 -lhdf5_hl -I/usr/local/include
            gfortran -g  -o cns_eldo_cai cns_eldo_cai.f chol_inv.f -fallow-argument-mismatch -fallow-invalid-boz -I/usr/include -L/usr/local/lib -lnetcdf -lnetcdff -lcurl -L/usr/lib/x86_64-linux-gnu/hdf5/serial -lhdf5 -lhdf5_hl -I/usr/local/include

# --------- end of cai et al -----




  package-lrose-topaz-python3-tgz:
    executor: centos7-executor
    working_directory: /tmp
    steps:
      - run:
          name: build MacOS tgz
          command: echo "build MacOS source tgz"
      - run: echo "building lrose-core ..."
      # - run: yum install -y qt5-qtdeclarative-devel  ---> done in centos7-executor container
      - run: mkdir -p workspace_macos_topaz_branch
      - run: cd workspace_macos_topaz_branch; git clone -b python3 https://github.com/NCAR/lrose-core
      - run: pwd
      - run: ls workspace_macos_topaz_branch
      - run: alias qmake-qt5='qmake'
      - run: 
          name: Setup Environment Variables
          command: |
            echo "export RELEASE_DATE=$(date '+%Y%m%d')" >> $BASH_ENV
            echo "BRANCH = python3" >> $BASH_ENV

      - run: echo "RELEASE_DATE = " ${RELEASE_DATE}
        # cannot use lrose_checkout_and_build because it clones the master branch of the repo and we need a branch
        # package for macos
# TODO: need to do something different here ... create_src_tar has a "git clone ..." embedded
# even with --tag option, this still doesn't work
      - run: ./workspace_macos_topaz_branch/lrose-core/build/release/create_src_release.py --force --releaseDir=/tmp/workspace_macos_topaz_branch/releases --package=lrose-core --osx --tag=python3
      - run: ./workspace_macos_topaz_branch/lrose-core/build/release/create_src_release.py --force --releaseDir=/tmp/workspace_macos_topaz_branch/releases --package=lrose-core --tag=python3
      - run: ls /tmp/workspace_macos_topaz_branch/releases
      - run: ls /tmp/workspace_macos_topaz_branch/releases/lrose-core     
      - run: ls /tmp/workspace_macos_topaz_branch/releases/lrose-core/osx
      # - run: cd /tmp/workspace_macos_topaz_branch/releases/lrose-core/osx; mv lrose-core-$RELEASE_DATE.src.mac_osx.tgz lrose-core-$BRANCH-$RELEASE_DATE.src.mac_osx.tgz

      - persist_to_workspace:
          root: workspace_macos_topaz_branch
          paths: 
            - releases/lrose-core
      - store_artifacts:
          path: /tmp/workspace_macos_topaz_branch/releases/lrose-core
          # should store  lrose-core-YYYYMMDD.src.mac_osx.tgz and lrose-core.rb
          # Then, download artifact, edit .rb to change url to lrose-test-release
          # then upload .rb  and .tgz to lrose-test-release site, then call
          #  build-macos-lrose-topaz-python3 on macOS image


# probably don't need this step because the new create_src_release script adds the color scales
  package-lrose-topaz-python3-colorscales-tgz:
    executor: centos7-executor
    working_directory: /tmp
    steps:
      - attach_workspace:
          at: /tmp/workspace_macos_topaz_branch
      - run:
          name: package lrose-topaz python3 packages (.tgz)
          command: echo "package lrose-topaz python3 software"
      - run: ls -R

      - run: pwd   # /private/tmp
      - run: 
          name: Setup Environment Variables
          command: |
            echo "export RELEASE_DATE=$(date '+%Y%m%d')" >> $BASH_ENV
            echo "export RELEASE_DIR=/tmp/workpace_macos/releases" >> $BASH_ENV
            echo "BRANCH = python3" >> $BASH_ENV

      - run:
          name: Add to Environment Variables
          command: |
            echo "export TARGET=lrose-topaz-$BRANCH-$RELEASE_DATE.src.mac_osx" >> $BASH_ENV

      - run: ls -R /tmp/workspace_macos_topaz_branch
      - run: echo "RELEASE_DATE = " $RELEASE_DATE
      - run: echo "TARGET = " $TARGET
      - run: echo "BRANCH = " $BRANCH
      - run: tar zxf /tmp/workspace_macos_topaz_branch/releases/lrose-core/osx/lrose-core-$BRANCH-$RELEASE_DATE.src.mac_osx.tgz
      - run: ls

      # Grab the color scales
      - run: git clone https://github.com/ncar/lrose-displays
      - run: rsync -av lrose-displays/color_scales lrose-core-$BRANCH-$RELEASE_DATE.mac_osx/share 

        # make the elle tar file 
      - run: mv lrose-core-$BRANCH-$RELEASE_DATE.mac_osx lrose-topaz-$BRANCH-$RELEASE_DATE.mac_osx
      - run: tar zcf $TARGET.tgz lrose-topaz-$BRANCH-$RELEASE_DATE.mac_osx
      - run: ls 

      - run: mkdir -p /tmp/workspace_macos_topaz_branch/releases/lrose-topaz/osx

        # move the tar file into the persisted workspace 
      - run: mv $TARGET.tgz /tmp/workspace_macos_topaz_branch/releases/lrose-topaz/osx

      - persist_to_workspace:
          root: workspace_macos_topaz_branch
          paths: 
            - releases/lrose-topaz/osx

      - store_artifacts:
          path: /tmp/workspace_macos_topaz_branch/releases/lrose-topaz


  build-macos-lrose-topaz-python3:
    macos:
      xcode: "13.3"  # corresponds to MacOS 12.3.1 Monterey

    working_directory: /tmp
    steps:
      - attach_workspace:
          at: /tmp/workspace_macos_topaz_branch
      - run:
          name: package lrose-topaz python3 packages (.tgz)
          command: echo "package lrose-topaz python3 software"
      - run: ls -R

      - run:
          name: brew install lrose-topaz.rb Monterey Xcode 13.3.0
          command: echo "testing brew install MacOS-Topaz lrose-core.rb"
 
      - run: brew update
      - run: brew install wget            

      - run: wget https://github.com/NCAR/lrose-release-test/releases/download/20220514/lrose-core.rb

      #- run: brew cask install xquartz  # for older versions of brew 
      - run: brew install --cask xquartz
      #- run: brew install qt5
      # installs qt6! ACK!

      - run: 
          name: installing lrose-core
          no_output_timeout: 60m
          command: |
            brew install lrose-core.rb
      # getting this warning ...
      # ==> Installing lrose-core
      # Warning: Calling depends_on :x11 is deprecated! Use depends_on specific X11 formula(e) instead.
      # ==> ./configure --prefix=/usr/local/Cellar/lrose-core/core-20200719
      # ==> make install
      - run: RadxPrint -h

      - store_artifacts:
          path: /Users/distiller/Library/Logs/Homebrew/lrose-core


  docker_cli:
    description: |
      Interact with Singularity via a Docker container. The containers are
      prebuilt, so this step supports any of the tags belonging to the
      quay.io/singularity/singularity Docker repository.
    executor: docker
    parameters:
      singularity-version:
        description: The Singularity version (tag on quay.io/singularity/singularity)
        type: string
        default: v3.8.2-slim
    steps:
      - run:
          name: Check Singularity Version
          singularity-version: <<parameters.singularity-version>>
          command: singularity --version

  build-sing-image-cidd:
    description: Build a Singularity container using Docker
    executor: docker
    parameters:
      singularity-version:
        type: string
        default: v3.8.2-slim
      from-uri:
        description: 'The Singularity recipe path or docker:// uri to build from.'
        type: string
        default: docker://nsflrose/lrose-cidd:latest
      image:
        description: 'The image binary to build (e.g., container.sif)'
        type: string
        default: lrose-cidd.sif
    steps:
      - run:
          name: Build Singularity Container
          singularity-version: <<parameters.singularity-version>>
          command: |
            if [ -f "$BASH_ENV" ]; then source $BASH_ENV; fi
            singularity build <<parameters.image>> <<parameters.from-uri>>
            singularity exec lrose-cidd.sif -help

  run-sing-image-cidd:
    description: Run cidd singularity container
    executor: docker
    parameters:
      singularity-version:
        type: string
        default: v3.8.2-slim
      from-uri:
        description: 'The Singularity recipe path or docker:// uri to build from.'
        type: string
        default: docker://nsflrose/lrose-cidd:latest
      image:
        description: 'The image binary to build (e.g., container.sif)'
        type: string
        default: lrose-cidd.sif
    steps:
      - run:
          name: Build Singularity Container
          singularity-version: <<parameters.singularity-version>>
          command: |
            if [ -f "$BASH_ENV" ]; then source $BASH_ENV; fi
            singularity exec library://leavesntwigs/lrose-gateway/lrose_cidd:latest xvfb-run -help

# --------- Jupyter images ----

  build-docker-image-jupyter:
    description: build a docker image that contains LROSE for use in Jupyter
    # executor: docker
    # parameters:
    machine:
      docker_layer_caching: true

    steps: 
      - run: date
      - run: mkdir -p workspace      
      - run:
          name: Set release date
          command: |
            echo "export RELEASE_DATE=20230814" >> $BASH_ENV
      - run: echo $RELEASE_DATE

      - run:
          name: Set Docker Image Name
          command: |
            echo "export IMAGE_NAME=nsflrose/lrose-ams-2023:$RELEASE_DATE" >> $BASH_ENV

      - run: echo $IMAGE_NAME

     
      - run:
          name: Set base url for auxillary files for docker image 
          command: |
            echo "export AUX_BASE_URL=https://github.com/Unidata/science-gateway/raw/master/jupyter-images/spring-2023/lrose-ams-2023" >> $BASH_ENV
            echo "export AUX_BASE_URL_SHARED=https://github.com/Unidata/science-gateway/raw/932409b3ae7d32de8b6845a52ebf2d9968881f22/jupyter-images/shared" >> $BASH_ENV

      - run: echo $AUX_BASE_URL
      - run: echo $AUX_BASE_URL_SHARED

      - run: 
          name: build image
          command: |
            echo "fetching docker file"
            cd workspace
            wget https://github.com/NCAR/lrose-circleci/raw/master/.circleci/images/build/lrose-ams-2023.Dockerfile
            wget $AUX_BASE_URL/environment.yml
            wget $AUX_BASE_URL/update_workshop_material.ipynb
            wget $AUX_BASE_URL_SHARED/Acknowledgements.ipynb
            wget $AUX_BASE_URL/.condarc
            wget $AUX_BASE_URL/.bashrc
            wget $AUX_BASE_URL/.profile
            pwd
            ls
            docker build -t $IMAGE_NAME  -f lrose-ams-2023.Dockerfile .
#
# from line 3531 of config.yml.complete
#
      - run: docker images
      - run: mkdir -p workspace/deploy/docker-images

#      - run: docker save -o /tmp/workspace/deploy/docker-images nsflrose/lrose-cyclone:16.04  
      - run: docker save -o workspace/deploy/docker-images/nsflrose.tar $IMAGE_NAME


      - persist_to_workspace:
          root: workspace
          paths: deploy/docker-images
      - store_artifacts:
          path: workspace/deploy/docker-images


# We want to build this docker image from a dockerfile.  
# save the image, download it, then push it to dockerhub.
# The only changes are the ubuntu version (20 --> 22) and lrose-core-20230812.ubuntu_22...
# So, in circleci, grab any default ubuntu base image with docker installed
#   wget the dockerfile
#  docker build -name xxx -tag xxx .
#
# save the image as an artifact for later download and upload to dockerhub
#

#test-docker-jupyter:
#  - attach_worspace:
#       at:
#  - run 

# --------- end Jupyter images -----




workflows:
  now:
    jobs:
      - build-docker-image-jupyter

      # - <orb-name>/<job-name- orb command>conda-forge-lrose
      # - cai-et-al
      
      # - build-lrose-head-linux

      # - build-lrose-head-macos
      # - test-linux-lrose-topaz-tgz

      # - run-brew-no-szip
      # - run-brew-no-szip-workaround

      # testing for no szip; python3  lrose-core topaz release
      # - package-lrose-topaz-python3-tgz

      # call AFTER uploading .tgz and EDITED .rb to lrose-test-release
      # - build-macos-lrose-topaz-python3 

      # - package-lrose-topaz-python3-colorscales-tgz:
      #   requires:
      #    - package-lrose-topaz-python3-tgz


      # - build-macos-lrose-topaz-python3
      #    requires:
      #     - package-lrose-topaz-python3-colorscales-tgz
      # - test-macos-topaz-rb-noszip-python3      

        # end testing for no szip; python3  lrose-core topaz release





      # - run-sing-image-cidd
      # - docker_cli  # works

