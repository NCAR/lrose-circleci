version: 2.1


executors:
  my-executor:
    docker:
      # - image: centos  
      # - image: circleci/cci-demo-docker-primary:0.0.1
      - image: leavesntwigs/lrose-build-env:centos-20190301
    working_directory: /tmp

  ubuntu-executor:
    docker:
      - image: leavesntwigs/lrose-build-env-ubuntu:20191004
    working_directory: /tmp

jobs:
  one:
    executor: my-executor
    steps:
      - run: date
      ## - checkout
      - run: yum install -y qt5-qtdeclarative-devel
      - run: echo "building lrose-blaze ..."
      - run: mkdir -p workspace
      - run: cd workspace; git clone https://github.com/NCAR/lrose-core
      - run: pwd
      - run: ls workspace
      - run: |
          if [[ `echo "y" | ./workspace/lrose-core/build/checkout_and_build_auto.py --useSystemNetcdf --package=lrose-blaze --prefix /usr/local/lrose` == 0 ]]; then
              echo "It worked"
          else 
              tail -n 100 /tmp/lrose_build/logs/*
          fi
               
      - run: ls -R /usr/local/lrose
      - run: /usr/local/lrose/bin/RadxPrint -h

      ### Persist the specified paths into the workspace for use in downstream job. 
      - persist_to_workspace:
          # ### Must be an absolute path, or relative path from working_directory. 
          # ### This is a directory on the container which is 
          # ### taken to be the root directory of the workspace.
          root: workspace
          # ### Must be relative path from root
          paths:
            - lrose-core

  two:
    executor: my-executor
    steps:
      - run: echo "building lrose-core ..."
      - run: yum install -y qt5-qtdeclarative-devel
      - run: mkdir -p workspace
      - run: cd workspace; git clone https://github.com/NCAR/lrose-core
      - run: pwd
      - run: ls workspace
      - run: |
          if [[ `echo "y" | ./workspace/lrose-core/build/checkout_and_build_auto.py --useSystemNetcdf --package=lrose-core --prefix /usr/local/lrose` == 0 ]]; then
              echo "It worked"
          else
              tail -n 100 /tmp/lrose_build/logs/*
          fi
      - run: ls -R /usr/local/lrose
      - run: /usr/local/lrose/bin/RadxPrint -h

 
  attached-workspace:
    executor: my-executor
    steps:
      ## - checkout
      - attach_workspace:
          ### Must be absolute path or relative path from working_directory
          at: /tmp/workspace
      - run: echo "try with attached workspace ..."
      # - run: git clone https://github.com/NCAR/lrose-core
      - run: pwd
      - run: ls
      - run: git clone --branch master https://github.com/NCAR/lrose-core
      - run: echo "y" | ./workspace/lrose-core/build/checkout_and_build_auto.py --verbose --package=lrose-blaze 
      
        ### Persist the specified paths into the workspace for use in downstream job. 
      #- persist_to_workspace:
          ### Must be an absolute path, or relative path from working_directory. 
          ### This is a directory on the container which is 
          ### taken to be the root directory of the workspace.
       #   root: /usr/local/lrose
          ### Must be relative path from root
          #paths:
          #  - echo-output

  three:
    executor: my-executor
    steps: 
      #- attach_workspace:
          ### Must be absolute path or relative path from working_directory
      #    at: /usr/local/lrose
      - run: RadxPrint -h
      - run: echo "All done."

# testing the dependencies of the brew formulae
  buildMacOS:
    macos:
      xcode: "10.1.0"
    steps:
      - run:
          name: Hello World
          command: echo "Hello World from MacOS"
      - run: brew install wget
      - run: brew install cmake
      - run: cmake --help
      # - run: wget https://github.com/NCAR/lrose-core/releases/download/lrose-core-20190520/lrose-core.rb
      - run: wget https://github.com/leavesntwigs/lrose-test/releases/download/20190621/lrose-blaze.rb
      - run: brew info lrose-blaze.rb
      - run: brew install lrose-blaze.rb
      - run: RadxPrint -h


  # NOTE: in order to build the .src.mac_osx.tgz file, we need to 
  #       build it on a linux platform using automake and libtool
  #
  package-lrose-core-tgz:
    executor: my-executor
    working_directory: /tmp
    steps:
      - run:
          name: build MacOS tgz
          command: echo "build MacOS source tgz"
      - run: echo "building lrose-core ..."
      - run: yum install -y qt5-qtdeclarative-devel
      - run: mkdir -p workspace_macos
      - run: cd workspace_macos; git clone https://github.com/NCAR/lrose-core
      - run: pwd
      - run: ls workspace_macos
      # - run: export HOST_OS="OSX_LROSE"
      # other options: --logDir ...
      #                --releaseDir .. 
      - run: alias qmake-qt5='qmake'
#       - run: |
#          if [[ `echo "y" | ./workspace_macos/lrose-core/build/create_src_tar.py --force --releaseDir=/tmp/workspace_macos/releases --package=lrose-core --osx` == 0 ]]; then
#               echo "It worked"
#           else
#               tail -n 100 /tmp/create_src_release/logs/*
#           fi
      - run: 
          name: Setup Environment Variables
          command: |
            echo "export RELEASE_DATE=$(date '+%Y%m%d')" >> $BASH_ENV
      - run: echo "RELEASE_DATE = " ${RELEASE_DATE}
        # package for macos
      - run: ./workspace_macos/lrose-core/build/create_src_tar.py --force --releaseDir=/tmp/workspace_macos/releases --package=lrose-core --osx

      - run: ls /tmp/workspace_macos/releases/lrose-core/osx
      - run: cd /tmp/workspace_macos/releases/lrose-core/osx; mv lrose-core-$RELEASE_DATE.mac_osx.tgz lrose-core-$RELEASE_DATE.src.mac_osx.tgz
        # package for linux 
      - run: ./workspace_macos/lrose-core/build/create_src_tar.py --force --releaseDir=/tmp/workspace_linux/releases --package=lrose-core 

      - run: ls /tmp/workspace_linux/releases/lrose-core
# 
# Running create_src_tar.py:
#   package:  lrose-core
#   osx:  True
#   releaseTopDir:  /tmp/workspace_macos/releases
#   releaseDir:     /tmp/workspace_macos/releases/lrose-core/osx
#   tmpDir:         /tmp/workspace_macos/releases/lrose-core/osx/tmp
#   force:  True
#   static:  False
#   versionStr:  20191115
#   releaseName:  lrose-core-20191115.mac_osx
#   tarName:  lrose-core-20191115.mac_osx.tgz
# 
# running cmd: tar cvfzh lrose-core-20191115.mac_osx.tgz lrose-core-20191115.mac_osx  .....
# .... done

      - persist_to_workspace:
          root: workspace_macos
          paths: 
            - releases
            - releases/lrose-core
            - releases/lrose-core/osx
      - persist_to_workspace:
          root: workspace_linux
          paths: 
            - releases
      - store_artifacts:
          path: /tmp/workspace_macos/releases/lrose-core/osx
      - store_artifacts:   
          path: /tmp/workspace_linux/releases/lrose-core
          # should store  lrose-core-YYYYMMDD.mac_osx.tgz and lrose-core.rb
          # Ah, but don't we want lrose-core.src.mac_osx.tgz?



  package-lrose-cyclone-tgz:
    executor: my-executor
    working_directory: /tmp
    steps:
      - attach_workspace:
          at: /tmp/workspace_macos
      - run:
          name: package lrose-cyclone packages (.rb, .tgz, docker)
          command: echo "package lrose-cyclone software"
      - run: echo "package lrose-cyclone .rb ..."
      - run: ls -R
#       - run: brew install ??? -y qt5-qtdeclarative-devel
      # - run: cd workspace_macos; git clone https://github.com/NCAR/release-tools
      - run: pwd   # /private/tmp
      - run: 
          name: Setup Environment Variables
          command: |
            echo "export RELEASE_DATE=$(date '+%Y%m%d')" >> $BASH_ENV
            echo "export RELEASE_DIR=/tmp/workpace_macos/releases" >> $BASH_ENV
            echo "export LROSE_CORE_RELEASE_DATE=$RELEASE_DATE" >> $BASH_ENV
            echo "export TAG=lrose-cyclone-20190726" >> $BASH_ENV
            echo "export TARGET=lrose-cyclone-20191118.src.mac_osx" >> $BASH_ENV
      - run: ls -R /tmp/workspace_macos
      - run: ls -R $RELEASE_DIR
      - run: echo "RELEASE_DATE = " ${RELEASE_DATE}
#      - run: mkdir sandbox
      - run: tar zxf $RELEASE_DIR/lrose-core/osx/lrose-core-$RELEASE_DATE.src.mac_osx.tgz
      - run: ls
# Grab addons from mmbell
      - run: cd lrose-core-$LROSE_CORE_RELEASE_DATE.src.mac_osx; git clone "https://github.com/mmbell/samurai.git" 
      
#    git clone "https://github.com/mmbell/${tool}.git"
#    cd $tool
      - run: cd lrose-core-$LROSE_CORE_RELEASE_DATE.src.mac_osx/samurai; git checkout -q $TAG
      - run: cd lrose-core-$LROSE_CORE_RELEASE_DATE.src.mac_osx/samurai; rm -rf .git

      - run: cd lrose-core-$LROSE_CORE_RELEASE_DATE.src.mac_osx; git clone "https://github.com/mmbell/fractl.git" 
      - run: cd lrose-core-$LROSE_CORE_RELEASE_DATE.src.mac_osx/fractl; git checkout -q $TAG
      - run: cd lrose-core-$LROSE_CORE_RELEASE_DATE.src.mac_osx/fractl; rm -rf .git

      - run: cd lrose-core-$LROSE_CORE_RELEASE_DATE.src.mac_osx; git clone "https://github.com/mmbell/vortrac.git" 
      - run: cd lrose-core-$LROSE_CORE_RELEASE_DATE.src.mac_osx/vortrac; git checkout -q $TAG
      - run: cd lrose-core-$LROSE_CORE_RELEASE_DATE.src.mac_osx/vortrac; rm -rf .git

#    if [ ! -z "$tag" ]; then
#        git checkout -q "$tag"
#    fi
#      rm -rf .git
#    cd ..
#done

# cd ..
      - run: tar zcf $TARGET lrose-core-$LROSE_CORE_RELEASE_DATE.src.mac_osx
      - run: mkdir $RELEASE_DIR/lrose-cyclone/osx
      - run: mv $TARGET.tgz $RELEASE_DIR/lrose-cyclone/osx

      #- run: ls workspace_macos
      #- run: cd release-tools/cyclone

#  just call the script to build the brew formula
#  I'll just have to extract the .rb file from the script? But, that should be easy, I think.

# begin script ...
#       - run: git clone ...release-tools
#- run: set environment variables for script
# TARGET
# URL
# RELEASE_DATE
# DEST
# - run: ./release-tools/cyclone/homebrew-scripts/make-lrose-cyclone-brew-formula.sh 
#    - run: mv $DEST/lrose-cyclone.rb /tmp/workspace_macos/releases/lrose-cyclone

#      - persist_to_workspace:
#          root: workspace_macos
#          paths: 
#            - releases
      - store_artifacts:
          path: /tmp/workspace_macos/releases/lrose-cyclone
          # should store  lrose-cyclone-YYYYMMDD.mac_osx.tgz and lrose-cyclone.rb
          # Ah, but don't we want lrose-cyclone.src.osx.tgz?


  workspace-producer:
    executor: my-executor
    working_directory: /tmp
    steps:
      - run: mkdir -p workspace_macos/releases/lrose-core/osx
      - run: echo "this is really annoying" > workspace_macos/releases/lrose-core/osx/somejunk
      - persist_to_workspace:
          root: workspace_macos
          paths:
            - releases/*
            - releases/lrose-core/osx

  workspace-consumer:
    executor: my-executor
    working_directory: /tmp
    steps:
      - attach_workspace:
          at: /tmp/workspace_macos
      - run: cat /tmp/workspace_macos/releases/lrose-core/osx/somejunk


  package-lrose-cyclone:
    macos:
      xcode: "10.1.0"
    working_directory: /tmp

    steps:
      - attach_workspace:
          at: /tmp/workspace_macos
      - run:
          name: package lrose-cyclone mac specific apps ( .app )
          command: echo "building HawkEye.app"
      - run: echo "building HawkEye.app"

#      - run: ls -R
#       - run: brew install ??? -y qt5-qtdeclarative-devel
      # - run: cd workspace_macos; git clone https://github.com/NCAR/release-tools
#      - run: pwd   # /private/tmp
      #- run: ls workspace_macos
      #- run: cd release-tools/cyclone


#      - persist_to_workspace:
#          root: workspace_macos
#          paths: 
#            - releases
#      - store_artifacts:
#          path: /tmp/workspace_macos/releases/lrose-core/osx
          # should store  lrose-core-YYYYMMDD.mac_osx.tgz and lrose-core.rb
          # Ah, but don't we want lrose-core.src.osx.tgz?

 
 
#  build-docker-image-lrose-cyclone:
#    macos:
#      xcode: "10.1.0"
#    working_directory: /tmp
#    steps:
      # - run:
      # - store_artifacts:
      #     path: /tmp/docker-image
      #     destination: lrose-cyclone-docker.x


  build-brew-formula-lrose-cyclone:
    macos:
      xcode: "10.1.0"
    working_directory: /tmp
    steps:
      - attach_workspace:
          at: /tmp/workspace_macos
      - run:
          name: build brew formula lrose-cyclone.rb 
          command: echo "building brew formula for MacOS-Cyclone"
      - run: brew install wget
      - run: brew cask install xquartz 
        # should this be from a workspace? 
      # - run: wget https://github.com/NCAR/lrose-release-test/releases/download/testing/lrose-cyclone.rb
      # - run: brew install lrose-cyclone.rb
      - run: git clone ... release-tools
      # NOTE: depends on xxxx.src.mac_osx.tgz <======
      - run: release-tools/cyclone/homebrew-scripts/make-lrose-cyclone.sh
      - persist_to_workspace:
          root: workspace
          paths: 
            - output
      - store_artifacts:
          path: /tmp/brew-formula
          destination: lrose-cyclone.rb
 
  test-brew-install-lrose-cyclone:
    macos:
      xcode: "10.1.0"
    steps:
      - attach_workspace:
          at: /tmp/workspace
          # files will be in /tmp/workspace/output
      - run:
          name: brew install lrose-cyclone.rb 
          command: echo "testing brew install MacOS-Cyclone"
      # - run: brew install wget
      - run: brew cask install xquartz 
        # should this be from a workspace? 
      # - run: wget https://github.com/NCAR/lrose-release-test/releases/download/testing/lrose-cyclone.rb
      - run: brew install /tmp/workspace/output/lrose-cyclone.rb
      - run: RadxPrint -h
      - run: vortrac  -h
      - run: samurai -h
      - run: fractl -h
 
  buildCentos-Cyclone-vortrac-build-changes:
    executor: my-executor
    steps:
      - run: date
      ## - checkout
      - run: yum install -y qt5-qtdeclarative-devel
      - run: yum install -y armadillo-devel
      - run: yum install -y cmake
      - run: yum install -y cmake3
      - run: export PKG_CONFIG_PATH=/usr/local/opt/qt/lib/pkgconfig
      - run: echo "building lrose-cyclone ..."
      - run: mkdir -p workspace
      - run: cd workspace; wget https://github.com/NCAR/lrose-release-test/releases/download/testing/lrose-cyclone-20190910-vortrac-build-changes.tgz
      - run: cd workspace; tar zxf lrose-cyclone-20190910-vortrac-build-changes.tgz
      - run: cd workspace/lrose-cyclone-20190801.src/codebase
      - run: pwd
      - run: ls workspace
      ## build lrose-core
      - run: cd workspace/lrose-cyclone-20190801.src/codebase; ./configure --disable-dependency-tracking --prefix /usr/local/lrose
      - run: cd workspace/lrose-cyclone-20190801.src/codebase; make install
      - run: rsync -av workspace/lrose-cyclone-20190801.src/share /usr/local/lrose                

      - run: export LROSE_ROOT_DIR=/usr/local/lrose

      ## build vortrac 
      - run: cd workspace/lrose-cyclone-20190801.src/vortrac/src; /usr/bin/qmake-qt5 .
      - run: cd workspace/lrose-cyclone-20190801.src/vortrac/src; make
      - run: cd workspace/lrose-cyclone-20190801.src/vortrac/src/vortrac.app/Contents/MacOS/vortrac -h

      ## build fractl
      - run: cd workspace/lrose-cyclone-20190801.src/fractl; /usr/bin/cmake3 .
      - run: cd workspace/lrose-cyclone-20190801.src/fractl; make
      - run: cd workspace/lrose-cyclone-20190801.src/fractl/build/release/bin/fractl -h

      ## build samurai
      - run: cd workspace/lrose-cyclone-20190801.src/samurai; /usr/bin/cmake3 .
      - run: cd workspace/lrose-cyclone-20190801.src/samurai; make
      - run: cd workspace/lrose-cyclone-20190801.src/samurai/build/release/bin/samurai -h
      ## maybe move the libs, executable, and includes into place?



      - run: ls -R /usr/local/lrose
      - run: /usr/local/lrose/bin/RadxPrint -h
      - run: /usr/local/lrose/bin/samurai -h
      - run: /usr/local/lrose/bin/fractl -h
      - run: /usr/local/lrose/bin/vortrac -h

  build-cyclone-docker:
    ## TODO: just use a generic ubuntu. The Dockerfile installs the dependent packages.
    executor: ubuntu-executor
    steps:
      - run: date
      ## - checkout
      - run: echo "building lrose-cyclone docker image ..."
      - run: mkdir -p workspace
      - run: cd workspace; git clone https://github.com/nsf-lrose/release-tools
      - run: pwd
      - run: ls workspace
      - run: cd workspace/git/release-tools/cyclone/lrose-docker-scripts; ./build.sh --releaseDate lrose-cyclone-20190801
      - run: |
          if [[ `echo "y" | ./workspace/lrose-core/build/checkout_and_build_auto.py --useSystemNetcdf --package=lrose-blaze --prefix /usr/local/lrose` == 0 ]]; then
              echo "It worked"
          else 
              tail -n 100 /tmp/lrose_build/logs/*
          fi
               
      - run: ls -R /usr/local/lrose
      - run: /usr/local/lrose/bin/RadxPrint -h



workflows:
  version: 2.1
  nightly:
    triggers: 
      - schedule:
          #     "mm hh day month dow"  Note: 22 is about 3pm MST
          cron: "45 10 * * *"   # for 5:30 am MST 
          filters:
            branches:
              only:
                - master
    jobs:
      - one
      
  nightly_full:
    triggers: 
      - schedule:
          #     "mm hh day month dow"  Note: 22 is about 3pm MST
          cron: "45 7 * * *"   # for 5:30 am MST 
          filters:
            branches:
              only:
                - master
    jobs:      
      - two 
      
     # - two:
     #    requires:
     #      - one
      #- three:
      #    requires:
      #      - one
      #      - two
          
  now:
    jobs:
      - workspace-producer
      - workspace-consumer:
          requires:
           - workspace-producer


#      - package-lrose-core-tgz
#      - package-lrose-cyclone-tgz:
#          requires:
#           - package-lrose-core-tgz

      # - build-cyclone-docker
      # - buildCentos-Cyclone-vortrac-build-changes  
      # - buildMacOS-Cyclone

######
#
#Custom Docker Images
#
# keep Dockerfile in .circleci/images folder, e.g.
#
#  .circleci/images/primary/Dockerfile
# 
# Q: how to build and then use the image in this script
#
# these tools are required for Primary Containers in CircleCI
#git
#ssh
#tar
#gzip
#ca-certificates
# Q: Can I use a circleci container as a starting image?
# In order to allow CircleCI to use your custom image, store it in a public Docker Registry. 
#
#  or can we build the Docker image in CircleCI, then pass it to the downstream jobs?
#  Actually, this is preferable, since we don't have an external step that someone
#  has to maintain.
#
##########

# Executors and Images 

# Docker
 #
#jobs:
  #build_environment: # name of your job
    #docker: # executor type
      ##
      ## the image is stored in a public Docker repository
      ## 1. prepare the image for the registry
      ## $ docker build -t circleci/cci-demo-docker-primary:0.0.1 <path-to-dockerfile>
      ##
      ## 2. push the image to the registry
      ## $ docker login
      ## $ docker push circleci/cci-demo-docker-primary:0.0.1
      ##
      ## 3. use the image from the registry
      ## - image: circleci/cci-demo-docker-primary:0.0.1
      #-image: docker:stable-git 
#
#
    #working_directory: ~/
#

# Machine

#jobs:
  #build: 
    #machine: 
      #image: circleci/classic:201708-01 # VM will run: Ubuntu 14.04 for this release date
#
## macOS
#
#jobs:
  #build:
    #macos:
      #xcode: "9.0"
      #
    #steps:
      ## Commands will execute in macOS container
      ## with Xcode 9.0 installed
      #- run: xcodebuild -version
#
#
#
#############

# Note that the following stanza uses CircleCI 2.1 to make use of a Reusable Executor
# This allows defining a docker image to reuse across jobs.
# visit https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-executors to learn more.
#
#version: 2.1
#
#executors:
  #my-executor:
    #docker:
      #- image: centos  # buildpack-deps:jessie
    #working_directory: /tmp
#
#jobs:
  #flow:
    #executor: my-executor
    #steps:
      #- run: yum -y install ca-certificates
      #- run: mkdir -p workspace
      #- run: echo "Hello, world!" > workspace/echo-output
      #
      ### Persist the specified paths (workspace/echo-output) into the workspace for use in downstream job. 
      #- persist_to_workspace:
          ### Must be an absolute path, or relative path from working_directory. This is a directory on the container which is 
          ### taken to be the root directory of the workspace.
          #root: workspace
          ### Must be relative path from root
          #paths:
            #- echo-output
#
  #downstream:
    #executor: my-executor
    #steps:
      #- attach_workspace:
          ### Must be absolute path or relative path from working_directory
          #at: /tmp/workspace
#
      #- run: |
          #if [[ `cat /tmp/workspace/echo-output` == "Hello, world!" ]]; then
            #echo "It worked!";
          #else
            ##echo "Nope!"; exit 1
          #fi
#
#workflows:
  #version: 2.1
#
  #btd:
    #jobs:
      #- flow
      #- downstream:
          #requires:
            #- flow
