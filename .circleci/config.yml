
version: 2.1


executors:
  my-executor:
    docker:
      # - image: centos  
      # - image: circleci/cci-demo-docker-primary:0.0.1
      - image: leavesntwigs/lrose-build-env:centos-20190301
    working_directory: /tmp

  ubuntu-executor:
    docker:
      - image: leavesntwigs/lrose-build-env-ubuntu:20191004
    working_directory: /tmp

jobs:
  one:
    executor: my-executor
    steps:
      - run: date
      ## - checkout
      - run: yum install -y qt5-qtdeclarative-devel
      - run: echo "building lrose-blaze ..."
      - run: mkdir -p workspace
      - run: cd workspace; git clone https://github.com/NCAR/lrose-core
      - run: pwd
      - run: ls workspace
      - run: |
          if [[ `echo "y" | ./workspace/lrose-core/build/checkout_and_build_auto.py --useSystemNetcdf --package=lrose-blaze --prefix /usr/local/lrose` == 0 ]]; then
              echo "It worked"
          else 
              tail -n 100 /tmp/lrose_build/logs/*
          fi
               
      - run: ls -R /usr/local/lrose
      - run: /usr/local/lrose/bin/RadxPrint -h

      ### Persist the specified paths into the workspace for use in downstream job. 
      - persist_to_workspace:
          # ### Must be an absolute path, or relative path from working_directory. 
          # ### This is a directory on the container which is 
          # ### taken to be the root directory of the workspace.
          root: workspace
          # ### Must be relative path from root
          paths:
            - lrose-core

  two:
    executor: my-executor
    steps:
      - run: echo "building lrose-core ..."
      - run: yum install -y qt5-qtdeclarative-devel
      - run: mkdir -p workspace
      - run: cd workspace; git clone https://github.com/NCAR/lrose-core
      - run: pwd
      - run: ls workspace
      - run: |
          if [[ `echo "y" | ./workspace/lrose-core/build/checkout_and_build_auto.py --useSystemNetcdf --package=lrose-core --prefix /usr/local/lrose` == 0 ]]; then
              echo "It worked"
          else
              tail -n 100 /tmp/lrose_build/logs/*
          fi
      - run: ls -R /usr/local/lrose
      - run: /usr/local/lrose/bin/RadxPrint -h

 
  attached-workspace:
    executor: my-executor
    steps:
      ## - checkout
      - attach_workspace:
          ### Must be absolute path or relative path from working_directory
          at: /tmp/workspace
      - run: echo "try with attached workspace ..."
      # - run: git clone https://github.com/NCAR/lrose-core
      - run: pwd
      - run: ls
      - run: git clone --branch master https://github.com/NCAR/lrose-core
      - run: echo "y" | ./workspace/lrose-core/build/checkout_and_build_auto.py --verbose --package=lrose-blaze 
      
        ### Persist the specified paths into the workspace for use in downstream job. 
      #- persist_to_workspace:
          ### Must be an absolute path, or relative path from working_directory. 
          ### This is a directory on the container which is 
          ### taken to be the root directory of the workspace.
       #   root: /usr/local/lrose
          ### Must be relative path from root
          #paths:
          #  - echo-output

  three:
    executor: my-executor
    steps: 
      #- attach_workspace:
          ### Must be absolute path or relative path from working_directory
      #    at: /usr/local/lrose
      - run: RadxPrint -h
      - run: echo "All done."

# testing the dependencies of the brew formulae
  buildMacOS:
    macos:
      xcode: "10.1.0"
    steps:
      - run:
          name: Hello World
          command: echo "Hello World from MacOS"
      - run: brew install wget
      - run: brew install cmake
      - run: cmake --help
      # - run: wget https://github.com/NCAR/lrose-core/releases/download/lrose-core-20190520/lrose-core.rb
      - run: wget https://github.com/leavesntwigs/lrose-test/releases/download/20190621/lrose-blaze.rb
      - run: brew info lrose-blaze.rb
      - run: brew install lrose-blaze.rb
      - run: RadxPrint -h


  # NOTE: in order to build the .src.mac_osx.tgz file, we need to 
  #       build it on a linux platform using automake and libtool
  #
  package-lrose-core-tgz:
    executor: my-executor
    working_directory: /tmp
    steps:
      - run:
          name: build MacOS tgz
          command: echo "build MacOS source tgz"
      - run: echo "building lrose-core ..."
      - run: yum install -y qt5-qtdeclarative-devel
      - run: mkdir -p workspace_macos
      - run: cd workspace_macos; git clone https://github.com/NCAR/lrose-core
      - run: pwd
      - run: ls workspace_macos
      - run: alias qmake-qt5='qmake'
      - run: 
          name: Setup Environment Variables
          command: |
            echo "export RELEASE_DATE=$(date '+%Y%m%d')" >> $BASH_ENV
      - run: echo "RELEASE_DATE = " ${RELEASE_DATE}
        # package for macos
      - run: ./workspace_macos/lrose-core/build/create_src_tar.py --force --releaseDir=/tmp/workspace_macos/releases --package=lrose-core --osx

      - run: ls /tmp/workspace_macos/releases/lrose-core/osx
      - run: cd /tmp/workspace_macos/releases/lrose-core/osx; mv lrose-core-$RELEASE_DATE.mac_osx.tgz lrose-core-$RELEASE_DATE.src.mac_osx.tgz
        # package for linux 
      - run: ./workspace_macos/lrose-core/build/create_src_tar.py --force --releaseDir=/tmp/workspace_linux/releases --package=lrose-core 
      - run: cd /tmp/workspace_linux/releases/lrose-core; mv lrose-core-$RELEASE_DATE.tgz lrose-core-$RELEASE_DATE.src.tgz

      - run: ls /tmp/workspace_linux/releases/lrose-core

      - persist_to_workspace:
          root: workspace_macos
          paths: 
            - releases/lrose-core/osx
      - persist_to_workspace:
          root: workspace_linux
          paths: 
            - releases/lrose-core
      - store_artifacts:
          path: /tmp/workspace_macos/releases/lrose-core/osx
      - store_artifacts:   
          path: /tmp/workspace_linux/releases/lrose-core
          # should store  lrose-core-YYYYMMDD.mac_osx.tgz and lrose-core.rb
          # Ah, but don't we want lrose-core.src.mac_osx.tgz?



  package-lrose-cyclone-tgz:
    executor: my-executor
    working_directory: /tmp
    steps:
      - attach_workspace:
          at: /tmp/workspace_macos
      - run:
          name: package lrose-cyclone packages (.rb, .tgz, docker)
          command: echo "package lrose-cyclone software"
      - run: echo "package lrose-cyclone .rb ..."
      - run: ls -R
      #       - run: brew install ??? -y qt5-qtdeclarative-devel
      # - run: cd workspace_macos; git clone https://github.com/NCAR/release-tools
      - run: pwd   # /private/tmp
      - run: 
          name: Setup Environment Variables
          command: |
            echo "export RELEASE_DATE=$(date '+%Y%m%d')" >> $BASH_ENV
            echo "export RELEASE_DIR=/tmp/workpace_macos/releases" >> $BASH_ENV
            #echo "export LROSE_CORE_RELEASE_DATE=$RELEASE_DATE" >> $BASH_ENV
            echo "export TAG=lrose-cyclone-20190726" >> $BASH_ENV

      - run:
          name: Add to Environment Variables
          command: |        
            echo "export TARGET=lrose-cyclone-$RELEASE_DATE.src.mac_osx" >> $BASH_ENV

      - run: ls -R /tmp/workspace_macos
      - run: echo "RELEASE_DATE = " $RELEASE_DATE
      - run: echo "TARGET = " $TARGET
      - run: tar zxf /tmp/workspace_macos/releases/lrose-core/osx/lrose-core-$RELEASE_DATE.src.mac_osx.tgz
      - run: ls

# Grab the color scales
      - run: git clone https://github.com/ncar/lrose-displays
      - run: rsync -av lrose-displays/color_scales lrose-core-$RELEASE_DATE.mac_osx/share 
#      - run: cd lrose-core-$RELEASE_DATE.mac_osx/lrose-displays/color_scales; git checkout -q $TAG
#      - run: cd lrose-core-$RELEASE_DATE.mac_osx/samurai; rm -rf .git

# Grab addons from mmbell
      - run: cd lrose-core-$RELEASE_DATE.mac_osx; git clone https://github.com/mmbell/samurai.git 
      - run: cd lrose-core-$RELEASE_DATE.mac_osx/samurai; git checkout -q $TAG
      - run: cd lrose-core-$RELEASE_DATE.mac_osx/samurai; rm -rf .git

      - run: cd lrose-core-$RELEASE_DATE.mac_osx; git clone https://github.com/mmbell/fractl.git 
      - run: cd lrose-core-$RELEASE_DATE.mac_osx/fractl; git checkout -q $TAG
      - run: cd lrose-core-$RELEASE_DATE.mac_osx/fractl; rm -rf .git

      - run: cd lrose-core-$RELEASE_DATE.mac_osx; git clone https://github.com/mmbell/vortrac.git 
      - run: cd lrose-core-$RELEASE_DATE.mac_osx/vortrac; git checkout -q $TAG
      - run: cd lrose-core-$RELEASE_DATE.mac_osx/vortrac; rm -rf .git

        # make the cyclone tar file 
      - run: mv lrose-core-$RELEASE_DATE.mac_osx lrose-cyclone-$RELEASE_DATE.mac_osx
      - run: tar zcf $TARGET.tgz lrose-cyclone-$RELEASE_DATE.mac_osx
      - run: ls 

      - run: mkdir -p /tmp/workspace_macos/releases/lrose-cyclone/osx

        # generate a checksum for the brew formula; add it to the persisted workspace
      - run: sha256sum $TARGET.tgz > /tmp/workspace_macos/releases/lrose-cyclone/osx/checksum
      - run: cat /tmp/workspace_macos/releases/lrose-cyclone/osx/checksum

        # move the tar file into the persisted workspace 
      - run: mv $TARGET.tgz /tmp/workspace_macos/releases/lrose-cyclone/osx

      - persist_to_workspace:
          root: workspace_macos
          paths: 
            - releases/lrose-cyclone/osx

      - store_artifacts:
          path: /tmp/workspace_macos/releases/lrose-cyclone


  package-osx-brew-formula:
    executor: my-executor
    working_directory: /tmp
    steps:
      - attach_workspace:
          at: /tmp/workspace_macos
      - run: cat /tmp/workspace_macos/releases/lrose-cyclone/osx/checksum
  
#       - run: git clone ... get the release tools <====
      #- run: ls workspace_macos
      #- run: cd release-tools/cyclone

#  just call the script to build the brew formula
#  I'll just have to extract the .rb file from the script? But, that should be easy, I think.

# begin script ...
#       - run: git clone ...release-tools

      - run: 
          name: Setup Environment Variables
          command: |
            echo "export RELEASE_DATE=$(date '+%Y%m%d')" >> $BASH_ENV

      - run: 
          name: Add to Environment Variables
          command: |
            echo "export TARFILE=lrose-cyclone-$RELEASE_DATE.src.mac_osx.tgz" >> $BASH_ENV

      - run: 
          name: Add to Environment Variables
          command: |
            echo "export URL=https://github.com/NCAR/lrose-release-test/releases/download/$RELEASE_DATE/$TARFILE" >> $BASH_ENV
            echo "export checksum2='cat /tmp/workspace_macos/releases/lrose-cyclone/osx/checksum'" >> $BASH_ENV
            echo "export checksum=`sha256sum /tmp/workspace_macos/releases/lrose-cyclone/osx/$TARFILE`" >> $BASH_ENV

      - run: echo $checksum
      - run: echo $URL
      - run: echo $TARFILE
      - run: echo $RELEASE_DATE

      - run: git clone https://github.com/nsf-lrose/release-tools

      - run: ./release-tools/cyclone/homebrew-scripts/make-lrose-cyclone-brew-formula.sh 
      - run: mv lrose-cyclone.rb /tmp/workspace_macos/releases/lrose-cyclone/osx

      - persist_to_workspace:
          root: workspace_macos
          paths: 
            - releases/lrose-cyclone/osx

      - store_artifacts:
          path: /tmp/workspace_macos/releases/lrose-cyclone/osx


  test-brew-install-lrose-cyclone:
    macos:
      xcode: "10.1.0"
#     working_directory: /tmp
    steps:
      - run:
          name: brew install lrose-cyclone.rb 
          command: echo "testing brew install MacOS-Cyclone"
 
      - run: brew update
      - run: brew install wget
      # - run: brew install cmake
        # xquartz is needed! Don't even think about removing this line.
      # - run: brew install homebrew/cask-cask/brew-cask
        # Error: caskroom/cask was moved. Tap homebrew/cask-cask instead.
      # - run: brew cask install xquartz 
      - run: wget https://github.com/NCAR/lrose-release-test/releases/download/20191121/lrose-cyclone.rb
      - run: brew install lrose-cyclone.rb
      - run: RadxPrint -h
      # - run: vortrac  -h
      - run: samurai -h
      - run: fractl -h

  test-brew-install-lrose-cyclone-from-workspace:
    macos:
      xcode: "10.1.0"

    working_directory: /tmp
    steps:
      - attach_workspace:
          at: /tmp/workspace_macos

      - run:
          name: brew install lrose-cyclone.rb 
          command: echo "testing brew install MacOS-Cyclone"
 
      - run: brew update
      # - run: brew install wget
      - run: brew install cmake
        # xquartz is needed! Don't even think about removing this line.
      - run: brew cask install xquartz 
        # should this be from a workspace? 
      # - run: wget https://github.com/NCAR/lrose-release-test/releases/download/testing/lrose-cyclone.rb
      - run: brew install /tmp/workspace_macos/releases/lrose-cyclone/osx/lrose-cyclone.rb
      - run: RadxPrint -h
      - run: vortrac  -h
      - run: samurai -h
      - run: fractl -h


  test-macos-lrose-cyclone-tgz:
    macos:
      xcode: "10.1.0"

    working_directory: /tmp
    steps:
      - attach_workspace:
          at: /tmp/workspace_macos

      - run: 
          name: Setup Environment Variables
          command: |
            echo "export RELEASE_DATE=$(date '+%Y%m%d')" >> $BASH_ENV
            echo "export PKG_CONFIG_PATH=/usr/local/opt/qt/lib/pkgconfig" >> $BASH_ENV
      - run:
          name: Add to Environment Variables
          command: |
            echo "export TARGET=lrose-cyclone-$RELEASE_DATE.src.mac_osx" >> $BASH_ENV
            echo "export LROSE_INSTALL_DIR=/usr/local/lrose" >> $BASH_ENV
            echo "export LROSE_ROOT_DIR=/usr/local/lrose" >> $BASH_ENV

        # needed for QJSEngine
      - run: brew install qt5-qtdeclarative-devel
      # needed for fractl, etc.                                                                               
      - run: brew install cmake
      - run: brew install cmake3

      - run:
          name: extract lrose-cyclone tgz 
          command: |
            echo "extracting lrose-cyclone from tgz"
            mkdir workarea
            cd workarea; tar xf /tmp/workspace_macos/releases/lrose-cyclone/osx/$TARGET.tgz
      - run:
          name: build lrose-cyclone 
          command: |
            echo "building lrose-cyclone from tgz"
            cd workarea; cd $TARGET; ./configure --disable-dependency-tracking --prefix=$LROSE_INSTALL_DIR
            cd workarea/$TARGET; make install
   
      - run: rsync -av share $LROSE_INSTALL_DIR                                        
                                       
      - run:
          name: Build/install fractl  
          command: |
            echo "building fractl"
            cd workarea/$TARGET/fractl; cmake .
            cd workarea/$TARGET/fractl; make

   #   - run: cd fractl                                                                
   # # ENV['LROSE_ROOT_DIR'] = prefix                                                     
   # system "cmake", "."                                                                
   # system "make"                                                                      
   # bin.install 'build/release/bin/fractl'                                             
   # Dir.chdir("..")                                                                    
                                                                                       
    # Build/install samurai                                                            
#    Dir.chdir("samurai")                                                               
#    ENV['LROSE_ROOT_DIR'] = prefix                                                     
#    system "cmake", "."                                                                
#    system "make", "VERBOSE=1"                                                         
#    bin.install 'build/release/bin/samurai'                                            
#    lib.install 'build/release/lib/libsamurai.a'                                       
#    lib.install 'build/release/lib/libsamurai.dylib'                                   
#    include.install 'src/samurai.h'                                                    
#    Dir.chdir("..")                                                                    

      - run:
          name: Build/install samurai  
          command: |
            echo "building samurai"
            cd workarea/$TARGET/samurai
            cmake .
            make VERBOSE=1

                                                                                       
    # Build/install vortrac                                                            
    #Dir.chdir("vortrac/src")                                                          
    #ENV['LROSE_ROOT_DIR'] = prefix                                                    
    #ENV['NETCDF_INCLUDE'] = "#{prefix}/include"                                       
    #ENV['NETCDF_LIB'] = "#{prefix}/lib"                                               
    #system "qmake", "."                                                               
    #system "make"                                                                     
    #bin.install 'vortrac.app/Contents/MacOS/vortrac'                                  
    #Dir.chdir("..")                                                                   
    #system "rsync", "-av", "Resources", "#{prefix}"                                   
    #Dir.chdir("..")                

      - run:
          name: Build/install vortrac  
          command: |
            echo "building vortrac"
            cd workarea/$TARGET/vortrac
            qmake .
            make
            rsync -av Resources $LROSE_INSTALL_DIR
            
      # TODO: create the DMG then, save as an artifact
      - run:
          name: Build HawkEye DMG
          command: |
            cd workarea/$TARGET/codebase/apps/radar/src/HawkEye
            make from_qmake
            mkdir -p HawkEye.app/Contents/Frameworks
            cp /usr/lib/libexpat.1.dylib HawkEye.app/Contents/Frameworks/.
            cp /usr/lib/libbz2.1.0.dylib HawkEye.app/Contents/Frameworks/.
            cp /usr/lib/libz.1.dylib HawkEye.app/Contents/Frameworks/.
            cp /usr/lib/libSystem.B.dylib HawkEye.app/Contents/Frameworks/.
            mkdir -p HawkEye.app/Contents/MacOS/../share
            cp -r ~/git/lrose-displays/color_scales HawkEye.app/Contents/MacOS/../share/.
            macdeployqt HawkEye.app -dmg -always-overwrite
            hdiutil create -volname HawkEye_Installer -srcfolder /tmp/workarea/codebase/apps/radar/src/HawkEye/HawkEye.app -ov -format UDZO HawkEye.dmg
            cp HawkEye.dmg /tmp/workspace_macos/releases/lrose-cyclone

      - run: RadxPrint -h
      - run: vortrac  -h
      - run: samurai -h
      - run: fractl -h

      - store_artifacts:
          path: /tmp/workspace_macos/releases/lrose-cyclone


  package-linux-lrose-cyclone-tgz:
    executor: my-executor
    working_directory: /tmp
    steps:
      - attach_workspace:
          at: /tmp/workspace_linux
      - run:
          name: package lrose-cyclone packages ( .tgz )
          command: echo "package lrose-cyclone software"
      - run: echo "package lrose-cyclone .tgz ..."
      - run: ls -R
      - run: pwd   # /private/tmp
      - run: 
          name: Setup Environment Variables
          command: |
            echo "export RELEASE_DATE=$(date '+%Y%m%d')" >> $BASH_ENV
            echo "export RELEASE_DIR=/tmp/workpace_linux/releases" >> $BASH_ENV
            #echo "export LROSE_CORE_RELEASE_DATE=$RELEASE_DATE" >> $BASH_ENV
            echo "export TAG=lrose-cyclone-20190726" >> $BASH_ENV

      - run:
          name: Add to Environment Variables
          command: |        
            echo "export TARGET=lrose-cyclone-$RELEASE_DATE.src" >> $BASH_ENV

      - run: ls -R /tmp/workspace_linux
      - run: echo "RELEASE_DATE = " $RELEASE_DATE
      - run: echo "TARGET = " $TARGET
      - run: tar zxf /tmp/workspace_linux/releases/lrose-core/lrose-core-$RELEASE_DATE.src.tgz
      - run: ls

# Grab the color scales
      - run: git clone https://github.com/ncar/lrose-displays
      - run: rsync -av lrose-displays/color_scales lrose-core-$RELEASE_DATE/share 

# Grab addons from mmbell
      - run: cd lrose-core-$RELEASE_DATE; git clone https://github.com/mmbell/samurai.git 
      - run: cd lrose-core-$RELEASE_DATE/samurai; git checkout -q $TAG
      - run: cd lrose-core-$RELEASE_DATE/samurai; rm -rf .git

      - run: cd lrose-core-$RELEASE_DATE; git clone https://github.com/mmbell/fractl.git 
      - run: cd lrose-core-$RELEASE_DATE/fractl; git checkout -q $TAG
      - run: cd lrose-core-$RELEASE_DATE/fractl; rm -rf .git

      - run: cd lrose-core-$RELEASE_DATE; git clone https://github.com/mmbell/vortrac.git 
      - run: cd lrose-core-$RELEASE_DATE/vortrac; git checkout -q $TAG
      - run: cd lrose-core-$RELEASE_DATE/vortrac; rm -rf .git

        # make the cyclone tar file 
      - run: mv lrose-core-$RELEASE_DATE lrose-cyclone-$RELEASE_DATE
      - run: tar zcf $TARGET.tgz lrose-cyclone-$RELEASE_DATE
      - run: ls 

      - run: mkdir -p /tmp/workspace_linux/releases/lrose-cyclone

        # move the tar file into the persisted workspace 
      - run: mv $TARGET.tgz /tmp/workspace_linux/releases/lrose-cyclone

      - persist_to_workspace:
          root: workspace_linux
          paths: 
            - releases/lrose-cyclone

      - store_artifacts:
          path: /tmp/workspace_linux/releases/lrose-cyclone


  test-linux-lrose-cyclone-tgz:
    executor: my-executor

    working_directory: /tmp
    steps:
      - attach_workspace:
          at: /tmp/workspace_linux

        # needed for QJSEngine
      - run: yum install -y qt5-qtdeclarative-devel
        # needed for fractl, etc.
      - run: yum install -y cmake
      - run: yum install -y cmake3

      - run: 
          name: Setup Environment Variables
          command: |
            echo "export RELEASE_DATE=$(date '+%Y%m%d')" >> $BASH_ENV
            echo "export PKG_CONFIG_PATH=/usr/local/opt/qt/lib/pkgconfig" >> $BASH_ENV
      - run:
          name: Add to Environment Variables
          command: |
            echo "export TARGET=lrose-cyclone-$RELEASE_DATE" >> $BASH_ENV
            echo "export LROSE_INSTALL_DIR=/usr/local/lrose" >> $BASH_ENV
            echo "export LROSE_ROOT_DIR=/usr/local/lrose" >> $BASH_ENV
            echo "export NETCDF_INCLUDE=/usr/local/lrose/include" >> $BASH_ENV 
            echo "export NETCDF_LIB=/usr/local/lrose/lib" >> $BASH_ENV 

      - run:
          name: extract lrose-cyclone tgz 
          command: |
            echo "extracting lrose-cyclone from tgz"
            mkdir workarea
            # HERE
            cd workarea; tar xf /tmp/workspace_linux/releases/lrose-cyclone/$TARGET.src.tgz
            pwd
            ls
      - run:
          name: build lrose-cyclone 
          command: |
            echo "building lrose-cyclone from tgz"
            cd workarea; cd $TARGET; ./configure --disable-dependency-tracking --prefix=$LROSE_INSTALL_DIR
            make install
   
      # TODO:
      # - run: rsync -av share $LROSE_INSTALL_DIR                                        
      # sending incremental file list
      # rsync: link_stat "/tmp/share" failed: No such file or directory (2)
      # Q: Are the color scales included in the tar file?
                    
      - run:
          name: Build/install fractl  
          command: |
            echo "building fractl"
            cd workarea/$TARGET/fractl; /usr/bin/cmake3 .
            make

   #   - run: cd fractl                                                                
   # # ENV['LROSE_ROOT_DIR'] = prefix                                                     
   # system "cmake", "."                                                                
   # system "make"                                                                      
   # bin.install 'build/release/bin/fractl'                                             
   # Dir.chdir("..")                                                                    
                                                                                       
    # Build/install samurai                                                            
#    Dir.chdir("samurai")                                                               
#    ENV['LROSE_ROOT_DIR'] = prefix                                                     
#    system "cmake", "."                                                                
#    system "make", "VERBOSE=1"                                                         
#    bin.install 'build/release/bin/samurai'                                            
#    lib.install 'build/release/lib/libsamurai.a'                                       
#    lib.install 'build/release/lib/libsamurai.dylib'                                   
#    include.install 'src/samurai.h'                                                    
#    Dir.chdir("..")                                                                    

      - run:
          name: Build/install samurai  
          command: |
            echo "building samurai"
            cd workarea/$TARGET/samurai; /usr/bin/cmake3 .
            make VERBOSE=1

      - run:
          name: Build/install vortrac  
          command: |
            echo "building vortrac"
            cd workarea/$TARGET/vortrac; qmake .
            make
            rsync -av Resources $LROSE_INSTALL_DIR

                                                                                       
    # Build/install vortrac                                                            
    #Dir.chdir("vortrac/src")                                                          
    #ENV['LROSE_ROOT_DIR'] = prefix                                                    
    #ENV['NETCDF_INCLUDE'] = "#{prefix}/include"                                       
    #ENV['NETCDF_LIB'] = "#{prefix}/lib"                                               
    #system "qmake", "."                                                               
    #system "make"                                                                     
    #bin.install 'vortrac.app/Contents/MacOS/vortrac'                                  
    #Dir.chdir("..")                                                                   
    #system "rsync", "-av", "Resources", "#{prefix}"                                   
    #Dir.chdir("..")                
      
      - run: $LROSE_INSTALL_DIR/RadxPrint -h
      - run: $LROSE_INSTALL_DIR/vortrac  -h
      - run: $LROSE_INSTALL_DIR/samurai -h
      - run: $LROSE_INSTALL_DIR/fractl -h
      - run: RadxPrint -h


  workspace-producer:
    executor: my-executor
    working_directory: /tmp
    steps:
      - run: mkdir -p workspace_macos/releases/lrose-core/osx
      - run: echo "this is really annoying" > workspace_macos/releases/lrose-core/osx/somejunk
      - persist_to_workspace:
          root: workspace_macos
          paths:
#            - releases/*
            - releases/lrose-core/osx

  workspace-consumer:
    executor: my-executor
    working_directory: /tmp
    steps:
      - attach_workspace:
          at: /tmp/workspace_macos
      - run: cat /tmp/workspace_macos/releases/lrose-core/osx/somejunk
      - run: awk '{print $1;}' /tmp/workspace_macos/releases/lrose-cyclone/osx/somejunk
      - run: 
          name: Add to Environment Variables
          command: |
            echo "export CHECKSUM32=`awk '{print $1;}' /tmp/workspace_macos/releases/lrose-cyclone/osx/somejunk`" >> $BASH_ENV
            echo "export checksum=`cat /tmp/workspace_macos/releases/lrose-cyclone/osx/somejunk`'" >> $BASH_ENV
      - run: echo $checksum
      - run: echo $CHECKSUM32

  package-lrose-cyclone:
    macos:
      xcode: "10.1.0"
    working_directory: /tmp

    steps:
      - attach_workspace:
          at: /tmp/workspace_macos
      - run:
          name: package lrose-cyclone mac specific apps ( .app )
          command: echo "building HawkEye.app"
      - run: echo "building HawkEye.app"

#      - run: ls -R
#       - run: brew install ??? -y qt5-qtdeclarative-devel
      # - run: cd workspace_macos; git clone https://github.com/NCAR/release-tools
#      - run: pwd   # /private/tmp
      #- run: ls workspace_macos
      #- run: cd release-tools/cyclone


#      - persist_to_workspace:
#          root: workspace_macos
#          paths: 
#            - releases
#      - store_artifacts:
#          path: /tmp/workspace_macos/releases/lrose-core/osx
          # should store  lrose-core-YYYYMMDD.mac_osx.tgz and lrose-core.rb
          # Ah, but don't we want lrose-core.src.osx.tgz?

 
 
#  build-docker-image-lrose-cyclone:
#    macos:
#      xcode: "10.1.0"
#    working_directory: /tmp
#    steps:
      # - run:
      # - store_artifacts:
      #     path: /tmp/docker-image
      #     destination: lrose-cyclone-docker.x


  build-brew-formula-lrose-cyclone:
    macos:
      xcode: "10.1.0"
    working_directory: /tmp
    steps:
      - attach_workspace:
          at: /tmp/workspace_macos
      - run:
          name: build brew formula lrose-cyclone.rb 
          command: echo "building brew formula for MacOS-Cyclone"
      - run: brew install wget
      - run: brew cask install xquartz 
        # should this be from a workspace? 
      # - run: wget https://github.com/NCAR/lrose-release-test/releases/download/testing/lrose-cyclone.rb
      # - run: brew install lrose-cyclone.rb
      - run: git clone https://github.com/nsf-lrose/release-tools
      # NOTE: depends on xxxx.src.mac_osx.tgz <======
      - run: release-tools/cyclone/homebrew-scripts/make-lrose-cyclone.sh
      - persist_to_workspace:
          root: workspace
          paths: 
            - output
      - store_artifacts:
          path: /tmp/brew-formula
          destination: lrose-cyclone.rb
 
 
  buildCentos-Cyclone-vortrac-build-changes:
    executor: my-executor
    steps:
      - run: date
      ## - checkout
      - run: yum install -y qt5-qtdeclarative-devel
      - run: yum install -y armadillo-devel
      - run: yum install -y cmake
      - run: yum install -y cmake3
      - run: export PKG_CONFIG_PATH=/usr/local/opt/qt/lib/pkgconfig
      - run: echo "building lrose-cyclone ..."
      - run: mkdir -p workspace
      - run: cd workspace; wget https://github.com/NCAR/lrose-release-test/releases/download/testing/lrose-cyclone-20190910-vortrac-build-changes.tgz
      - run: cd workspace; tar zxf lrose-cyclone-20190910-vortrac-build-changes.tgz
      - run: cd workspace/lrose-cyclone-20190801.src/codebase
      - run: pwd
      - run: ls workspace
      ## build lrose-core
      - run: cd workspace/lrose-cyclone-20190801.src/codebase; ./configure --disable-dependency-tracking --prefix /usr/local/lrose
      - run: cd workspace/lrose-cyclone-20190801.src/codebase; make install
      - run: rsync -av workspace/lrose-cyclone-20190801.src/share /usr/local/lrose                

      - run: export LROSE_ROOT_DIR=/usr/local/lrose

      ## build vortrac 
      - run: cd workspace/lrose-cyclone-20190801.src/vortrac/src; /usr/bin/qmake-qt5 .
      - run: cd workspace/lrose-cyclone-20190801.src/vortrac/src; make
      - run: cd workspace/lrose-cyclone-20190801.src/vortrac/src/vortrac.app/Contents/MacOS/vortrac -h

      ## build fractl
      - run: cd workspace/lrose-cyclone-20190801.src/fractl; /usr/bin/cmake3 .
      - run: cd workspace/lrose-cyclone-20190801.src/fractl; make
      - run: cd workspace/lrose-cyclone-20190801.src/fractl/build/release/bin/fractl -h

      ## build samurai
      - run: cd workspace/lrose-cyclone-20190801.src/samurai; /usr/bin/cmake3 .
      - run: cd workspace/lrose-cyclone-20190801.src/samurai; make
      - run: cd workspace/lrose-cyclone-20190801.src/samurai/build/release/bin/samurai -h
      ## maybe move the libs, executable, and includes into place?



      - run: ls -R /usr/local/lrose
      - run: /usr/local/lrose/bin/RadxPrint -h
      - run: /usr/local/lrose/bin/samurai -h
      - run: /usr/local/lrose/bin/fractl -h
      - run: /usr/local/lrose/bin/vortrac -h


#  working here ...
#  buildntest-osx-lrose-cyclone-tgz:
#    macos:
#  ...
#    attach_workspace:
#           - package-lrose-cyclone-tgz
#
#    - run: tar xvf lrose-cyclone-xxxxxx.mac_osx.tgz
#    - run: build libs
#    - run: build apps
#    - persist_workspace:
#        - path: entire_build and install area

#  package-osx-lrose-cyclone-apps:
#    macos:
 #...
#    attach_workspace:
#    - path: entire_build and install area
#           - buildntest-osx-lrose-cyclone-tgz
#    - run: cd codebase/apps/radar/src/HawkEye; make hawkeye_app_nosign
#    - run: cd vortrac; make app?
#    - persist_artifacts:
#      - path: HawkEye.app
#    - persist_artifacts:
#      - path: Vortrac.app


  # build from a tagged version of lrose-core
  build-cyclone-docker-tagged-version:
    ## just use a generic ubuntu. The Dockerfile installs the dependent packages.
    executor: ubuntu-executor
    steps:
      - run: date
      ## - checkout
      - run: echo "building lrose-cyclone docker image ..."
      - run: mkdir -p workspace
      - run: cd workspace; git clone https://github.com/nsf-lrose/release-tools
      - run: pwd
      - run: ls workspace
      - run: cd workspace/git/release-tools/cyclone/lrose-docker-scripts; ./build.sh --releaseDate lrose-cyclone-20190801
      - run: |
          if [[ `echo "y" | ./workspace/lrose-core/build/checkout_and_build_auto.py --useSystemNetcdf --package=lrose-blaze --prefix /usr/local/lrose` == 0 ]]; then
              echo "It worked"
          else 
              tail -n 100 /tmp/lrose_build/logs/*
          fi
               
      - run: ls -R /usr/local/lrose
      - run: /usr/local/lrose/bin/RadxPrint -h

  # build from the head of lrose-core
  build-cyclone-docker:
    ## just use a generic ubuntu. The Dockerfile installs the dependent packages.
    # executor: ubuntu-executor
    machine:
      docker_layer_caching: true
    steps:
      - run: date
      ## - checkout
      - run: echo "building lrose-cyclone docker image ..."
      - run: mkdir -p workspace
      - run: cd workspace; git clone https://github.com/nsf-lrose/release-tools
      - run: pwd
      - run: ls workspace
      - run: cd workspace/release-tools/cyclone/lrose-docker-scripts; ./build.sh
      - run: ls -R
#      - persist_to_workspace:
#          root: workspace
#          paths: 
#      - store_artifacts:
#          path: /tmp/workspace
#          destination: 
  
        #  --releaseDate lrose-cyclone-20190801
      #- run: |
      #    if [[ `echo "y" | ./workspace/lrose-core/build/checkout_and_build_auto.py --useSystemNetcdf --package=lrose-cyclone --prefix /usr/local/lrose` == 0 ]]; then
      #        echo "It worked"
      #    else 
      #        tail -n 100 /tmp/lrose_build/logs/*
      #    fi
               
      #- run: ls -R /usr/local/lrose
      #- run: /usr/local/lrose/bin/RadxPrint -h



workflows:
  version: 2.1
  nightly:
    triggers: 
      - schedule:
          #     "mm hh day month dow"  Note: 22 is about 3pm MST
          cron: "45 10 * * *"   # for 5:30 am MST 
          filters:
            branches:
              only:
                - master
    jobs:
      - one
      
  nightly_full:
    triggers: 
      - schedule:
          #     "mm hh day month dow"  Note: 22 is about 3pm MST
          cron: "45 7 * * *"   # for 5:30 am MST 
          filters:
            branches:
              only:
                - master
    jobs:      
      - two 
      
     # - two:
     #    requires:
     #      - one
      #- three:
      #    requires:
      #      - one
      #      - two
          
  now:
    jobs:
#       - test-brew-install-lrose-cyclone
#       - build-cyclone-docker  # error in build apps; not sure where; log file is /tmp/lrose_build/logs/build-apps.log

#      - workspace-producer
#      - workspace-consumer:
#          requires:
#           - workspace-producer


#      - package-lrose-core-tgz
#      - package-lrose-cyclone-tgz:
#          requires:
#           - package-lrose-core-tgz

      - package-lrose-core-tgz
      - package-linux-lrose-cyclone-tgz: 
          requires:
           - package-lrose-core-tgz
      - test-linux-lrose-cyclone-tgz:
          requires:
           - package-linux-lrose-cyclone-tgz
          
#      - package-osx-brew-formula:
#          requires:
#           - package-lrose-cyclone-tgz

#      - buildntest-osx-lrose-cyclone-tgz:
#          requires:
#           - package-lrose-cyclone-tgz

#      - package-osx-lrose-cyclone-apps:
#          requires:
#           - buildntest-osx-lrose-cyclone-tgz


#      - buildntest-linux-lrose-cyclone-tgz:
#          requires:
#           - package-lrose-cyclone-tgz


# not functional until pushing artifacts to git repo ...
#      - test-brew-install-lrose-cyclone-from-workspace:
#          requires:
#           - package-osx-brew-formula



      # - build-cyclone-docker
      # - buildCentos-Cyclone-vortrac-build-changes  
      # - buildMacOS-Cyclone

#  main:
#    jobs:
#      - build:
#          filters:
#            tags:
#              only: /^\d+\.\d+\.\d+$/
#      - publish-github-release:
#          requires:
#            - build
#          filters:
#            branches:
#              ignore: /.*/
#            tags:
#              only: /^\d+\.\d+\.\d+$/


######
#
#Custom Docker Images
#
# keep Dockerfile in .circleci/images folder, e.g.
#
#  .circleci/images/primary/Dockerfile
# 
# Q: how to build and then use the image in this script
#
# these tools are required for Primary Containers in CircleCI
#git
#ssh
#tar
#gzip
#ca-certificates
# Q: Can I use a circleci container as a starting image?
# In order to allow CircleCI to use your custom image, store it in a public Docker Registry. 
#
#  or can we build the Docker image in CircleCI, then pass it to the downstream jobs?
#  Actually, this is preferable, since we don't have an external step that someone
#  has to maintain.
#
##########

# Executors and Images 

# Docker
 #
#jobs:
  #build_environment: # name of your job
    #docker: # executor type
      ##
      ## the image is stored in a public Docker repository
      ## 1. prepare the image for the registry
      ## $ docker build -t circleci/cci-demo-docker-primary:0.0.1 <path-to-dockerfile>
      ##
      ## 2. push the image to the registry
      ## $ docker login
      ## $ docker push circleci/cci-demo-docker-primary:0.0.1
      ##
      ## 3. use the image from the registry
      ## - image: circleci/cci-demo-docker-primary:0.0.1
      #-image: docker:stable-git 
#
#
    #working_directory: ~/
#

# Machine

#jobs:
  #build: 
    #machine: 
      #image: circleci/classic:201708-01 # VM will run: Ubuntu 14.04 for this release date
#
## macOS
#
#jobs:
  #build:
    #macos:
      #xcode: "9.0"
      #
    #steps:
      ## Commands will execute in macOS container
      ## with Xcode 9.0 installed
      #- run: xcodebuild -version
#
#
#
#############

# Note that the following stanza uses CircleCI 2.1 to make use of a Reusable Executor
# This allows defining a docker image to reuse across jobs.
# visit https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-executors to learn more.
#
#version: 2.1
#
#executors:
  #my-executor:
    #docker:
      #- image: centos  # buildpack-deps:jessie
    #working_directory: /tmp
#
#jobs:
  #flow:
    #executor: my-executor
    #steps:
      #- run: yum -y install ca-certificates
      #- run: mkdir -p workspace
      #- run: echo "Hello, world!" > workspace/echo-output
      #
      ### Persist the specified paths (workspace/echo-output) into the workspace for use in downstream job. 
      #- persist_to_workspace:
          ### Must be an absolute path, or relative path from working_directory. This is a directory on the container which is 
          ### taken to be the root directory of the workspace.
          #root: workspace
          ### Must be relative path from root
          #paths:
            #- echo-output
#
  #downstream:
    #executor: my-executor
    #steps:
      #- attach_workspace:
          ### Must be absolute path or relative path from working_directory
          #at: /tmp/workspace
#
      #- run: |
          #if [[ `cat /tmp/workspace/echo-output` == "Hello, world!" ]]; then
            #echo "It worked!";
          #else
            ##echo "Nope!"; exit 1
          #fi
#
#workflows:
  #version: 2.1
#
  #btd:
    #jobs:
      #- flow
      #- downstream:
          #requires:
            #- flow
