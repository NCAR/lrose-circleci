
version: 2.1

orbs: 
  singularity: singularity/singularity@1.0.11

executors:
  my-executor:
    docker:
      # - image: centos  
      # - image: circleci/cci-demo-docker-primary:0.0.1
      # this is CentOS Linux release 7.6.1810 (Core) TODO: move this to centos 7.7
      - image: leavesntwigs/lrose-build-env:centos-20190301
    working_directory: /tmp

  centos7-executor:
    docker:
      # - image: centos
      # cat /etc/redhat-release
      # this is CentOS Linux release 7.7.1908 (Core)  
      - image: leavesntwigs/lrose-build-env-centos7:20191202
    working_directory: /tmp

  centos8-executor:
    docker:
      # - image: centos
      # cat /etc/redhat-release
      # this is CentOS Linux release 8.? (Core)  
      - image: leavesntwigs/lrose-build-env-centos8:20191203
    working_directory: /tmp

  ubuntu-executor:
    docker:
      - image: leavesntwigs/lrose-build-env-ubuntu:20191004
    working_directory: /tmp

  docker:
    description: Pre-build Docker container base to interact with Singularity
    parameters:
      singularity-version:
        type: string
        default: v3.8.2-slim
    docker:
      - image: 'quay.io/singularity/singularity:<< parameters.singularity-version >>'


jobs:
  one:
    executor: my-executor
    steps:
      - run: date
      ## - checkout
      - run: yum install -y qt5-qtdeclarative-devel
      - run: echo "building lrose-blaze ..."
      - run: mkdir -p workspace
      - run: cd workspace; git clone https://github.com/NCAR/lrose-core
      - run: pwd
      - run: ls workspace
      - run: |
          if [[ `echo "y" | ./workspace/lrose-core/build/checkout_and_build_auto.py  --package=lrose-blaze --prefix /usr/local/lrose` == 0 ]]; then
              echo "It worked"
          else 
              tail -n 100 /tmp/lrose_build/logs/*
          fi
               
      - run: ls -R /usr/local/lrose
      - run: /usr/local/lrose/bin/RadxPrint -h

      ### Persist the specified paths into the workspace for use in downstream job. 
      - persist_to_workspace:
          # ### Must be an absolute path, or relative path from working_directory. 
          # ### This is a directory on the container which is 
          # ### taken to be the root directory of the workspace.
          root: workspace
          # ### Must be relative path from root
          paths:
            - lrose-core

# -------- topaz --------

  test-macos-lrose-topaz-tgz:
    macos:
      xcode: "11.2.1"

    working_directory: /tmp
    steps:
      # - attach_workspace:
      #    at: /tmp/workspace_macos

        # needed for QJSEngine: qt5-qtdeclarative-devel
      - run:
          name: Install needed packages
          command: |
            git -C /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core fetch --unshallow
            git -C /usr/local/Homebrew/Library/Taps/homebrew/homebrew-cask fetch --unshallow
            brew install cmake
            brew install eigen
            brew install fftw flex
            brew install qt5 netcdf
            brew install szip pkg-config                                                            
            brew install geographiclib                                                     
            brew install armadillo                                                         
            brew install libomp libzip
            brew install rsync

      - run: brew install --cask xquartz

      - run: 
          name: Setup Environment Variables
          command: |
            echo "export RELEASE_DATE=$(date '+%Y%m%d')" >> $BASH_ENV
            echo "export PKG_CONFIG_PATH=/usr/local/opt/qt/lib/pkgconfig" >> $BASH_ENV
            echo "export PATH=/usr/local/opt/qt/bin:$PATH" >> $BASH_ENV
            echo "export BASE_DIR=/private" >> $BASH_ENV

      - run: echo $HOME

      - run:
          name: Add to Environment Variables
          command: |
            echo "export TARGET=lrose-topaz-$RELEASE_DATE.src" >> $BASH_ENV
            echo "export SOURCE_DIR=lrose-topaz-$RELEASE_DATE" >> $BASH_ENV
            echo "export LROSE_INSTALL_DIR=/tmp/workarea/lrose" >> $BASH_ENV
            echo "export    LROSE_ROOT_DIR=/tmp/workarea/lrose" >> $BASH_ENV
            echo "export PATH=/usr/local/opt/qt/bin:$PATH" >> $BASH_ENV
            echo "export FCFLAGS='-w -fallow-argument-mismatch -O2'" >> $BASH_ENV
            echo "export FFLAGS='-w -fallow-argument-mismatch -O2'" >> $BASH_ENV
            # samurai needs LROSE_ROOT_DIR
            #echo "export LROSE_INSTALL_DIR=/usr/local/lrose" >> $BASH_ENV
            echo "export WORKAREA=$BASE_DIR/tmp/workarea" >> $BASH_ENV

      - run:
          name: extract lrose-topaz tgz 
          command: |
            mkdir $WORKAREA
            pwd 
            cd /tmp/workarea
            echo "fetching tar files from release ... "
            wget https://github.com/NCAR/lrose-core/releases/download/lrose-core-20210524/lrose-core-20210524.src.tgz
            echo "extracting lrose-topaz from tgz ..."
            tar xf lrose-core-20210524.src.tgz
            cd lrose-core-20210524.src/build/cmake
            echo "installing in ~/lrose ... "
            ./createCMakeLists.py --prefix /tmp/workarea/lrose
            cd ../../codebase
            mkdir build
            cd build
            cmake ..
            cd libs
            make install
            cd ../apps/tdrp/src/tdrp_gen
            make install
            echo "only building RadxPrint "
            cd ../../../Radx/src/RadxPrint
            make install
            echo "only building HawkEye "
            cd $
            make install

            # move back to the source area to make the dmg
 #581  mkdir -p HawkEye.app/Contents/Frameworks
 # 582  mkdir -p HawkEye.app/Contents/MacOS/../share
 # 583          cp -r ~/git/lrose-displays/color_scales HawkEye.app/Contents/MacOS/../share/.
 # 584  cp /tmp/workarea/lrose/bin/HawkEye HawkEye.app/Contents/MacOS/.
 # 585  echo $CERT_NAME
 # 586  /usr/local/opt/qt/bin/macdeployqt HawkEye.app -dmg -always-overwrite 
 # move the dmg to the artifact area

 # TODO: make macos package installer for lrose-core, samurai, vortrac, and fractl
 # TODO: add icons for HawkEye, vortrac, and lrose-installer.
      - run: 
          name: text the install
          command: |
            $LROSE_INSTALL_DIR/bin/RadxPrint -h  

      # NOTE: vortrac uses the environment variable LROSE_INSTALL_DIR
      - run:
          name: build vortrac
          command: | 
            cd /tmp/workarea
            echo "fetching tar file from release ... "
            wget https://github.com/NCAR/lrose-core/releases/download/lrose-core-20210524/lrose-vortrac-20210524.src.tgz
            echo "extracting lrose-topaz from tgz ..."
            tar xf lrose-vortrac-20210524.src.tgz
            cd lrose-vortrac-20210524.src
            cd src 
            qmake .
            make
            cp ../Resources/*.xml vortrac.app/Contents/Resources/
            /usr/local/opt/qt/bin/macdeployqt vortrac.app -dmg
            # move dmg to artifact area ... 




  test-macos-lrose-topaz-tgz-remainder:
    macos:
      xcode: "11.2.1"

    working_directory: /tmp
    steps:
      - run: cd workarea/$SOURCE_DIR; rsync -av share $LROSE_INSTALL_DIR                                                                               
      - run:
          name: Install needed packages
          command: |
            brew install eigen
            brew install libomp libzip
            brew install llvm

      # don't exit if one of the commands fails 
      # - run: set +e

      - run:
          name: Set Environment Variables
          command: |
            echo "export RADX_INCLUDE=$LROSE_INSTALL_DIR/include" >> $BASH_ENV
            echo "export RADX_LIB=$LROSE_INSTALL_DIR/lib" >> $BASH_ENV
            echo "export ARMADILLO_INCLUDE=`pkg-config --variable=includedir armadillo`" >> $BASH_ENV
            echo "export ARMADILLO_LIB=`pkg-config --variable=libdir armadillo`" >> $BASH_ENV
            echo "export NETCDF_INCLUDE=/usr/local/include" >> $BASH_ENV
            echo "export NETCDF_LIB=/usr/local/lib" >> $BASH_ENV
            echo "export LD_LIBRARY_PATH=$LROSE_INSTALL_DIR/lib" >> $BASH_ENV

      - run: find /usr/local/ -name Qt5Config.cmake

      # NOTE: This may no longer be true; Qt was removed from Samurai
      # samurai needs Qt, from this error ...
      # CMake Error at CMakeLists.txt:20 (find_package):
      # By not providing "FindQt5.cmake" in CMAKE_MODULE_PATH this project has
      # asked CMake to find a package configuration file provided by "Qt5", but
      # CMake did not find one.
      #
      # Could not find a package configuration file provided by "Qt5" with any of
      # the following names:
      # 
      # Qt5Config.cmake
      # qt5-config.cmake

      #  from https://github.com/Cockatrice/Cockatrice/issues/205   -DCMAKE_PREFIX_PATH=/usr/local/Cellar/qt5/5.3.1/

      #
      # cmake -DCMAKE_INSTALL_PREFIX=$LROSE_INSTALL_DIR -DCMAKE_MODULE_PATH=/usr/local/Cellar/qt/5.13.1/lib/cmake/Qt5 -D OpenMP_C_FLAGS=`pkg-config --cflags ompi-c`  -D OpenMP_C_LIB_NAMES="" -D OpenMP_CXX_FLAGS=`pkg-config --cflags ompi-cxx` -D OpenMP_CXX_LIB_NAMES=""  .
      #

#            ln -s /usr/local/opt/llvm/bin/clang /usr/local/bin/clang-omp
#            ln -s /usr/local/opt/llvm/bin/clang++ /usr/local/bin/clang-omp++

# 
#            cmake -DCMAKE_INSTALL_PREFIX=$LROSE_INSTALL_DIR \
#               -DCMAKE_MODULE_PATH=/usr/local/Cellar/qt/5.13.2/lib/cmake/Qt5 \
#               -D OpenMP_C_FLAGS=`pkg-config --cflags ompi-c` \
#               -D OpenMP_C_LIB_NAMES="" \ 
#               -D OpenMP_CXX_FLAGS=`pkg-config --cflags ompi-cxx` \
#               -D OpenMP_CXX_LIB_NAMES="" /private/tmp/workarea/$SOURCE_DIR/samurai
#

      - run:
          name: Set Environment Variables for samurai
          command: |
            echo "export OCFLAGS=`pkg-config --cflags ompi-c`" >> $BASH_ENV
            echo "export OCXXFLAGS=`pkg-config --cflags ompi-cxx`" >> $BASH_ENV

            #  echo "export CMAKE_QT5=/usr/local/opt/qt/lib/cmake/Qt5" >> $BASH_ENV

      - run:
          name: Build/install samurai  
          command: |
            set +e
            echo "building samurai"
            echo "ls $LROSE_INSTALL_DIR"
            ls $LROSE_INSTALL_DIR
            echo " ... after ls $LROSE_INSTALL_DIR"
            echo " ... cmake.qt5.config or something should be here"
            ls $CMAKE_QT5
            echo $OCFLAGS
            echo $OCXXFLAGS
            cd /private/tmp/workarea/$SOURCE_DIR/samurai
            cmake -DCMAKE_INSTALL_PREFIX=$LROSE_INSTALL_DIR -DCMAKE_MODULE_PATH=$CMAKE_QT5 -D OpenMP_C_FLAGS=$OCFLAGS -D OpenMP_C_LIB_NAMES="" -D OpenMP_CXX_FLAGS=$OCXXFLAGS -D OpenMP_CXX_LIB_NAMES="" .
            make 
            make install
            pwd
            echo "building vortrac"
            find /usr/local -name netcdf.h
            cd /private/tmp/workarea/$SOURCE_DIR/vortrac/src
            pwd
            qmake .
            make
            cp ../Resources/*.xml vortrac.app/Contents/Resources/
            cp vortrac.app/Contents/MacOS/vortrac $LROSE_INSTALL_DIR/bin
            cd ..
            rsync -av Resources $LROSE_INSTALL_DIR
            echo "building fractl"
            ln -s /usr/local/Cellar/geographiclib /usr/local/include/GeographicLib
            ls -l /usr/local/include/geographiclib
            ls -R /usr/local/include/GeographicLib
            cd /private/tmp/workarea/$SOURCE_DIR/fractl
            cmake -DCMAKE_INSTALL_PREFIX=$LROSE_INSTALL_DIR .
            make
            make install 
            echo "building HawkEye.dmg"
            cd /private/tmp/workarea/$SOURCE_DIR/apps/radar/src/HawkEye
            pwd            
            make clean
            qmake -o Makefile.qmake
            echo " ...  make from_qmake"
            make -f Makefile.qmake
            echo " ... after qmake"
            mkdir -p HawkEye.app/Contents/Frameworks
            echo " ... after mkdir"
            cp /usr/lib/libexpat.1.dylib HawkEye.app/Contents/Frameworks/.
            cp /usr/lib/libbz2.1.0.dylib HawkEye.app/Contents/Frameworks/.
            cp /usr/lib/libz.1.dylib HawkEye.app/Contents/Frameworks/.
            cp /usr/lib/libSystem.B.dylib HawkEye.app/Contents/Frameworks/.
            mkdir -p HawkEye.app/Contents/MacOS/../share
            cp -r /private/tmp/workarea/$SOURCE_DIR/share/color_scales HawkEye.app/Contents/MacOS/../share/.
            echo " ... before calling macdeployqt"
            macdeployqt HawkEye.app -dmg -always-overwrite
            echo " .. before calling hdiutil"
            hdiutil create -volname HawkEye_Installer -srcfolder /private/tmp/workarea/$SOURCE_DIR/apps/radar/src/HawkEye/HawkEye.app -ov -format UDZO HawkEye.dmg
            echo " ... after dmp build"
            cp HawkEye.dmg /private/tmp/workspace_macos/releases/lrose-elle
            echo " ... done with building HawkEye"
            echo "building vortrac.dmg"
            cd /private/tmp/workarea/$SOURCE_DIR/vortrac
            pwd            
            echo " ... before calling macdeployqt"
            cd src
            macdeployqt vortrac.app -dmg -always-overwrite
            cp ../Resources/*.xml vortrac.app/Contents/Resources/
            echo " .. before calling hdiutil"
            hdiutil create -volname Vortrac_Installer -srcfolder /private/tmp/workarea/$SOURCE_DIR/vortrac/src/vortrac.app -ov -format UDZO vortrac.dmg
            echo " ... after dmp build"
            cp vortrac.dmg /private/tmp/workspace_macos/releases/lrose-elle
            echo " ... done with building vortrac"
            echo " Start of tests ... "
            echo "   testing RadxPrint ..."
            $LROSE_INSTALL_DIR/bin/RadxPrint -h
            echo "   testing vortrac ..."
            $LROSE_INSTALL_DIR/bin/vortrac  -h
            echo "   testing fractl ..."
            $LROSE_INSTALL_DIR/bin/fractl -h
            echo "   testing samurai ..."
            $LROSE_INSTALL_DIR/bin/samurai -h
            echo " End of tests"

      - run:
          name: Set Environment Variables for MacOS Installer
          command: |
            echo "export INSTALL_BASE_DIR=/usr/local" >> $BASH_ENV
            echo "export ARCHIVE_FILENAME=LROSE-Topaz_Installer.pkg" >> $BASH_ENV
            echo "export PACKAGE_NAME=LROSE-Core.pkg" >> $BASH_ENV
            echo "export PARTY3_BASE_DIR=/usr/local" >> $BASH_ENV
            echo "export STAGING=$LROSE_INSTALL_DIR" >> $BASH_ENV

#
# just use the install area as the staging area
#     echo "export LROSE_INSTALL_DIR=/tmp/workarea/install/lrose" >> $BASH_ENV

      - run:
          name: Build MacOS Installer
          command: |
            set +e
            cd /private/tmp/workarea
            mkdir macos_installer
            cd macos_installer
            mkdir scripts
            echo "#!/bin/sh" >> scripts/postinstall
            echo "echo \"Running postinstall\" > /tmp/my_postinstall.log " >> scripts/postinstall
            echo "exit 0 # all good" >> scripts/postinstall
            echo "#!/bin/sh" >> scripts/preinstall
            echo "echo \"Running preinstall\" > /tmp/my_preinstall.log " >> scripts/preinstall
            echo "exit 0 # all good" >> scripts/preinstall
            chmod u+x scripts/postinstall
            chmod u+x scripts/preinstall
            mkdir myresources
            echo "license" >> myresources/LICENSE.html
            echo "readme" >> myresources/README.html
            echo "building MacOS Installer"
            echo "  copying 3rd party libraries to staging area"
            echo "  (use otool -L to find these dependencies)"
            cp ${PARTY3_BASE_DIR}/lib/libnetcdf.*.dylib ${STAGING}/lib
            cp ${PARTY3_BASE_DIR}/lib/libhdf5*.dylib ${STAGING}/lib
            cp ${PARTY3_BASE_DIR}/lib/libarmadillo.*.dylib ${STAGING}/lib
            cp ${PARTY3_BASE_DIR}/lib/libz*dylib ${STAGING}/lib
            cp ${PARTY3_BASE_DIR}/lib/libbz2*dylib ${STAGING}/lib
            cp ${PARTY3_BASE_DIR}/lib/libc++*dylib ${STAGING}/lib
            cp ${PARTY3_BASE_DIR}/lib/libfftw3*dylib ${STAGING}/lib
            cp ${PARTY3_BASE_DIR}/lib/libGeographic.*.dylib ${STAGING}/lib
            cp ${PARTY3_BASE_DIR}/lib/libomp.dylib ${STAGING}/lib
            cp ${PARTY3_BASE_DIR}/opt/libpng/lib/libpng16*dylib ${STAGING}/lib
            echo "  copy frameworks from 3rd parties"
            tar -czf staging.tar.gz /tmp/workarea/install 
            pkgbuild --analyze --root /tmp/workarea/install LROSE-Cyclone_Components.plist
            pkgbuild --root /tmp/workarea/install --scripts scripts --identifier edu.ucar.lrose --install-location "/usr/local/lrose_20200108"  ${PACKAGE_NAME}
            productbuild --synthesize --package ${PACKAGE_NAME} Distribution.xml
            productbuild --distribution ./Distribution.xml --package-path . --resources myresources/ ./${ARCHIVE_FILENAME}
            echo "   make the disk image (.dmg)"
            mkdir -p for_dmg_only
            cp ${ARCHIVE_FILENAME} for_dmg_only/.
            hdiutil create -volname LROSE-Cyclone_Installer -srcfolder for_dmg_only -ov -format UDZO LROSE-Cyclone_Installer.dmg
            cd ..
            cp -R macos_installer /private/tmp/workspace_macos/releases/lrose-elle


#            cp LROSE-Cyclone_Installer.dmg /private/tmp/workspace_macos/releases/lrose-elle
#            cp ${ARCHIVE_FILENAME} /private/tmp/workspace_macos/releases/lrose-elle
#            cp LROSE-Cyclone_Components.plist /private/tmp/workspace_macos/releases/lrose-elle
#            cp /private/tmp/workspace_macos/releases/lrose-elle
#            cp /private/tmp/workspace_macos/releases/lrose-elle

      - store_artifacts:
          path: /tmp/workspace/releases/lrose-topaz


  test-macos-topaz-rb-20211114:
    macos:
      xcode: "12.4.0"  # 11.2.1"      # xcode: "10.2.1"

    steps:
      - run:
          name: brew install lrose-topaz.rb Catalina Xcode 12.4.0
          command: echo "testing brew install MacOS-Topaz lrose-core.rb"
 
      - run: brew update
      - run: brew install wget
      - run: wget https://github.com/NCAR/lrose-core/releases/download/lrose-core-20211114/lrose-core.rb
      # - run: wget https://github.com/leavesntwigs/lrose-test/releases/download/20210311/lrose-core.rb    
      # - run: wget https://github.com/NCAR/lrose-core/releases/download/lrose-core-20210216/lrose-core.rb
      #- run: brew cask install xquartz  # for older versions of brew 
      - run: brew install --cask xquartz
      #- run: brew install qt5
      # installs qt6! ACK!
      # ==> Installing qt
#==> Pouring qt-6.0.2.catalina.bottle.tar.gz
#🍺  /usr/local/Cellar/qt/6.0.2: 8,233 files, 158.1MB
#==> Upgrading 2 dependents:
      #- run: find / -name Qt5Config.cmake

      #- run: find /usr/local/ -name qt5-config.cmake

      # ---- from old Samurai build ...
      #- run: find /usr/local/ -name Qt5Config.cmake
      # found here /usr/local//Cellar/qt@5/5.15.2/lib/cmake/Qt5/Qt5Config.cmake
      #- run: echo "export Qt5_DIR=/usr/local//Cellar/qt@5/5.15.2/lib/cmake/Qt5" >> $BASH_ENV
      #- run: ls /usr/local/opt/qt/lib/cmake/Qt5

      # samurai needs Qt, from this error ...
      # CMake Error at CMakeLists.txt:20 (find_package):
      # By not providing "FindQt5.cmake" in CMAKE_MODULE_PATH this project has
      # asked CMake to find a package configuration file provided by "Qt5", but
      # CMake did not find one.
      #
      # Could not find a package configuration file provided by "Qt5" with any of
      # the following names:
      # 
      # Qt5Config.cmake
      # qt5-config.cmake

      #  from https://github.com/Cockatrice/Cockatrice/issues/205   -DCMAKE_PREFIX_PATH=/usr/local/Cellar/qt5/5.3.1/

      #
      # cmake -DCMAKE_INSTALL_PREFIX=$LROSE_INSTALL_DIR -DCMAKE_MODULE_PATH=/usr/local/Cellar/qt/5.13.1/lib/cmake/Qt5 -D OpenMP_C_FLAGS=`pkg-config --cflags ompi-c`  -D OpenMP_C_LIB_NAMES="" -D OpenMP_CXX_FLAGS=`pkg-config --cflags ompi-cxx` -D OpenMP_CXX_LIB_NAMES=""  .
      #

#            ln -s /usr/local/opt/llvm/bin/clang /usr/local/bin/clang-omp
#            ln -s /usr/local/opt/llvm/bin/clang++ /usr/local/bin/clang-omp++

# 
#            cmake -DCMAKE_INSTALL_PREFIX=$LROSE_INSTALL_DIR \
#               -DCMAKE_MODULE_PATH=/usr/local/Cellar/qt/5.13.2/lib/cmake/Qt5 \
#               -D OpenMP_C_FLAGS=`pkg-config --cflags ompi-c` \
#               -D OpenMP_C_LIB_NAMES="" \ 
#               -D OpenMP_CXX_FLAGS=`pkg-config --cflags ompi-cxx` \
#               -D OpenMP_CXX_LIB_NAMES="" /private/tmp/workarea/$SOURCE_DIR/samurai
#

#      - run:
#          name: Set Environment Variables for samurai
#          command: |
#            echo "export CMAKE_QT5=/usr/local/opt/qt/lib/cmake/Qt5" >> $BASH_ENV
# ---- end from old Samurai build


      - run: 
          name: installing lrose-core
          no_output_timeout: 60m
          command: |
            brew install lrose-core.rb
      # getting this warning ...
      # ==> Installing lrose-core
      # Warning: Calling depends_on :x11 is deprecated! Use depends_on specific X11 formula(e) instead.
      # ==> ./configure --prefix=/usr/local/Cellar/lrose-core/core-20200719
      # ==> make install
      - run: RadxPrint -h

# -------- topaz end --------

  run-brew-no-szip:
    macos:
      xcode: "13.3"  # corresponds to MacOS 12.3.1 Monterey

    steps:
      - run:
          name: brew install lrose-topaz.rb Monterey Xcode 13.3.0
          command: echo "testing brew install MacOS-Topaz lrose-core.rb"
 
      - run: brew update
      - run: brew install wget
      - run: 
          name: install python2
          command: |
            wget https://raw.githubusercontent.com/Homebrew/homebrew-core/86a44a0a552c673a05f11018459c9f5faae3becc/Formula/python@2.rb
            brew install python@2.rb
            
      - run: python --version 

      # original formulae with szip
      # - run: wget https://github.com/NCAR/lrose-core/releases/download/lrose-core-20220222/lrose-core.rb
      # modified formulae with libaec substituted for szip
      - run: wget https://github.com/NCAR/lrose-release-test/releases/download/20220422/lrose-core.rb

      #- run: brew cask install xquartz  # for older versions of brew 
      - run: brew install --cask xquartz
      #- run: brew install qt5
      # installs qt6! ACK!
      # ==> Installing qt
#==> Pouring qt-6.0.2.catalina.bottle.tar.gz
#🍺  /usr/local/Cellar/qt/6.0.2: 8,233 files, 158.1MB
#==> Upgrading 2 dependents:
      #- run: find / -name Qt5Config.cmake

      #- run: find /usr/local/ -name qt5-config.cmake

      # ---- from old Samurai build ...
      #- run: find /usr/local/ -name Qt5Config.cmake
      # found here /usr/local//Cellar/qt@5/5.15.2/lib/cmake/Qt5/Qt5Config.cmake
      #- run: echo "export Qt5_DIR=/usr/local//Cellar/qt@5/5.15.2/lib/cmake/Qt5" >> $BASH_ENV
      #- run: ls /usr/local/opt/qt/lib/cmake/Qt5

      # samurai needs Qt, from this error ...
      # CMake Error at CMakeLists.txt:20 (find_package):
      # By not providing "FindQt5.cmake" in CMAKE_MODULE_PATH this project has
      # asked CMake to find a package configuration file provided by "Qt5", but
      # CMake did not find one.
      #
      # Could not find a package configuration file provided by "Qt5" with any of
      # the following names:
      # 
      # Qt5Config.cmake
      # qt5-config.cmake

      #  from https://github.com/Cockatrice/Cockatrice/issues/205   -DCMAKE_PREFIX_PATH=/usr/local/Cellar/qt5/5.3.1/

      #
      # cmake -DCMAKE_INSTALL_PREFIX=$LROSE_INSTALL_DIR -DCMAKE_MODULE_PATH=/usr/local/Cellar/qt/5.13.1/lib/cmake/Qt5 -D OpenMP_C_FLAGS=`pkg-config --cflags ompi-c`  -D OpenMP_C_LIB_NAMES="" -D OpenMP_CXX_FLAGS=`pkg-config --cflags ompi-cxx` -D OpenMP_CXX_LIB_NAMES=""  .
      #

#            ln -s /usr/local/opt/llvm/bin/clang /usr/local/bin/clang-omp
#            ln -s /usr/local/opt/llvm/bin/clang++ /usr/local/bin/clang-omp++

# 
#            cmake -DCMAKE_INSTALL_PREFIX=$LROSE_INSTALL_DIR \
#               -DCMAKE_MODULE_PATH=/usr/local/Cellar/qt/5.13.2/lib/cmake/Qt5 \
#               -D OpenMP_C_FLAGS=`pkg-config --cflags ompi-c` \
#               -D OpenMP_C_LIB_NAMES="" \ 
#               -D OpenMP_CXX_FLAGS=`pkg-config --cflags ompi-cxx` \
#               -D OpenMP_CXX_LIB_NAMES="" /private/tmp/workarea/$SOURCE_DIR/samurai
#

#      - run:
#          name: Set Environment Variables for samurai
#          command: |
#            echo "export CMAKE_QT5=/usr/local/opt/qt/lib/cmake/Qt5" >> $BASH_ENV
# ---- end from old Samurai build


      - run: 
          name: installing lrose-core
          no_output_timeout: 60m
          command: |
            python --version
            brew install lrose-core.rb
      # getting this warning ...
      # ==> Installing lrose-core
      # Warning: Calling depends_on :x11 is deprecated! Use depends_on specific X11 formula(e) instead.
      # ==> ./configure --prefix=/usr/local/Cellar/lrose-core/core-20200719
      # ==> make install
      - run: RadxPrint -h

      - store_artifacts:
          path: /Users/distiller/Library/Logs/Homebrew/lrose-core


  run-brew-no-szip-workaround:
    macos:
      xcode: "13.3"  # corresponds to MacOS 12.3.1 Monterey

    working_directory: /tmp
    steps:

      - run: 
          name: Check for python
          command: |
            python3 --version
            ln -s "$(brew --prefix)/bin/python"{3,}
            python --version

            # alias python="python3"
            # python --version

      #- run:
      #    name: Test python alias
      #    command: |
      #      python --version

      - run: 
          name: Install wget    
          command: |
            brew install wget 

      - run: 
          name: Setup Environment Variables
          command: |
            echo "export BASE_DIR=/private" >> $BASH_ENV

      - run: echo $HOME

      - run:
          name: Add to Environment Variables
          command: |
            echo "export WORKAREA=$BASE_DIR/tmp/workarea" >> $BASH_ENV

      - run:
          name: extract lrose-topaz tgz 
          command: |
            mkdir $WORKAREA
            pwd 
            cd /tmp/workarea
            echo "fetching tar files from release ... "
            wget https://github.com/NCAR/lrose-core/releases/download/lrose-core-20220222/lrose-core-20220222.src.tgz
            echo "extracting lrose-topaz from tgz ..."
            tar xf lrose-core-20220222.src.tgz



            # cd lrose-core-20220222.src/build/scripts
            # sed -i '' 's/env python/env python3/g' install_linux_packages.py     
            # head install_linux_packages.py 


        # needed for QJSEngine: qt5-qtdeclarative-devel
      - run:
          name: Install needed packages
          command: |
            # git -C /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core fetch 
            # git -C /usr/local/Homebrew/Library/Taps/homebrew/homebrew-cask fetch
            brew install cmake
            brew install eigen
            brew install fftw flex
            brew install qt5 netcdf
            brew install pkg-config                                                            
            brew install geographiclib                                                     
            brew install armadillo                                                         
            brew install libomp libzip
            brew install rsync

      - run: brew install --cask xquartz

      - run: 
          name: Setup Environment Variables
          command: |
            echo "export RELEASE_DATE=$(date '+%Y%m%d')" >> $BASH_ENV
            echo "export PKG_CONFIG_PATH=/usr/local/opt/qt/lib/pkgconfig" >> $BASH_ENV
            echo "export PATH=/usr/local/opt/qt/bin:$PATH" >> $BASH_ENV
            echo "export BASE_DIR=/private" >> $BASH_ENV

      - run: echo $HOME

      - run:
          name: Add to Environment Variables
          command: |
            echo "export TARGET=lrose-topaz-$RELEASE_DATE.src" >> $BASH_ENV
            echo "export SOURCE_DIR=lrose-topaz-$RELEASE_DATE" >> $BASH_ENV
            echo "export LROSE_INSTALL_DIR=/tmp/workarea/lrose" >> $BASH_ENV
            echo "export    LROSE_ROOT_DIR=/tmp/workarea/lrose" >> $BASH_ENV
            echo "export PATH=/usr/local/opt/qt/bin:$PATH" >> $BASH_ENV
            echo "export FCFLAGS='-w -fallow-argument-mismatch -O2'" >> $BASH_ENV
            echo "export FFLAGS='-w -fallow-argument-mismatch -O2'" >> $BASH_ENV
            # samurai needs LROSE_ROOT_DIR
            #echo "export LROSE_INSTALL_DIR=/usr/local/lrose" >> $BASH_ENV
            echo "export WORKAREA=$BASE_DIR/tmp/workarea" >> $BASH_ENV

      - run:
          name: extract lrose-topaz tgz 
          command: |
            python --version
            cd /tmp/workarea    
            cd lrose-core-20220222.src/build/cmake
            echo "installing in ${LROSE_INSTALL_DIR} ... "
            ./createCMakeLists.py --prefix $LROSE_INSTALL_DIR
            cd ../../codebase
            mkdir build
            cd build
            cmake ..
            cd libs
            make install
            cd ../apps/tdrp/src/tdrp_gen
            make install
            echo "building apps "
            cd $WORKAREA/lrose-core-20220222.src/codebase/apps  
            pwd
            make install


      - run: 
          name: test the install
          command: |
            $LROSE_INSTALL_DIR/bin/RadxConvert -h  



#  -------------  current head: begin ---------


  # NOTE: in order to build the .src.mac_osx.tgz file, we need to 
  #       build it on a linux platform using automake and libtool
  package-lrose-core-head-tgz:
    executor: centos7-executor
    working_directory: /tmp
    steps:
      - run:
          name: build MacOS tgz
          command: echo "build MacOS source tgz"
      - run: echo "building lrose-core ..."
      # - run: yum install -y qt5-qtdeclarative-devel  ---> done in centos7-executor container
      - run: mkdir -p workspace_macos
      - run: cd workspace_macos; git clone https://github.com/NCAR/lrose-core
      - run: pwd
      - run: ls workspace_macos
      #- run: alias qmake-qt5='qmake'
      - run: 
          name: Setup Qt5 variables
          command: |
            echo "export PKG_CONFIG_PATH=/usr/lib64/pkgconfig" >> $BASH_ENV
            echo "PKG_CONFIG_PATH = $PKG_CONFIG_PATH" 
            echo "export QT5_BINDIR=`pkg-config --variable=bindir Qt5`"  >> $BASH_ENV
            echo "QT5_BINDIR = $QT5_BINDIR "
      - run:
          name: Setup path variable
          command: |
            echo "export PATH=$QT5_BINDIR:$PATH" >> $BASH_ENV
            echo "PATH = $PATH"
        
        # Remember, the variables are not available until the command is finished. Grrh!
      - run:
          name: Check path variables
          command: |
            echo "PKG_CONFIG_PATH = $PKG_CONFIG_PATH"
            echo "QT5_BINDIR = $QT5_BINDIR "
            echo "PATH = $PATH"

      - run: 
          name: Setup Environment Variables
          command: |
            echo "export RELEASE_DATE=$(date '+%Y%m%d')" >> $BASH_ENV
      - run: echo "RELEASE_DATE = " ${RELEASE_DATE}
        # package for macos
      - run: ./workspace_macos/lrose-core/build/create_src_tar.py --force --releaseDir=/tmp/workspace_macos/releases --package=lrose-core --osx

      - run: ls /tmp/workspace_macos/releases/lrose-core/osx
      - run: cd /tmp/workspace_macos/releases/lrose-core/osx; mv lrose-core-$RELEASE_DATE.mac_osx.tgz lrose-core-$RELEASE_DATE.src.mac_osx.tgz
        # package for linux 
      - run: ./workspace_macos/lrose-core/build/create_src_tar.py --force --releaseDir=/tmp/workspace_linux/releases --package=lrose-core 
      - run: cd /tmp/workspace_linux/releases/lrose-core; mv lrose-core-$RELEASE_DATE.tgz lrose-core-$RELEASE_DATE.src.tgz

      - run: ls /tmp/workspace_linux/releases/lrose-core

      - persist_to_workspace:
          root: workspace_macos
          paths: 
            - releases/lrose-core/osx
      - persist_to_workspace:
          root: workspace_linux
          paths: 
            - releases/lrose-core
      - store_artifacts:
          path: /tmp/workspace_macos/releases/lrose-core/osx
      - store_artifacts:   
          path: /tmp/workspace_linux/releases/lrose-core
          # should store  lrose-core-YYYYMMDD.mac_osx.tgz and lrose-core.rb
          # Ah, but don't we want lrose-core.src.mac_osx.tgz?



  package-linux-lrose-head-tgz:
    executor: centos7-executor
    working_directory: /tmp
    steps:
      - attach_workspace:
          at: /tmp/workspace_linux
      - run:
          name: package lrose-elle packages ( .tgz )
          command: echo "package lrose-elle software"
      - run: echo "package lrose-elle .tgz ..."
      - run: ls -R
      - run: pwd   # /private/tmp
      - run: 
          name: Setup Environment Variables
          command: |
            echo "export RELEASE_DATE=$(date '+%Y%m%d')" >> $BASH_ENV
            echo "export RELEASE_DIR=/tmp/workpace_linux/releases" >> $BASH_ENV
            # echo "export TAG=lrose-elle-20200601" >> $BASH_ENV

      - run:
          name: Add to Environment Variables
          command: |
            echo "export TARGET=lrose-elle-$RELEASE_DATE.src" >> $BASH_ENV

      - run: ls -R /tmp/workspace_linux
      - run: echo "RELEASE_DATE = " $RELEASE_DATE
      - run: echo "TARGET = " $TARGET
      - run: tar zxf /tmp/workspace_linux/releases/lrose-core/lrose-core-$RELEASE_DATE.src.tgz
      - run: ls

# Grab the color scales
      - run: git clone https://github.com/ncar/lrose-displays
      - run: rsync -av lrose-displays/color_scales lrose-core-$RELEASE_DATE/share 

# Grab addons from mmbell
      - run: cd lrose-core-$RELEASE_DATE; git clone https://github.com/mmbell/samurai
      # - run: cd lrose-core-$RELEASE_DATE/samurai; git checkout -q $TAG
      - run: cd lrose-core-$RELEASE_DATE/samurai; rm -rf .git

      - run: cd lrose-core-$RELEASE_DATE; git clone https://github.com/mmbell/fractl 
      # - run: cd lrose-core-$RELEASE_DATE/fractl; git checkout -q $TAG
      - run: cd lrose-core-$RELEASE_DATE/fractl; rm -rf .git

      - run: cd lrose-core-$RELEASE_DATE; git clone https://github.com/mmbell/vortrac 
      #- run: cd lrose-core-$RELEASE_DATE/vortrac; git checkout -q $TAG
      - run: cd lrose-core-$RELEASE_DATE/vortrac; rm -rf .git

        # make the elle tar file 
      - run: mv lrose-core-$RELEASE_DATE lrose-elle-$RELEASE_DATE
      - run: tar zcf $TARGET.tgz lrose-elle-$RELEASE_DATE
      - run: ls 

      - run: mkdir -p /tmp/workspace_linux/releases/lrose-elle

        # move the tar file into the persisted workspace 
      - run: mv $TARGET.tgz /tmp/workspace_linux/releases/lrose-elle

      - persist_to_workspace:
          root: workspace_linux
          paths: 
            - releases/lrose-elle

      - store_artifacts:
          path: /tmp/workspace_linux/releases/lrose-elle


  test-linux-lrose-head-tgz:
    executor: centos7-executor

    working_directory: /tmp
    steps:
      - attach_workspace:
          at: /tmp/workspace_linux

      - run: mkdir workarea

      - run: 
          name: Setup Environment Variables
          command: |
            echo "export RELEASE_DATE=$(date '+%Y%m%d')" >> $BASH_ENV
            echo "export PKG_CONFIG_PATH=/usr/local/opt/qt/lib/pkgconfig" >> $BASH_ENV

      - run:
          name: Add to Environment Variables
          command: |
            echo "export TARGET=lrose-elle-$RELEASE_DATE" >> $BASH_ENV
            echo "export LROSE_INSTALL_DIR=/usr/local/lrose" >> $BASH_ENV
            echo "export LROSE_ROOT_DIR=/usr/local/lrose" >> $BASH_ENV
            echo "export NETCDF_INCLUDES=/usr/include" >> $BASH_ENV 
            echo "export NETCDF_LIBRARIES=/usr/lib" >> $BASH_ENV 

      - run:
          name: extract lrose-elle tgz 
          command: |
            echo "extracting lrose-elle from tgz"
            cd workarea; tar xf /tmp/workspace_linux/releases/lrose-elle/$TARGET.src.tgz
            pwd
            ls
      - run:
          name: build lrose-elle
          command: |
            echo "building lrose-elle from tgz"
            cd workarea; cd $TARGET; ./configure --disable-dependency-tracking --prefix=$LROSE_INSTALL_DIR
            make install

      - run:
          name: Build/install fractl  
          command: |
            echo "building fractl"
            cd workarea/$TARGET/fractl
            cmake -DCMAKE_INSTALL_PREFIX=$LROSE_INSTALL_DIR .
            make
            make install   # without CMAKE_INSTALL_PREFIX installs in /usr/local/bin/fractl

      - run:
          name: Build/install samurai  
          command: |
            echo "building samurai"
            cd workarea/$TARGET/samurai
            /usr/bin/cmake3 -DCMAKE_INSTALL_PREFIX=$LROSE_INSTALL_DIR .
            make   # VERBOSE=1
            make install   # without CMAKE_INSTALL_PREFIX installs in /usr/local/bin/fractl
          
      - run: $LROSE_INSTALL_DIR/bin/RadxPrint -h
      - run: $LROSE_INSTALL_DIR/bin/samurai -h

      # annoying ... returns error: Exited with code exit status 1 
      # which causes a failure, but it works.  So, we need to fix this ...
      - run: $LROSE_INSTALL_DIR/bin/fractl -h

      - run:
          name: Add to Environment Variables for vortrac
          command: |
            echo "export RADX_INCLUDE=$LROSE_INSTALL_DIR/include" >> $BASH_ENV
            echo "export RADX_LIB=$LROSE_INSTALL_DIR/lib" >> $BASH_ENV
            echo "export ARMADILLO_INCLUDE=`pkg-config --variable=includedir armadillo`" >> $BASH_ENV
            echo "export ARMADILLO_LIB=`pkg-config --variable=libdir armadillo`" >> $BASH_ENV
            echo "export NETCDF_INCLUDE=`pkg-config --variable=includedir netcdf`" >> $BASH_ENV 
            echo "export NETCDF_LIB=`pkg-config --variable=libdir netcdf`" >> $BASH_ENV 
            echo "export QT5_BIN=/usr/lib64/qt5/bin" >> $BASH_ENV
            echo "export LD_LIBRARY_PATH=/usr/local/lrose/lib" >> $BASH_ENV  

      - run:
          name: Build/install vortrac  
          command: |
            echo "building vortrac"
            cd workarea/$TARGET/vortrac/src
            $QT5_BIN/qmake .
            make
            cp vortrac $LROSE_INSTALL_DIR/bin
            cd ..
            rsync -av Resources $LROSE_INSTALL_DIR
                                                                                            
      - run: $LROSE_INSTALL_DIR/bin/vortrac  -h
      - run: workarea/$TARGET/vortrac/src/vortrac -h

  # we are just packaging the tgz file; no building, so we don't need macos machine
  package-macos-lrose-head-tgz:
    executor: centos7-executor
    working_directory: /tmp
    steps:
      - attach_workspace:
          at: /tmp/workspace_macos
      - run:
          name: package lrose-elle packages (.tgz)
          command: echo "package lrose-elle software"
      - run: ls -R

      # - run: cd workspace_macos; git clone https://github.com/NCAR/release-tools
      - run: pwd   # /private/tmp
      - run: 
          name: Setup Environment Variables
          command: |
            echo "export RELEASE_DATE=$(date '+%Y%m%d')" >> $BASH_ENV
            echo "export RELEASE_DIR=/tmp/workpace_macos/releases" >> $BASH_ENV

      - run:
          name: Add to Environment Variables
          command: |
            echo "export TARGET=lrose-elle-$RELEASE_DATE.src.mac_osx" >> $BASH_ENV

      - run: ls -R /tmp/workspace_macos
      - run: echo "RELEASE_DATE = " $RELEASE_DATE
      - run: echo "TARGET = " $TARGET
      - run: tar zxf /tmp/workspace_macos/releases/lrose-core/osx/lrose-core-$RELEASE_DATE.src.mac_osx.tgz
      - run: ls

      # Grab the color scales
      - run: git clone https://github.com/ncar/lrose-displays
      - run: rsync -av lrose-displays/color_scales lrose-core-$RELEASE_DATE.mac_osx/share 

      # Grab addons from mmbell
      - run: cd lrose-core-$RELEASE_DATE.mac_osx; git clone https://github.com/mmbell/samurai
      - run: cd lrose-core-$RELEASE_DATE.mac_osx/samurai; rm -rf .git

      - run: cd lrose-core-$RELEASE_DATE.mac_osx; git clone https://github.com/mmbell/fractl
      - run: cd lrose-core-$RELEASE_DATE.mac_osx/fractl; rm -rf .git

      - run: cd lrose-core-$RELEASE_DATE.mac_osx; git clone https://github.com/mmbell/vortrac
      - run: cd lrose-core-$RELEASE_DATE.mac_osx/vortrac; rm -rf .git

        # make the elle tar file 
      - run: mv lrose-core-$RELEASE_DATE.mac_osx lrose-elle-$RELEASE_DATE.mac_osx
      - run: tar zcf $TARGET.tgz lrose-elle-$RELEASE_DATE.mac_osx
      - run: ls 

      - run: mkdir -p /tmp/workspace_macos/releases/lrose-elle/osx

        # generate a checksum for the brew formula; add it to the persisted workspace
      - run: sha256sum $TARGET.tgz > /tmp/workspace_macos/releases/lrose-elle/osx/checksum
      - run: cat /tmp/workspace_macos/releases/lrose-elle/osx/checksum

        # move the tar file into the persisted workspace 
      - run: mv $TARGET.tgz /tmp/workspace_macos/releases/lrose-elle/osx

      - persist_to_workspace:
          root: workspace_macos
          paths: 
            - releases/lrose-elle/osx

      - store_artifacts:
          path: /tmp/workspace_macos/releases/lrose-elle


  test-macos-lrose-head-tgz-latest:
    #macos:
    #  xcode: "11.2.1"  # works

    macos:
      xcode: "12.2.0"  

    working_directory: /tmp
    steps:
      - attach_workspace:
          at: /tmp/workspace_macos

        # needed for QJSEngine: qt5-qtdeclarative-devel
      - run:
          name: Install needed packages
          command: |
            brew install --cask xquartz
            brew install cmake
            brew install eigen
            brew install fftw flex
            brew install qt5 netcdf
            brew install szip pkg-config                                                            
            brew install geographiclib                                                     
            brew install armadillo                                                         
            brew install libomp libzip
            brew install rsync

#      - run: brew cask install xquartz 

#      brew cask install xquartz
#Error: 
#  homebrew-core is a shallow clone.
#  homebrew-cask is a shallow clone.
#To `brew update`, first run:
#  git -C /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core fetch --unshallow
#  git -C /usr/local/Homebrew/Library/Taps/homebrew/homebrew-cask fetch --unshallow
#This restriction has been made on GitHub's request because updating shallow
#clones is an extremely expensive operation due to the tree layout and traffic of
#Homebrew/homebrew-core and Homebrew/homebrew-cask. We don't do this for you
#automatically to avoid repeatedly performing an expensive unshallow operation in
#CI systems (which should instead be fixed to not use shallow clones). Sorry for
#the inconvenience!
#Error: Calling brew cask install is disabled! Use brew install [--cask] instead.
      - run: brew install --cask xquartz

      - run: 
          name: Setup Environment Variables
          command: |
            echo "export RELEASE_DATE=$(date '+%Y%m%d')" >> $BASH_ENV
            echo "export PKG_CONFIG_PATH=/usr/local/opt/qt/lib/pkgconfig" >> $BASH_ENV
            echo "export PATH=/usr/local/opt/qt/bin:$PATH" >> $BASH_ENV

      - run: echo $HOME

      - run:
          name: Add to Environment Variables
          command: |
            echo "export TARGET=lrose-elle-$RELEASE_DATE.src.mac_osx" >> $BASH_ENV
            echo "export SOURCE_DIR=lrose-elle-$RELEASE_DATE.mac_osx" >> $BASH_ENV
            echo "export LROSE_INSTALL_DIR=/tmp/workarea/install/lrose" >> $BASH_ENV
            echo "export LROSE_ROOT_DIR=/tmp/workarea/install/lrose" >> $BASH_ENV
            echo "export PATH=/usr/local/opt/qt/bin:$PATH" >> $BASH_ENV
            echo "export FCFLAGS='-w -fallow-argument-mismatch -O2'" >> $BASH_ENV
            echo "export FFLAGS='-w -fallow-argument-mismatch -O2'" >> $BASH_ENV
            # samurai needs LROSE_ROOT_DIR
            #echo "export LROSE_INSTALL_DIR=/usr/local/lrose" >> $BASH_ENV
            #echo "export LROSE_ROOT_DIR=/usr/local/lrose" >> $BASH_ENV

      - run:
          name: extract lrose-elle tgz 
          command: |
            echo "extracting lrose-elle from tgz"
            mkdir workarea
            cd workarea
            tar xf /tmp/workspace_macos/releases/lrose-elle/osx/$TARGET.tgz

      - run: cd workarea; ls

      - run: cd workarea/$SOURCE_DIR; pwd

      - run: cd workarea/$SOURCE_DIR; ./configure --disable-dependency-tracking --prefix=$LROSE_INSTALL_DIR
      - run: cd workarea/$SOURCE_DIR; make install

      - run: cd workarea/$SOURCE_DIR; rsync -av share $LROSE_INSTALL_DIR                                                                               
      - run:
          name: Install needed packages
          command: |
            brew install cmake
            brew install eigen
            brew install libomp libzip
            brew install llvm

      # don't exit if one of the commands fails 
      # - run: set +e

      - run:
          name: Set Environment Variables
          command: |
            echo "export RADX_INCLUDE=$LROSE_INSTALL_DIR/include" >> $BASH_ENV
            echo "export RADX_LIB=$LROSE_INSTALL_DIR/lib" >> $BASH_ENV
            echo "export ARMADILLO_INCLUDE=`pkg-config --variable=includedir armadillo`" >> $BASH_ENV
            echo "export ARMADILLO_LIB=`pkg-config --variable=libdir armadillo`" >> $BASH_ENV
            echo "export NETCDF_INCLUDE=/usr/local/include" >> $BASH_ENV
            echo "export NETCDF_LIB=/usr/local/lib" >> $BASH_ENV
            echo "export LD_LIBRARY_PATH=$LROSE_INSTALL_DIR/lib" >> $BASH_ENV

      - run: find /usr/local/ -name Qt5Config.cmake

      # NOTE: This may no longer be true; Qt was removed from Samurai
      # samurai needs Qt, from this error ...
      # CMake Error at CMakeLists.txt:20 (find_package):
      # By not providing "FindQt5.cmake" in CMAKE_MODULE_PATH this project has
      # asked CMake to find a package configuration file provided by "Qt5", but
      # CMake did not find one.
      #
      # Could not find a package configuration file provided by "Qt5" with any of
      # the following names:
      # 
      # Qt5Config.cmake
      # qt5-config.cmake

      #  from https://github.com/Cockatrice/Cockatrice/issues/205   -DCMAKE_PREFIX_PATH=/usr/local/Cellar/qt5/5.3.1/

      #
      # cmake -DCMAKE_INSTALL_PREFIX=$LROSE_INSTALL_DIR -DCMAKE_MODULE_PATH=/usr/local/Cellar/qt/5.13.1/lib/cmake/Qt5 -D OpenMP_C_FLAGS=`pkg-config --cflags ompi-c`  -D OpenMP_C_LIB_NAMES="" -D OpenMP_CXX_FLAGS=`pkg-config --cflags ompi-cxx` -D OpenMP_CXX_LIB_NAMES=""  .
      #

#            ln -s /usr/local/opt/llvm/bin/clang /usr/local/bin/clang-omp
#            ln -s /usr/local/opt/llvm/bin/clang++ /usr/local/bin/clang-omp++

# 
#            cmake -DCMAKE_INSTALL_PREFIX=$LROSE_INSTALL_DIR \
#               -DCMAKE_MODULE_PATH=/usr/local/Cellar/qt/5.13.2/lib/cmake/Qt5 \
#               -D OpenMP_C_FLAGS=`pkg-config --cflags ompi-c` \
#               -D OpenMP_C_LIB_NAMES="" \ 
#               -D OpenMP_CXX_FLAGS=`pkg-config --cflags ompi-cxx` \
#               -D OpenMP_CXX_LIB_NAMES="" /private/tmp/workarea/$SOURCE_DIR/samurai
#

      - run:
          name: Set Environment Variables for samurai
          command: |
            echo "export OCFLAGS=`pkg-config --cflags ompi-c`" >> $BASH_ENV
            echo "export OCXXFLAGS=`pkg-config --cflags ompi-cxx`" >> $BASH_ENV

            #  echo "export CMAKE_QT5=/usr/local/opt/qt/lib/cmake/Qt5" >> $BASH_ENV

      - run:
          name: Build/install samurai  
          command: |
            set +e
            echo "building samurai"
            echo "ls $LROSE_INSTALL_DIR"
            ls $LROSE_INSTALL_DIR
            echo " ... after ls $LROSE_INSTALL_DIR"
            echo " ... cmake.qt5.config or something should be here"
            ls $CMAKE_QT5
            echo $OCFLAGS
            echo $OCXXFLAGS
            cd /private/tmp/workarea/$SOURCE_DIR/samurai
            cmake -DCMAKE_INSTALL_PREFIX=$LROSE_INSTALL_DIR -DCMAKE_MODULE_PATH=$CMAKE_QT5 -D OpenMP_C_FLAGS=$OCFLAGS -D OpenMP_C_LIB_NAMES="" -D OpenMP_CXX_FLAGS=$OCXXFLAGS -D OpenMP_CXX_LIB_NAMES="" .
            make 
            make install
            pwd
            echo "building vortrac"
            find /usr/local -name netcdf.h
            cd /private/tmp/workarea/$SOURCE_DIR/vortrac/src
            pwd
            qmake .
            make
            cp ../Resources/*.xml vortrac.app/Contents/Resources/
            cp vortrac.app/Contents/MacOS/vortrac $LROSE_INSTALL_DIR/bin
            cd ..
            rsync -av Resources $LROSE_INSTALL_DIR
            echo "building fractl"
            ln -s /usr/local/Cellar/geographiclib /usr/local/include/GeographicLib
            ls -l /usr/local/include/geographiclib
            ls -R /usr/local/include/GeographicLib
            cd /private/tmp/workarea/$SOURCE_DIR/fractl
            cmake -DCMAKE_INSTALL_PREFIX=$LROSE_INSTALL_DIR .
            make
            make install 
            echo "building HawkEye.dmg"
            cd /private/tmp/workarea/$SOURCE_DIR/apps/radar/src/HawkEye
            pwd            
            make clean
            qmake -o Makefile.qmake
            echo " ...  make from_qmake"
            make -f Makefile.qmake
            echo " ... after qmake"
            mkdir -p HawkEye.app/Contents/Frameworks
            echo " ... after mkdir"
            cp /usr/lib/libexpat.1.dylib HawkEye.app/Contents/Frameworks/.
            cp /usr/lib/libbz2.1.0.dylib HawkEye.app/Contents/Frameworks/.
            cp /usr/lib/libz.1.dylib HawkEye.app/Contents/Frameworks/.
            cp /usr/lib/libSystem.B.dylib HawkEye.app/Contents/Frameworks/.
            mkdir -p HawkEye.app/Contents/MacOS/../share
            cp -r /private/tmp/workarea/$SOURCE_DIR/share/color_scales HawkEye.app/Contents/MacOS/../share/.
            echo " ... before calling macdeployqt"
            macdeployqt HawkEye.app -dmg -always-overwrite
            echo " .. before calling hdiutil"
            hdiutil create -volname HawkEye_Installer -srcfolder /private/tmp/workarea/$SOURCE_DIR/apps/radar/src/HawkEye/HawkEye.app -ov -format UDZO HawkEye.dmg
            echo " ... after dmp build"
            cp HawkEye.dmg /private/tmp/workspace_macos/releases/lrose-elle
            echo " ... done with building HawkEye"
            echo "building vortrac.dmg"
            cd /private/tmp/workarea/$SOURCE_DIR/vortrac
            pwd            
            echo " ... before calling macdeployqt"
            cd src
            macdeployqt vortrac.app -dmg -always-overwrite
            cp ../Resources/*.xml vortrac.app/Contents/Resources/
            echo " .. before calling hdiutil"
            hdiutil create -volname Vortrac_Installer -srcfolder /private/tmp/workarea/$SOURCE_DIR/vortrac/src/vortrac.app -ov -format UDZO vortrac.dmg
            echo " ... after dmp build"
            cp vortrac.dmg /private/tmp/workspace_macos/releases/lrose-elle
            echo " ... done with building vortrac"
            echo " Start of tests ... "
            echo "   testing RadxPrint ..."
            $LROSE_INSTALL_DIR/bin/RadxPrint -h
            echo "   testing vortrac ..."
            $LROSE_INSTALL_DIR/bin/vortrac  -h
            echo "   testing fractl ..."
            $LROSE_INSTALL_DIR/bin/fractl -h
            echo "   testing samurai ..."
            $LROSE_INSTALL_DIR/bin/samurai -h
            echo " End of tests"

      - run:
          name: Set Environment Variables for MacOS Installer
          command: |
            echo "export INSTALL_BASE_DIR=/usr/local" >> $BASH_ENV
            echo "export ARCHIVE_FILENAME=LROSE-Cyclone_Installer.pkg" >> $BASH_ENV
            echo "export PACKAGE_NAME=LROSE-Core.pkg" >> $BASH_ENV
            echo "export PARTY3_BASE_DIR=/usr/local" >> $BASH_ENV
            echo "export STAGING=$LROSE_INSTALL_DIR" >> $BASH_ENV

#
# just use the install area as the staging area
#     echo "export LROSE_INSTALL_DIR=/tmp/workarea/install/lrose" >> $BASH_ENV

      - run:
          name: Build MacOS Installer
          command: |
            set +e
            cd /private/tmp/workarea
            mkdir macos_installer
            cd macos_installer
            mkdir scripts
            echo "#!/bin/sh" >> scripts/postinstall
            echo "echo \"Running postinstall\" > /tmp/my_postinstall.log " >> scripts/postinstall
            echo "exit 0 # all good" >> scripts/postinstall
            echo "#!/bin/sh" >> scripts/preinstall
            echo "echo \"Running preinstall\" > /tmp/my_preinstall.log " >> scripts/preinstall
            echo "exit 0 # all good" >> scripts/preinstall
            chmod u+x scripts/postinstall
            chmod u+x scripts/preinstall
            mkdir myresources
            echo "license" >> myresources/LICENSE.html
            echo "readme" >> myresources/README.html
            echo "building MacOS Installer"
            echo "  copying 3rd party libraries to staging area"
            echo "  (use otool -L to find these dependencies)"
            cp ${PARTY3_BASE_DIR}/lib/libnetcdf.*.dylib ${STAGING}/lib
            cp ${PARTY3_BASE_DIR}/lib/libhdf5*.dylib ${STAGING}/lib
            cp ${PARTY3_BASE_DIR}/lib/libarmadillo.*.dylib ${STAGING}/lib
            cp ${PARTY3_BASE_DIR}/lib/libz*dylib ${STAGING}/lib
            cp ${PARTY3_BASE_DIR}/lib/libbz2*dylib ${STAGING}/lib
            cp ${PARTY3_BASE_DIR}/lib/libc++*dylib ${STAGING}/lib
            cp ${PARTY3_BASE_DIR}/lib/libfftw3*dylib ${STAGING}/lib
            cp ${PARTY3_BASE_DIR}/lib/libGeographic.*.dylib ${STAGING}/lib
            cp ${PARTY3_BASE_DIR}/lib/libomp.dylib ${STAGING}/lib
            cp ${PARTY3_BASE_DIR}/opt/libpng/lib/libpng16*dylib ${STAGING}/lib
            echo "  copy frameworks from 3rd parties"
            tar -czf staging.tar.gz /tmp/workarea/install 
            pkgbuild --analyze --root /tmp/workarea/install LROSE-Cyclone_Components.plist
            pkgbuild --root /tmp/workarea/install --scripts scripts --identifier edu.ucar.lrose --install-location "/usr/local/lrose_20200108"  ${PACKAGE_NAME}
            productbuild --synthesize --package ${PACKAGE_NAME} Distribution.xml
            productbuild --distribution ./Distribution.xml --package-path . --resources myresources/ ./${ARCHIVE_FILENAME}
            echo "   make the disk image (.dmg)"
            mkdir -p for_dmg_only
            cp ${ARCHIVE_FILENAME} for_dmg_only/.
            hdiutil create -volname LROSE-Cyclone_Installer -srcfolder for_dmg_only -ov -format UDZO LROSE-Cyclone_Installer.dmg
            cd ..
            cp -R macos_installer /private/tmp/workspace_macos/releases/lrose-elle


#            cp LROSE-Cyclone_Installer.dmg /private/tmp/workspace_macos/releases/lrose-elle
#            cp ${ARCHIVE_FILENAME} /private/tmp/workspace_macos/releases/lrose-elle
#            cp LROSE-Cyclone_Components.plist /private/tmp/workspace_macos/releases/lrose-elle
#            cp /private/tmp/workspace_macos/releases/lrose-elle
#            cp /private/tmp/workspace_macos/releases/lrose-elle

      - store_artifacts:
          path: /tmp/workspace_macos/releases/lrose-elle


  package-brew-formula-head-workspace:
    executor: my-executor
    working_directory: /tmp
    steps:
      - attach_workspace:
          at: /tmp/workspace_macos
      - run: cat /tmp/workspace_macos/releases/lrose-elle/osx/checksum
  
#       - run: git clone ... get the release tools <====
      #- run: ls workspace_macos
      #- run: cd release-tools/elle

#  just call the script to build the brew formula
#  I'll just have to extract the .rb file from the script? But, that should be easy, I think.

# begin script ...
#       - run: git clone ...release-tools

      - run: 
          name: Setup Environment Variables
          command: |
            echo "export RELEASE_DATE=$(date '+%Y%m%d')" >> $BASH_ENV

      - run: 
          name: Add to Environment Variables
          command: |
            echo "export TARFILE=lrose-elle-$RELEASE_DATE.src.mac_osx.tgz" >> $BASH_ENV

      - run: 
          name: Add to Environment Variables
          command: |
            echo "export URL=https://github.com/NCAR/lrose-release-test/releases/download/$RELEASE_DATE/$TARFILE" >> $BASH_ENV
            echo "export checksum2='cat /tmp/workspace_macos/releases/lrose-elle/osx/checksum'" >> $BASH_ENV
            echo "export checksum=`sha256sum /tmp/workspace_macos/releases/lrose-elle/osx/$TARFILE`" >> $BASH_ENV

      - run: echo $checksum
      - run: echo $URL
      - run: echo $TARFILE
      - run: echo $RELEASE_DATE

      - run: git clone https://github.com/nsf-lrose/release-tools

      - run: ./release-tools/elle/homebrew-scripts/make-lrose-elle-brew-formula.sh 
      - run: mv lrose-elle.rb /tmp/workspace_macos/releases/lrose-elle/osx

      - persist_to_workspace:
          root: workspace_macos
          paths: 
            - releases/lrose-elle/osx

      - store_artifacts:
          path: /tmp/workspace_macos/releases/lrose-elle/osx

# ------------- current head: end ------------


  current-head:
    executor: my-executor
    steps:
      - run: echo "building lrose-core ..."
      - run: yum install -y qt5-qtdeclarative-devel
      - run: mkdir -p workspace
      - run: cd workspace; git clone https://github.com/NCAR/lrose-core
      - run: pwd
      - run: ls workspace
      - run:
          name: building core  ...
          command: |
            set +e
            echo "building ..."
            echo "Remember, \$HOME=/root"
            export HOST_OS=LINUX_LROSE
            export LROSE_INSTALL_DIR=/usr/local/lrose
            export LROSE_CORE_DIR=/tmp/workspace/lrose-core
            echo "$LROSE_CORE_DIR"
            cd $LROSE_CORE_DIR
            echo "pwd ..." 
            pwd
            echo "ls ..."
            ls
            ./build/scripts/installPackageMakefiles.py
            cd $LROSE_CORE_DIR/codebase/libs/tdrp/src
            make install
            cd $LROSE_CORE_DIR/codebase/apps/tdrp/src/tdrp_gen
            make install
            cd $LROSE_CORE_DIR/codebase/libs/
            make -j 8 install_include
            make -j 8 install
            cd $LROSE_CORE_DIR/codebase/apps
            make -j 8 install

  # this script does not work; it is calling tdrp_gen without any reference to $PATH
  #  setting $PATH environment variable does not help.
  #          if [[ `echo "y" | ./workspace/lrose-core/build/build_lrose_manual.py --package=lrose-core --prefix=/usr/local/lrose --verbose` == 0 ]]; then
  #            echo "It worked"
  #          else
  #            tail -n 100 /tmp/lrose_build/logs/*
  #          fi
      - run:
            ls -R /usr/local/lrose/bin
            ls -R /usr/local/lrose/lib
      - run: /usr/local/lrose/bin/RadxPrint -h

  build-lrose-manual:
    executor: my-executor
    steps:
      - run: echo "building lrose-core using script build_lrose_manual ..."
      - run: yum install -y qt5-qtdeclarative-devel
      - run: mkdir -p workspace
      - run: cd workspace; git clone https://github.com/NCAR/lrose-core
      - run: pwd
      - run: ls workspace
      - run:
          name: building core  ...
          command: |
            set +e
            echo "building ..."
            echo "Remember, \$HOME=/root"
            export HOST_OS=LINUX_LROSE
            export LROSE_INSTALL_DIR=/usr/local/lrose
            export LROSE_CORE_DIR=/tmp/workspace/lrose-core
            echo "$LROSE_CORE_DIR"
            workspace/lrose-core/build/build_lrose_manual.py --package=lrose-core --prefix=/usr/local/lrose --verbose
  # this script does not work; it is calling tdrp_gen without any reference to $PATH
  #  setting $PATH environment variable does not help.
  #          if [[ `echo "y" | ./workspace/lrose-core/build/build_lrose_manual.py --package=lrose-core --prefix=/usr/local/lrose --verbose` == 0 ]]; then
  #            echo "It worked"
  #          else
  #            tail -n 100 /tmp/lrose_build/logs/*
  #          fi
      - run:
            ls -R /usr/local/lrose/bin
            ls -R /usr/local/lrose/lib
      - run: /usr/local/lrose/bin/RadxPrint -h

 
  attached-workspace:
    executor: my-executor
    steps:
      ## - checkout
      - attach_workspace:
          ### Must be absolute path or relative path from working_directory
          at: /tmp/workspace
      - run: echo "try with attached workspace ..."
      # - run: git clone https://github.com/NCAR/lrose-core
      - run: pwd
      - run: ls
      - run: git clone --branch master https://github.com/NCAR/lrose-core
      - run: echo "y" | ./workspace/lrose-core/build/checkout_and_build_auto.py --verbose --package=lrose-blaze 
      
        ### Persist the specified paths into the workspace for use in downstream job. 
      #- persist_to_workspace:
          ### Must be an absolute path, or relative path from working_directory. 
          ### This is a directory on the container which is 
          ### taken to be the root directory of the workspace.
       #   root: /usr/local/lrose
          ### Must be relative path from root
          #paths:
          #  - echo-output

  three:
    executor: my-executor
    steps: 
      #- attach_workspace:
          ### Must be absolute path or relative path from working_directory
      #    at: /usr/local/lrose
      - run: RadxPrint -h
      - run: echo "All done."

# testing the dependencies of the brew formulae
  buildMacOS:
    macos:
      xcode: "10.1.0"
    steps:
      - run:
          name: Hello World
          command: echo "Hello World from MacOS"
      - run: brew install wget
      - run: brew install cmake
      - run: cmake --help
      # - run: wget https://github.com/NCAR/lrose-core/releases/download/lrose-core-20190520/lrose-core.rb
      - run: wget https://github.com/leavesntwigs/lrose-test/releases/download/20190621/lrose-blaze.rb
      - run: brew info lrose-blaze.rb
      - run: brew install lrose-blaze.rb
      - run: RadxPrint -h


  # NOTE: in order to build the .src.mac_osx.tgz file, we need to 
  #       build it on a linux platform using automake and libtool
  #
  package-lrose-core-tgz:
    executor: centos7-executor
    working_directory: /tmp
    steps:
      - run:
          name: build MacOS tgz
          command: echo "build MacOS source tgz"
      - run: echo "building lrose-core ..."
      # - run: yum install -y qt5-qtdeclarative-devel  ---> done in centos7-executor container
      - run: mkdir -p workspace_macos
      - run: cd workspace_macos; git clone https://github.com/NCAR/lrose-core
      - run: pwd
      - run: ls workspace_macos
      # - run: alias qmake-qt5='qmake'
      - run: 
          name: Setup Environment Variables
          command: |
            echo "export RELEASE_DATE=$(date '+%Y%m%d')" >> $BASH_ENV
      - run: echo "RELEASE_DATE = " ${RELEASE_DATE}
        # package for macos
      - run: ./workspace_macos/lrose-core/build/create_src_tar.py --force --releaseDir=/tmp/workspace_macos/releases --package=lrose-core --osx

      - run: ls /tmp/workspace_macos/releases/lrose-core/osx
      - run: cd /tmp/workspace_macos/releases/lrose-core/osx; mv lrose-core-$RELEASE_DATE.mac_osx.tgz lrose-core-$RELEASE_DATE.src.mac_osx.tgz
        # package for linux 
      - run: ./workspace_macos/lrose-core/build/create_src_tar.py --force --releaseDir=/tmp/workspace_linux/releases --package=lrose-core 
      - run: cd /tmp/workspace_linux/releases/lrose-core; mv lrose-core-$RELEASE_DATE.tgz lrose-core-$RELEASE_DATE.src.tgz

      - run: ls /tmp/workspace_linux/releases/lrose-core

      - persist_to_workspace:
          root: workspace_macos
          paths: 
            - releases/lrose-core/osx
      - persist_to_workspace:
          root: workspace_linux
          paths: 
            - releases/lrose-core
      - store_artifacts:
          path: /tmp/workspace_macos/releases/lrose-core/osx
      - store_artifacts:   
          path: /tmp/workspace_linux/releases/lrose-core
          # should store  lrose-core-YYYYMMDD.mac_osx.tgz and lrose-core.rb
          # Ah, but don't we want lrose-core.src.mac_osx.tgz?


  # NOTE: in order to build the .src.mac_osx.tgz file, we need to 
  #       build it on a linux platform using automake and libtool
  #    
  # latest = centos8 + python3
  package-lrose-core-tgz_latest:
    executor: centos8-executor
    working_directory: /tmp
    steps:
      - run:
          name: build MacOS tgz
          command: echo "build MacOS source tgz"
      - run: echo "building lrose-core ..."
      # - run: yum install -y qt5-qtdeclarative-devel  ---> done in centos7-executor container
      - run: mkdir -p workspace_macos
      - run: cd workspace_macos; git clone https://github.com/NCAR/lrose-core
      - run: pwd
      - run: ls workspace_macos
      - run: alias qmake-qt5='qmake'
      - run: 
          name: Setup Environment Variables
          command: |
            echo "export RELEASE_DATE=$(date '+%Y%m%d')" >> $BASH_ENV
      - run: echo "RELEASE_DATE = " ${RELEASE_DATE}
        # package for macos
      - run: ./workspace_macos/lrose-core/build/create_src_tar.py --force --releaseDir=/tmp/workspace_macos/releases --package=lrose-core --osx

      - run: ls /tmp/workspace_macos/releases/lrose-core/osx
      - run: cd /tmp/workspace_macos/releases/lrose-core/osx; mv lrose-core-$RELEASE_DATE.mac_osx.tgz lrose-core-$RELEASE_DATE.src.mac_osx.tgz
        # package for linux 
      - run: ./workspace_macos/lrose-core/build/create_src_tar.py --force --releaseDir=/tmp/workspace_linux/releases --package=lrose-core 
      - run: cd /tmp/workspace_linux/releases/lrose-core; mv lrose-core-$RELEASE_DATE.tgz lrose-core-$RELEASE_DATE.src.tgz

      - run: ls /tmp/workspace_linux/releases/lrose-core

# TODO: are the workspaces unique to the job?  or do I need to give them a unique name?
      - persist_to_workspace:
          root: workspace_macos
          paths: 
            - releases/lrose-core/osx
      - persist_to_workspace:
          root: workspace_linux
          paths: 
            - releases/lrose-core
      - store_artifacts:
          path: /tmp/workspace_macos/releases/lrose-core/osx
      - store_artifacts:   
          path: /tmp/workspace_linux/releases/lrose-core
          # should store  lrose-core-YYYYMMDD.mac_osx.tgz and lrose-core.rb
          # Ah, but don't we want lrose-core.src.mac_osx.tgz?


  # we are just packaging the tgz file; no building, so we don't need macos machine
  package-macos-lrose-cyclone-tgz:
    executor: centos7-executor
    working_directory: /tmp
    steps:
      - attach_workspace:
          at: /tmp/workspace_macos
      - run:
          name: package lrose-cyclone packages (.tgz)
          command: echo "package lrose-cyclone software"
      - run: ls -R

      # - run: cd workspace_macos; git clone https://github.com/NCAR/release-tools
      - run: pwd   # /private/tmp
      - run: 
          name: Setup Environment Variables
          command: |
            echo "export RELEASE_DATE=$(date '+%Y%m%d')" >> $BASH_ENV
            echo "export RELEASE_DIR=/tmp/workpace_macos/releases" >> $BASH_ENV

      - run:
          name: Add to Environment Variables
          command: |        
            echo "export TARGET=lrose-cyclone-$RELEASE_DATE.src.mac_osx" >> $BASH_ENV

      - run: ls -R /tmp/workspace_macos
      - run: echo "RELEASE_DATE = " $RELEASE_DATE
      - run: echo "TARGET = " $TARGET
      - run: tar zxf /tmp/workspace_macos/releases/lrose-core/osx/lrose-core-$RELEASE_DATE.src.mac_osx.tgz
      - run: ls

      # Grab the color scales
      - run: git clone https://github.com/ncar/lrose-displays
      - run: rsync -av lrose-displays/color_scales lrose-core-$RELEASE_DATE.mac_osx/share 

      # Grab addons from mmbell
      - run: cd lrose-core-$RELEASE_DATE.mac_osx; git clone https://github.com/mmbell/samurai
      - run: cd lrose-core-$RELEASE_DATE.mac_osx/samurai; rm -rf .git

      - run: cd lrose-core-$RELEASE_DATE.mac_osx; git clone https://github.com/mmbell/fractl
      - run: cd lrose-core-$RELEASE_DATE.mac_osx/fractl; rm -rf .git

      - run: cd lrose-core-$RELEASE_DATE.mac_osx; git clone https://github.com/mmbell/vortrac
      - run: cd lrose-core-$RELEASE_DATE.mac_osx/vortrac; rm -rf .git

        # make the cyclone tar file 
      - run: mv lrose-core-$RELEASE_DATE.mac_osx lrose-cyclone-$RELEASE_DATE.mac_osx
      - run: tar zcf $TARGET.tgz lrose-cyclone-$RELEASE_DATE.mac_osx
      - run: ls 

      - run: mkdir -p /tmp/workspace_macos/releases/lrose-cyclone/osx

        # generate a checksum for the brew formula; add it to the persisted workspace
      - run: sha256sum $TARGET.tgz > /tmp/workspace_macos/releases/lrose-cyclone/osx/checksum
      - run: cat /tmp/workspace_macos/releases/lrose-cyclone/osx/checksum

        # move the tar file into the persisted workspace 
      - run: mv $TARGET.tgz /tmp/workspace_macos/releases/lrose-cyclone/osx

      - persist_to_workspace:
          root: workspace_macos
          paths: 
            - releases/lrose-cyclone/osx

      - store_artifacts:
          path: /tmp/workspace_macos/releases/lrose-cyclone


  package-brew-formula-workspace:
    executor: my-executor
    working_directory: /tmp
    steps:
      - attach_workspace:
          at: /tmp/workspace_macos
      - run: cat /tmp/workspace_macos/releases/lrose-cyclone/osx/checksum
  
#       - run: git clone ... get the release tools <====
      #- run: ls workspace_macos
      #- run: cd release-tools/cyclone

#  just call the script to build the brew formula
#  I'll just have to extract the .rb file from the script? But, that should be easy, I think.

# begin script ...
#       - run: git clone ...release-tools

      - run: 
          name: Setup Environment Variables
          command: |
            echo "export RELEASE_DATE=$(date '+%Y%m%d')" >> $BASH_ENV

      - run: 
          name: Add to Environment Variables
          command: |
            echo "export TARFILE=lrose-cyclone-$RELEASE_DATE.src.mac_osx.tgz" >> $BASH_ENV

      - run: 
          name: Add to Environment Variables
          command: |
            echo "export URL=https://github.com/NCAR/lrose-release-test/releases/download/$RELEASE_DATE/$TARFILE" >> $BASH_ENV
            echo "export checksum2='cat /tmp/workspace_macos/releases/lrose-cyclone/osx/checksum'" >> $BASH_ENV
            echo "export checksum=`sha256sum /tmp/workspace_macos/releases/lrose-cyclone/osx/$TARFILE`" >> $BASH_ENV

      - run: echo $checksum
      - run: echo $URL
      - run: echo $TARFILE
      - run: echo $RELEASE_DATE

      - run: git clone https://github.com/nsf-lrose/release-tools

      - run: ./release-tools/cyclone/homebrew-scripts/make-lrose-cyclone-brew-formula.sh 
      - run: mv lrose-cyclone.rb /tmp/workspace_macos/releases/lrose-cyclone/osx

      - persist_to_workspace:
          root: workspace_macos
          paths: 
            - releases/lrose-cyclone/osx

      - store_artifacts:
          path: /tmp/workspace_macos/releases/lrose-cyclone/osx

  package-brew-formula-wget:
    executor: my-executor
    working_directory: /tmp
    steps:
#      - attach_workspace:
#          at: /tmp/workspace_macos
#      - run: cat /tmp/workspace_macos/releases/lrose-cyclone/osx/checksum
  
#  just call the script to build the brew formula
#  I'll just have to extract the .rb file from the script? But, that should be easy, I think.

# begin script ...
#       - run: git clone ...release-tools

      - run: 
          name: Setup Environment Variables
          command: |
            echo "export RELEASE_DATE=20191213" >> $BASH_ENV

      - run: 
          name: Add to Environment Variables
          command: |
            echo "export TARFILE=lrose-cyclone-$RELEASE_DATE.src.mac_osx.tgz" >> $BASH_ENV

      - run: 
          name: Add to Environment Variables
          command: |
            echo "export URL=https://github.com/NCAR/lrose-release-test/releases/download/$RELEASE_DATE/$TARFILE" >> $BASH_ENV
            echo "export checksum2='cat /tmp/workspace_macos/releases/lrose-cyclone/osx/checksum'" >> $BASH_ENV
            echo "export checksum=`sha256sum /tmp/workspace_macos/releases/lrose-cyclone/osx/$TARFILE`" >> $BASH_ENV

      - run: echo $checksum
      - run: echo $URL
      - run: echo $TARFILE
      - run: echo $RELEASE_DATE

      - run: git clone https://github.com/nsf-lrose/release-tools

      - run: ./release-tools/cyclone/homebrew-scripts/make-lrose-cyclone-brew-formula.sh 
      - run: mv lrose-cyclone.rb /tmp/workspace_macos/releases/lrose-cyclone/osx

      - store_artifacts:
          path: /tmp/workspace_macos/releases/lrose-cyclone/osx


  package-linux-brew-formula-fractl:
    executor: my-executor
    working_directory: /tmp
    steps:
      - attach_workspace:
          at: /tmp/workspace_macos
      - run: cat /tmp/workspace_macos/releases/lrose-cyclone/osx/checksum
  
#       - run: git clone ... get the release tools <====
      #- run: ls workspace_macos
      #- run: cd release-tools/cyclone

#  just call the script to build the brew formula
#  I'll just have to extract the .rb file from the script? But, that should be easy, I think.

# begin script ...
#       - run: git clone ...release-tools

      - run: 
          name: Setup Environment Variables
          command: |
            echo "export RELEASE_DATE=$(date '+%Y%m%d')" >> $BASH_ENV

      - run: 
          name: Add to Environment Variables
          command: |
            echo "export TARFILE=lrose-cyclone-$RELEASE_DATE.src.mac_osx.tgz" >> $BASH_ENV

      - run: 
          name: Add to Environment Variables
          command: |
            echo "export URL=https://github.com/NCAR/lrose-release-test/releases/download/$RELEASE_DATE/$TARFILE" >> $BASH_ENV
            echo "export checksum2='cat /tmp/workspace_macos/releases/lrose-cyclone/osx/checksum'" >> $BASH_ENV
            echo "export checksum=`sha256sum /tmp/workspace_macos/releases/lrose-cyclone/osx/$TARFILE`" >> $BASH_ENV

      - run: echo $checksum
      - run: echo $URL
      - run: echo $TARFILE
      - run: echo $RELEASE_DATE

      - run: git clone https://github.com/nsf-lrose/release-tools

      - run: ./release-tools/cyclone/homebrew-scripts/make-lrose-fractl-brew-formula.sh 
      - run: mv lrose-cyclone-fractl.rb /tmp/workspace_macos/releases/lrose-cyclone/osx

      - persist_to_workspace:
          root: workspace_macos
          paths: 
            - releases/lrose-cyclone/osx

      - store_artifacts:
          path: /tmp/workspace_macos/releases/lrose-cyclone/osx


  # test using this release ...
  # https://github.com/NCAR/lrose-core/releases/tag/lrose-core-20191213
  #
  test-macos-lrose-cyclone-rb:
    macos:
      xcode: "11.2.1"

#      xcode: "10.1.0"
#     working_directory: /tmp
    steps:
      - run:
          name: brew install lrose-cyclone.rb 
          command: echo "testing brew install MacOS-Cyclone"
 
      - run: brew update
      - run: brew install wget
      # - run: brew install cmake
        # xquartz is needed! Don't even think about removing this line.
      # - run: brew install homebrew/cask-cask/brew-cask
        # Error: caskroom/cask was moved. Tap homebrew/cask-cask instead.
      - run: brew cask install xquartz 
      - run: wget https://github.com/NCAR/lrose-release-test/releases/download/20191217/lrose-cyclone.rb
      - run: brew install lrose-cyclone.rb
      - run:
          name: Testing lrose-cyclone ...  
          command: |
            set +e
            echo "testing RadxPrint"
            RadxPrint -h
            echo "testing samurai"
            samurai -h
            echo "testing vortrac"
            vortrac -h
            echo "testing fractl"
            fractl -h

  test-brew-install-lrose-cyclone-from-workspace:
    macos:
      xcode: "10.1.0"

    working_directory: /tmp
    steps:
      - attach_workspace:
          at: /tmp/workspace_macos

      - run:
          name: brew install lrose-cyclone.rb 
          command: echo "testing brew install MacOS-Cyclone"
 
      - run: brew update
      # - run: brew install wget
      - run: brew install cmake
        # xquartz is needed! Don't even think about removing this line.
      - run: brew cask install xquartz 
        # should this be from a workspace? 
      # - run: wget https://github.com/NCAR/lrose-release-test/releases/download/testing/lrose-cyclone.rb
      - run: brew install /tmp/workspace_macos/releases/lrose-cyclone/osx/lrose-cyclone.rb
      - run: RadxPrint -h
      - run: vortrac  -h
      - run: samurai -h
      - run: fractl -h

  # test using this release ...
  # https://github.com/NCAR/lrose-core/releases/tag/lrose-core-20191213
  #
  test-macos-lrose-core-rb:
    macos:
      xcode: "11.2.1"

#      xcode: "10.1.0"
#     working_directory: /tmp
    steps:
      - run:
          name: brew install lrose-cyclone.rb 
          command: echo "testing brew install MacOS-Cyclone"
 
      - run: brew update
      - run: brew install wget
      # - run: brew install cmake
        # xquartz is needed! Don't even think about removing this line.
      # - run: brew install homebrew/cask-cask/brew-cask
        # Error: caskroom/cask was moved. Tap homebrew/cask-cask instead.
      - run: brew cask install xquartz 
      - run: wget https://github.com/NCAR/lrose-core/releases/download/lrose-core-20191213/lrose-core.rb
      - run: brew install lrose-core.rb
      - run: RadxPrint -h



  test-macos-lrose-cyclone-tgz-latest:
    macos:
      xcode: "11.2.1"

    working_directory: /tmp
    steps:
      - attach_workspace:
          at: /tmp/workspace_macos

#      - restore_cache:
#          key: macos-full-of-packages-cache1

        # needed for QJSEngine: qt5-qtdeclarative-devel
      - run:
          name: Install needed packages
          command: |
            brew install cmake
            brew install eigen
            brew install fftw flex
            brew install qt5 netcdf
            brew install szip pkg-config                                                            
            brew install geographiclib                                                     
            brew install armadillo                                                         
            brew install libomp libzip
            brew install rsync

      - run: brew cask install xquartz 

#      - save_cache:
#          key: macos-full-of-packages-cache1
#          paths:
#            - /usr/local

      - run: 
          name: Setup Environment Variables
          command: |
            echo "export RELEASE_DATE=$(date '+%Y%m%d')" >> $BASH_ENV
            echo "export PKG_CONFIG_PATH=/usr/local/opt/qt/lib/pkgconfig" >> $BASH_ENV
            echo "export PATH=/usr/local/opt/qt/bin:$PATH" >> $BASH_ENV

      - run: echo $HOME

      # mkdir: /usr/local/lrose: Permission denied
      # mkdir: /usr/local/lrose: No such file or directory
      - run:
          name: Add to Environment Variables
          command: |
            echo "export TARGET=lrose-cyclone-$RELEASE_DATE.src.mac_osx" >> $BASH_ENV
            echo "export SOURCE_DIR=lrose-cyclone-$RELEASE_DATE.mac_osx" >> $BASH_ENV
            echo "export LROSE_INSTALL_DIR=/tmp/workarea/install/lrose" >> $BASH_ENV
            echo "export LROSE_ROOT_DIR=/tmp/workarea/install/lrose" >> $BASH_ENV
            echo "export PATH=/usr/local/opt/qt/bin:$PATH" >> $BASH_ENV
            # samurai needs LROSE_ROOT_DIR

            #echo "export LROSE_INSTALL_DIR=/usr/local/lrose" >> $BASH_ENV
            #echo "export LROSE_ROOT_DIR=/usr/local/lrose" >> $BASH_ENV

#      - restore_cache:
#          key: v2-macos-with-lrose-core-installed-cache
# error: cannot extract through symlink ... 

      - run:
          name: extract lrose-cyclone tgz 
          command: |
            echo "extracting lrose-cyclone from tgz"
            mkdir workarea
            cd workarea
            tar xf /tmp/workspace_macos/releases/lrose-cyclone/osx/$TARGET.tgz

      #- run:
      #    name: build lrose-cyclone 
      #    command: |
      #      echo "building lrose-cylone from tgz"
      - run: cd workarea; ls

      - run: cd workarea/$SOURCE_DIR; pwd

      - run: cd workarea/$SOURCE_DIR; ./configure --disable-dependency-tracking --prefix=$LROSE_INSTALL_DIR
      - run: cd workarea/$SOURCE_DIR; make install

#      - save_cache:
#          key: v2-macos-with-lrose-core-installed-cache
#          paths:
#            - workarea
#            - $LROSE_INSTALL_DIR


      - run: cd workarea/$SOURCE_DIR; rsync -av share $LROSE_INSTALL_DIR                                                                               
      - run:
          name: Install needed packages
          command: |
            brew install cmake
            brew install eigen
            brew install libomp libzip
            brew install llvm

      # don't exit if one of the commands fails 
      # - run: set +e

      - run:
          name: Set Environment Variables
          command: |
            echo "export RADX_INCLUDE=$LROSE_INSTALL_DIR/include" >> $BASH_ENV
            echo "export RADX_LIB=$LROSE_INSTALL_DIR/lib" >> $BASH_ENV
            echo "export ARMADILLO_INCLUDE=`pkg-config --variable=includedir armadillo`" >> $BASH_ENV
            echo "export ARMADILLO_LIB=`pkg-config --variable=libdir armadillo`" >> $BASH_ENV
            echo "export NETCDF_INCLUDE=/usr/local/include" >> $BASH_ENV
            echo "export NETCDF_LIB=/usr/local/lib" >> $BASH_ENV
            echo "export LD_LIBRARY_PATH=$LROSE_INSTALL_DIR/lib" >> $BASH_ENV

      - run: find /usr/local/ -name Qt5Config.cmake

      # samurai needs Qt, from this error ...
      # CMake Error at CMakeLists.txt:20 (find_package):
      # By not providing "FindQt5.cmake" in CMAKE_MODULE_PATH this project has
      # asked CMake to find a package configuration file provided by "Qt5", but
      # CMake did not find one.
      #
      # Could not find a package configuration file provided by "Qt5" with any of
      # the following names:
      # 
      # Qt5Config.cmake
      # qt5-config.cmake

      #  from https://github.com/Cockatrice/Cockatrice/issues/205   -DCMAKE_PREFIX_PATH=/usr/local/Cellar/qt5/5.3.1/

      #
      # cmake -DCMAKE_INSTALL_PREFIX=$LROSE_INSTALL_DIR -DCMAKE_MODULE_PATH=/usr/local/Cellar/qt/5.13.1/lib/cmake/Qt5 -D OpenMP_C_FLAGS=`pkg-config --cflags ompi-c`  -D OpenMP_C_LIB_NAMES="" -D OpenMP_CXX_FLAGS=`pkg-config --cflags ompi-cxx` -D OpenMP_CXX_LIB_NAMES=""  .
      #

#            ln -s /usr/local/opt/llvm/bin/clang /usr/local/bin/clang-omp
#            ln -s /usr/local/opt/llvm/bin/clang++ /usr/local/bin/clang-omp++

# 
#            cmake -DCMAKE_INSTALL_PREFIX=$LROSE_INSTALL_DIR \
#               -DCMAKE_MODULE_PATH=/usr/local/Cellar/qt/5.13.2/lib/cmake/Qt5 \
#               -D OpenMP_C_FLAGS=`pkg-config --cflags ompi-c` \
#               -D OpenMP_C_LIB_NAMES="" \ 
#               -D OpenMP_CXX_FLAGS=`pkg-config --cflags ompi-cxx` \
#               -D OpenMP_CXX_LIB_NAMES="" /private/tmp/workarea/$SOURCE_DIR/samurai
#

      - run:
          name: Set Environment Variables for samurai
          command: |
            echo "export CMAKE_QT5=/usr/local/opt/qt/lib/cmake/Qt5" >> $BASH_ENV
            echo "export OCFLAGS=`pkg-config --cflags ompi-c`" >> $BASH_ENV
            echo "export OCXXFLAGS=`pkg-config --cflags ompi-cxx`" >> $BASH_ENV



      - run:
          name: Build/install samurai  
          command: |
            set +e
            echo "building samurai"
            echo "ls $LROSE_INSTALL_DIR"
            ls $LROSE_INSTALL_DIR
            echo " ... after ls $LROSE_INSTALL_DIR"
            echo " ... cmake.qt5.config or something should be here"
            ls $CMAKE_QT5
            echo $OCFLAGS
            echo $OCXXFLAGS
            cd /private/tmp/workarea/$SOURCE_DIR/samurai
            cmake -DCMAKE_INSTALL_PREFIX=$LROSE_INSTALL_DIR -DCMAKE_MODULE_PATH=$CMAKE_QT5 -D OpenMP_C_FLAGS=$OCFLAGS -D OpenMP_C_LIB_NAMES="" -D OpenMP_CXX_FLAGS=$OCXXFLAGS -D OpenMP_CXX_LIB_NAMES="" .
            make 
            make install
            pwd
            echo "building vortrac"
            find /usr/local -name netcdf.h
            cd /private/tmp/workarea/$SOURCE_DIR/vortrac/src
            pwd
            qmake .
            make
            cp vortrac.app/Contents/MacOS/vortrac $LROSE_INSTALL_DIR/bin
            cd ..
            rsync -av Resources $LROSE_INSTALL_DIR
            echo "building fractl"
            ln -s /usr/local/Cellar/geographiclib /usr/local/include/GeographicLib
            ls -l /usr/local/include/geographiclib
            ls -R /usr/local/include/GeographicLib
            cd /private/tmp/workarea/$SOURCE_DIR/fractl
            cmake -DCMAKE_INSTALL_PREFIX=$LROSE_INSTALL_DIR .
            make
            make install 
            echo "building HawkEye.dmg"
            cd /private/tmp/workarea/$SOURCE_DIR/apps/radar/src/HawkEye
            pwd            
            make clean
            qmake -o Makefile.qmake
            echo " ...  make from_qmake"
            make -f Makefile.qmake
            echo " ... after qmake"
            mkdir -p HawkEye.app/Contents/Frameworks
            echo " ... after mkdir"
            cp /usr/lib/libexpat.1.dylib HawkEye.app/Contents/Frameworks/.
            cp /usr/lib/libbz2.1.0.dylib HawkEye.app/Contents/Frameworks/.
            cp /usr/lib/libz.1.dylib HawkEye.app/Contents/Frameworks/.
            cp /usr/lib/libSystem.B.dylib HawkEye.app/Contents/Frameworks/.
            mkdir -p HawkEye.app/Contents/MacOS/../share
            cp -r /private/tmp/workarea/$SOURCE_DIR/share/color_scales HawkEye.app/Contents/MacOS/../share/.
            echo " ... before calling macdeployqt"
            macdeployqt HawkEye.app -dmg -always-overwrite
            echo " .. before calling hdiutil"
            hdiutil create -volname HawkEye_Installer -srcfolder /private/tmp/workarea/$SOURCE_DIR/apps/radar/src/HawkEye/HawkEye.app -ov -format UDZO HawkEye.dmg
            echo " ... after dmp build"
            cp HawkEye.dmg /private/tmp/workspace_macos/releases/lrose-cyclone
            echo " ... done with building HawkEye"
            echo "building vortrac.dmg"
            cd /private/tmp/workarea/$SOURCE_DIR/vortrac
            pwd            
            echo " ... before calling macdeployqt"
            cd src
            macdeployqt vortrac.app -dmg -always-overwrite
            cp ../Resources/*.xml vortrac.app/Contents/Resources/
            echo " .. before calling hdiutil"
            hdiutil create -volname Vortrac_Installer -srcfolder /private/tmp/workarea/$SOURCE_DIR/vortrac/src/vortrac.app -ov -format UDZO vortrac.dmg
            echo " ... after dmp build"
            cp vortrac.dmg /private/tmp/workspace_macos/releases/lrose-cyclone
            echo " ... done with building vortrac"
            echo " Start of tests ... "
            echo "   testing RadxPrint ..."
            $LROSE_INSTALL_DIR/bin/RadxPrint -h
            echo "   testing vortrac ..."
            $LROSE_INSTALL_DIR/bin/vortrac  -h
            echo "   testing fractl ..."
            $LROSE_INSTALL_DIR/bin/fractl -h
            echo "   testing samurai ..."
            $LROSE_INSTALL_DIR/bin/samurai -h
            echo " End of tests"

      - run:
          name: Set Environment Variables for MacOS Installer
          command: |
            echo "export INSTALL_BASE_DIR=/usr/local" >> $BASH_ENV
            echo "export ARCHIVE_FILENAME=LROSE-Cyclone_Installer.pkg" >> $BASH_ENV
            echo "export PACKAGE_NAME=LROSE-Core.pkg" >> $BASH_ENV
            echo "export PARTY3_BASE_DIR=/usr/local" >> $BASH_ENV
            echo "export STAGING=$LROSE_INSTALL_DIR" >> $BASH_ENV

#
# just use the install area as the staging area
#     echo "export LROSE_INSTALL_DIR=/tmp/workarea/install/lrose" >> $BASH_ENV

      - run:
          name: Build MacOS Installer
          command: |
            set +e
            cd /private/tmp/workarea
            mkdir macos_installer
            cd macos_installer
            mkdir scripts
            echo "#!/bin/sh" >> scripts/postinstall
            echo "echo \"Running postinstall\" > /tmp/my_postinstall.log " >> scripts/postinstall
            echo "exit 0 # all good" >> scripts/postinstall
            echo "#!/bin/sh" >> scripts/preinstall
            echo "echo \"Running preinstall\" > /tmp/my_preinstall.log " >> scripts/preinstall
            echo "exit 0 # all good" >> scripts/preinstall
            chmod u+x scripts/postinstall
            chmod u+x scripts/preinstall
            mkdir myresources
            echo "license" >> myresources/LICENSE.html
            echo "readme" >> myresources/README.html
            echo "building MacOS Installer"
            echo "  copying 3rd party libraries to staging area"
            echo "  (use otool -L to find these dependencies)"
            cp ${PARTY3_BASE_DIR}/lib/libnetcdf.*.dylib ${STAGING}/lib
            cp ${PARTY3_BASE_DIR}/lib/libhdf5*.dylib ${STAGING}/lib
            cp ${PARTY3_BASE_DIR}/lib/libarmadillo.*.dylib ${STAGING}/lib
            cp ${PARTY3_BASE_DIR}/lib/libz*dylib ${STAGING}/lib
            cp ${PARTY3_BASE_DIR}/lib/libbz2*dylib ${STAGING}/lib
            cp ${PARTY3_BASE_DIR}/lib/libc++*dylib ${STAGING}/lib
            cp ${PARTY3_BASE_DIR}/lib/libfftw3*dylib ${STAGING}/lib
            cp ${PARTY3_BASE_DIR}/lib/libGeographic.*.dylib ${STAGING}/lib
            cp ${PARTY3_BASE_DIR}/lib/libomp.dylib ${STAGING}/lib
            cp ${PARTY3_BASE_DIR}/opt/libpng/lib/libpng16*dylib ${STAGING}/lib
            echo "  copy frameworks from 3rd parties"
            tar -czf staging.tar.gz /tmp/workarea/install 
            pkgbuild --analyze --root /tmp/workarea/install LROSE-Cyclone_Components.plist
            pkgbuild --root /tmp/workarea/install --scripts scripts --identifier edu.ucar.lrose --install-location "/usr/local/lrose_20200108"  ${PACKAGE_NAME}
            productbuild --synthesize --package ${PACKAGE_NAME} Distribution.xml
            productbuild --distribution ./Distribution.xml --package-path . --resources myresources/ ./${ARCHIVE_FILENAME}
            echo "   make the disk image (.dmg)"
            mkdir -p for_dmg_only
            cp ${ARCHIVE_FILENAME} for_dmg_only/.
            hdiutil create -volname LROSE-Cyclone_Installer -srcfolder for_dmg_only -ov -format UDZO LROSE-Cyclone_Installer.dmg
            cd ..
            cp -R macos_installer /private/tmp/workspace_macos/releases/lrose-cyclone


#            cp LROSE-Cyclone_Installer.dmg /private/tmp/workspace_macos/releases/lrose-cyclone
#            cp ${ARCHIVE_FILENAME} /private/tmp/workspace_macos/releases/lrose-cyclone
#            cp LROSE-Cyclone_Components.plist /private/tmp/workspace_macos/releases/lrose-cyclone
#            cp /private/tmp/workspace_macos/releases/lrose-cyclone
#            cp /private/tmp/workspace_macos/releases/lrose-cyclone

      - store_artifacts:
          path: /tmp/workspace_macos/releases/lrose-cyclone


  test-macos-lrose-cyclone-installer-latest:
    macos:
      xcode: "11.2.1"

    working_directory: /tmp
    steps:
      - run: brew install wget
      - run:
          name: Install  .pkg file
          command: |
            cd /tmp
            mkdir my_workarea
            cd my_workarea
            wget https://github.com/NCAR/lrose-release-test/releases/tag/20200108/LROSE-Cyclone_Installer.pkg
            ls
            pwd
            echo "------------"
            echo "installer -pkginfo"
            installer -pkginfo -pkg LROSE-Cyclone_Installer*
            echo "------------"
            installer -verbose -allowUntrusted -pkg /tmp/my_workarea/LROSE-Cyclone_Installer* -target /
            /usr/local/lrose20200108/lrose/bin/RadxPrint -h
            /usr/local/lrose20200108/lrose/bin/vortrac -h
            /usr/local/lrose20200108/lrose/bin/fractl -h
            /usr/local/lrose20200108/lrose/bin/samurai -h



  test-macos-cyclone-expanded-tgz-not-used:
    macos:
      xcode: "11.2.1"

    working_directory: /tmp
    steps:
      - attach_workspace:
          at: /tmp/workspace_macos

      # the rest is just an expansion of the above ... 
      - run:
          name: Install needed packages for vortrac
          command: |
            brew install armadillo                                                         
                        
      - run:
          name: Add to Environment Variables for vortrac
          command: |
            echo "export RADX_INCLUDE=$LROSE_INSTALL_DIR/include" >> $BASH_ENV
            echo "export RADX_LIB=$LROSE_INSTALL_DIR/lib" >> $BASH_ENV
            echo "export ARMADILLO_INCLUDE=`pkg-config --variable=includedir armadillo`" >> $BASH_ENV
            echo "export ARMADILLO_LIB=`pkg-config --variable=libdir armadillo`" >> $BASH_ENV
            echo "export NETCDF_INCLUDE=`pkg-config --variable=includedir netcdf`" >> $BASH_ENV
            echo "export NETCDF_LIB=`pkg-config --variable=libdir netcdf`" >> $BASH_ENV
            echo "export LD_LIBRARY_PATH=$LROSE_INSTALL_DIR/lib" >> $BASH_ENV
                                                              
      - run:
          name: Build/install vortrac  
          command: |
            echo "building vortrac"
            cd workarea/$SOURCE_DIR/vortrac/src
            qmake .
            make
            cp vortrac $LROSE_INSTALL_DIR/bin
            cd ..
            rsync -av Resources $LROSE_INSTALL_DIR

      - run:
          name: Build Vortrac DMG
          command: |
            cd workarea/$SOURCE_DIR/vortrac
            mkdir -p deploy
            cd src
            # /usr/local/opt/qt/bin/qmake .
            # make

#
# this creates vortrac.app and vortrac.dmg files/directories in src dir
#
#        /usr/local/opt/qt/bin/macdeployqt vortrac.app -dmg -always-overwrite

#
# TODO: install setfileicon 
#
# 
# ./deploy/setfileicon ./src/images/vortrac.icns vortrac.app
# vortrac/Resources contains *.xml
# cp *.xml vortrac.app/Contents/Resources/
# rm -rf deploy/mac/vortrac.app/
# cp -R vortrac.app deploy/mac/
# cp VORTRAC_Users_Guide_v1.pdf deploy/mac/ 



      # TODO: create the DMG then, save as an artifact
      - run:
          name: Build HawkEye DMG
          command: |
            cd workarea/$SOURCE_DIR/apps/radar/src/HawkEye
            mkdir -p HawkEye.app/Contents/Frameworks
            cp /usr/lib/libexpat.1.dylib HawkEye.app/Contents/Frameworks/.
            cp /usr/lib/libbz2.1.0.dylib HawkEye.app/Contents/Frameworks/.
            cp /usr/lib/libz.1.dylib HawkEye.app/Contents/Frameworks/.
            cp /usr/lib/libSystem.B.dylib HawkEye.app/Contents/Frameworks/.
            mkdir -p HawkEye.app/Contents/MacOS/../share
            cp -r $LROSE_INSTALL_DIR/share/color_scales HawkEye.app/Contents/MacOS/../share/.
            macdeployqt HawkEye.app -dmg -always-overwrite
            hdiutil create -volname HawkEye_Installer -srcfolder /tmp/workarea/codebase/apps/radar/src/HawkEye/HawkEye.app -ov -format UDZO HawkEye.dmg
            cp HawkEye.dmg /tmp/workspace_macos/releases/lrose-cyclone


      # annoying ... returns error: Exited with code exit status 1                                  
      # which causes a failure, but it works.  So, we need to fix this ... 
#      - run: $LROSE_INSTALL_DIR/bin/fractl -h

      # create soft link for geographiclib since brew install didn't 
      - run: ln -s ../Cellar/geographiclib /usr/local/include/GeographicLib
      - run: ls -l /usr/local/include/geographiclib
      - run: ls -R /usr/local/include/GeographicLib

      - run:
          name: Build/install fractl  
          command: |
            echo "building fractl"
            cd workarea/$SOURCE_DIR/fractl
            cmake -DCMAKE_INSTALL_PREFIX=$LROSE_INSTALL_DIR .
            make
            make install 



      - run: $LROSE_INSTALL_DIR/bin/RadxPrint -h
      - run: $LROSE_INSTALL_DIR/bin/vortrac  -h
      - run: $LROSE_INSTALL_DIR/bin/samurai -h

      - store_artifacts:
          path: /tmp/workspace_macos/releases/lrose-cyclone



  #test-macos-lrose-cyclone-tgz-previous:
  test-macos-lrose-samurai:
    macos:
      xcode: "10.3.0"

    working_directory: /tmp
    steps:

        # needed for QJSEngine: qt5-qtdeclarative-devel
      - run:
          name: Install needed packages
          command: |
            brew install cmake
            brew install eigen
            brew install fftw
            brew install netcdf
            brew install szip pkg-config                                                            
            brew install libzip
            brew install rsync

      - run: echo "where is netcdf.h error building vortrac ... "
      - run: find /usr/local/include -name netcdf.h
      - run:
          name: Set Environment Variables
          command: |
            echo "export RADX_INCLUDE=$LROSE_INSTALL_DIR/include" >> $BASH_ENV
            echo "export RADX_LIB=$LROSE_INSTALL_DIR/lib" >> $BASH_ENV
            echo "export ARMADILLO_INCLUDE=`pkg-config --variable=includedir armadillo`" >> $BASH_ENV
            echo "export ARMADILLO_LIB=`pkg-config --variable=libdir armadillo`" >> $BASH_ENV
            echo "export NETCDF_INCLUDE=`pkg-config --variable=includedir netcdf`" >> $BASH_ENV
            echo "export NETCDF_LIB=`pkg-config --variable=libdir netcdf`" >> $BASH_ENV
            echo "export LD_LIBRARY_PATH=$LROSE_INSTALL_DIR/lib" >> $BASH_ENV
          
      - run: echo $NETCDF_INCLUDE
      - run: echo $NETCDF_LIB
 
      - run: brew install libomp --build-from-source
# installed here: /usr/local/Cellar/libomp/9.0.0

      - run: brew install geographiclib                                                     


      - run: brew install qt
#
# qt is keg-only, which means it was not symlinked into /usr/local,
# because Qt 5 has CMake issues when linked.
#
# If you need to have qt first in your PATH run:
#  echo 'export PATH="/usr/local/opt/qt/bin:$PATH"' >> ~/.bash_profile
#
# For compilers to find qt you may need to set:
#  export LDFLAGS="-L/usr/local/opt/qt/lib"
#  export CPPFLAGS="-I/usr/local/opt/qt/include"
#
# For pkg-config to find qt you may need to set:
#  export PKG_CONFIG_PATH="/usr/local/opt/qt/lib/pkgconfig"

      - run: 
          name: Setup Environment Variables
          command: |
            echo "export PKG_CONFIG_PATH=/usr/local/opt/qt/lib/pkgconfig" >> $BASH_ENV
            echo "export PATH=/usr/local/opt/qt/bin:$PATH" >> $BASH_ENV

      - run: which qmake
      - run: which macdeployqt

#      - run: brew cask install xquartz 

      - run: 
          name: Setup Environment Variables
          command: |
            echo "export RELEASE_DATE=$(date '+%Y%m%d')" >> $BASH_ENV

      - run: pwd

      # mkdir: /usr/local/lrose: Permission denied
      # mkdir: /usr/local/lrose: No such file or directory
      - run:
          name: Add to Environment Variables
          command: |
            echo "export TARGET=lrose-cyclone-$RELEASE_DATE.src.mac_osx" >> $BASH_ENV
            echo "export SOURCE_DIR=lrose-cyclone-$RELEASE_DATE.mac_osx" >> $BASH_ENV
            echo "export LROSE_INSTALL_DIR=/tmp/workarea/install/lrose" >> $BASH_ENV
            echo "export LROSE_ROOT_DIR=/tmp/workarea/install/lrose" >> $BASH_ENV

      - run:
          name: Set Environment Variables
          command: |
            echo "export RADX_INCLUDE=$LROSE_INSTALL_DIR/include" >> $BASH_ENV
            echo "export RADX_LIB=$LROSE_INSTALL_DIR/lib" >> $BASH_ENV
            echo "export ARMADILLO_INCLUDE=`pkg-config --variable=includedir armadillo`" >> $BASH_ENV
            echo "export ARMADILLO_LIB=`pkg-config --variable=libdir armadillo`" >> $BASH_ENV
            echo "export NETCDF_INCLUDE=`pkg-config --variable=includedir netcdf`" >> $BASH_ENV
            echo "export NETCDF_LIB=`pkg-config --variable=libdir netcdf`" >> $BASH_ENV
            echo "export LD_LIBRARY_PATH=$LROSE_INSTALL_DIR/lib" >> $BASH_ENV

      - run: find /usr/local/ -name Qt5Config.cmake

      # samurai needs Qt, from this error ...
      # CMake Error at CMakeLists.txt:20 (find_package):
      # By not providing "FindQt5.cmake" in CMAKE_MODULE_PATH this project has
      # asked CMake to find a package configuration file provided by "Qt5", but
      # CMake did not find one.
      #
      # Could not find a package configuration file provided by "Qt5" with any of
      # the following names:
      # 
      # Qt5Config.cmake
      # qt5-config.cmake

      
      # create soft link for geographiclib since brew install didn't 
      - run: ln -s ../Cellar/geographiclib /usr/local/include/GeographicLib
      - run: ls -l /usr/local/include/geographiclib
      - run: ls -R /usr/local/include/GeographicLib

      - run: pkg-config --cflags ompi

     # samurai needs openMP flags set, from this error ...
     # CMake Error at /usr/local/Cellar/cmake/3.15.5/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:137 (message):
     # Could NOT find OpenMP_C (missing: OpenMP_C_FLAGS OpenMP_C_LIB_NAMES)
     # OpenMP_C_FLAG "-fopenmp=libomp -Wno-unused-command-line-argument
     # OpenMP_C_LIB_NAMES "libomp" "libgomp" "libiomp5"
     # OpenMP_C "${CMAKE_C_COMPILER}" ???

      - run: mkdir workarea
            #cd workarea
            #pwd
      - run: ls -R  /usr/local/Cellar/open-mpi

      - run: cd workarea; git clone https://github.com/mmbell/samurai

# OpenMP support was drastically improved in CMake 3.9+. The Modern(TM) way to add OpenMP to a target is:
#
# find_package(OpenMP)
# if(OpenMP_CXX_FOUND)
#    target_link_libraries(MyTarget PUBLIC OpenMP::OpenMP_CXX)
# endif()
#
      # do some awk manipulation of the CMakeLists.txt file
      - run:
          name: edit CMakeList.txt file
          command: |
            cd workarea/samurai
            awk '(NR < 46) {print $0}' CMakeLists.txt > temp_cmake.txt
            echo "if(OpenMP_CXX_FOUND)" >> temp_cmake.txt
            echo "    target_link_libraries(OpenMP_TARGET PUBLIC OpenMP::OpenMP_CXX)" >> temp_cmake.txt
            echo "endif()" >> temp_cmake.txt >> temp_cmake.txt
            awk '(NR > 54) {print $0}' CMakeLists.txt >> temp_cmake.txt
            cat temp_cmake.txt
            mv CMakeLists.txt junk
            mv temp_cmake.txt CMakeLists.txt
            
#            echo "export RADX_INCLUDE=$LROSE_INSTALL_DIR/include" >> $BASH_ENV

           # echo "building samurai"
      - run: cd workarea/samurai; cmake -DCMAKE_INSTALL_PREFIX=$LROSE_INSTALL_DIR -DCMAKE_MODULE_PATH=/usr/local/Cellar/qt/5.13.2/lib/cmake/Qt5;/usr/local/Cellar/open-mpi/4.0.2     .

# -DOpenMP_C="${CMAKE_C_COMPILER}" -DOpenMP_C_LIB_NAMES="libomp" "libgomp" "libiomp5" -DOpenMP_C_FLAG="-fopenmp=libomp -Wno-unused-command-line-argument" .

      # checkout tagged version of samurai before open mpi integration
      # - run: cd workarea; git checkout 
      # - run: cd workarea/samurai; cmake -DCMAKE_INSTALL_PREFIX=$LROSE_INSTALL_DIR .
      - run: cd workarea/samurai; make 
      - run: cd workarea/samurai; make install



  test-macos-cyclone-tgz-build-core-latest:
    macos:
      xcode: "11.2.1"

    working_directory: /tmp
    steps:
      - attach_workspace:
          at: /tmp/workspace_macos

        # needed for QJSEngine: qt5-qtdeclarative-devel
      - run:
          name: Install needed packages
          command: |
            brew install fftw
            brew install qt5 netcdf
            brew install szip pkg-config                                                            
            brew install libzip
            brew install rsync

      - run: brew cask install xquartz 

      - run: 
          name: Setup Environment Variables
          command: |
            echo "export RELEASE_DATE=$(date '+%Y%m%d')" >> $BASH_ENV
            echo "export PKG_CONFIG_PATH=/usr/local/opt/qt/lib/pkgconfig" >> $BASH_ENV

      - run: echo $HOME

      # mkdir: /usr/local/lrose: Permission denied
      # mkdir: /usr/local/lrose: No such file or directory
      - run:
          name: Add to Environment Variables
          command: |
            echo "export TARGET=lrose-cyclone-$RELEASE_DATE.src.mac_osx" >> $BASH_ENV
            echo "export SOURCE_DIR=lrose-cyclone-$RELEASE_DATE.mac_osx" >> $BASH_ENV
            echo "export LROSE_INSTALL_DIR=/tmp/workarea/install/lrose" >> $BASH_ENV
            echo "export LROSE_ROOT_DIR=/tmp/workarea/install/lrose" >> $BASH_ENV

      - run:
          name: extract lrose-cyclone tgz 
          command: |
            echo "extracting lrose-cyclone from tgz"
            mkdir workarea
            cd workarea
            tar xf /tmp/workspace_macos/releases/lrose-cyclone/osx/$TARGET.tgz

      - run: cd workarea; ls
      - run: cd workarea/$SOURCE_DIR; pwd
      - run: cd workarea/$SOURCE_DIR; ./configure --disable-dependency-tracking --prefix=$LROSE_INSTALL_DIR
      - run: cd workarea/$SOURCE_DIR; make install
      - run: cd workarea/$SOURCE_DIR; rsync -av share $LROSE_INSTALL_DIR                                                                               
      - run: $LROSE_INSTALL_DIR/bin/RadxPrint -h

      - persist_to_workspace:
          root: workarea
          paths: install $SOURCE_DIR
      #- persist_to_workspace:
      #    root: workarea
      

  test-macos-cyclone-tgz-build-samurai-latest:
    macos:
      xcode: "11.2.1"
    working_directory: /tmp
    steps:
      - attach_workspace:
          at: /tmp/workspace_macos
      - attach_workspace:
          at: /tmp/workarea

      - run: ls -R workarea

        # needed for QJSEngine: qt5-qtdeclarative-devel
      - run:
          name: Install needed packages
          command: |
            brew install cmake
            brew install eigen
            brew install fftw
            brew install qt netcdf
            brew install szip pkg-config                                                          
            brew install libomp libzip
            brew install rsync

#            brew install qtbase5-dev
#            brew install qtdeclarative5-dev
 
      - run: brew cask install xquartz 

      - run: 
          name: Setup Environment Variables
          command: |
            echo "export RELEASE_DATE=$(date '+%Y%m%d')" >> $BASH_ENV
            echo "export PKG_CONFIG_PATH=/usr/local/opt/qt/lib/pkgconfig" >> $BASH_ENV

      - run: echo $HOME

      # mkdir: /usr/local/lrose: Permission denied
      # mkdir: /usr/local/lrose: No such file or directory
      - run:
          name: Add to Environment Variables
          command: |
            echo "export TARGET=lrose-cyclone-$RELEASE_DATE.src.mac_osx" >> $BASH_ENV
            echo "export SOURCE_DIR=lrose-cyclone-$RELEASE_DATE.mac_osx" >> $BASH_ENV
            echo "export LROSE_INSTALL_DIR=/tmp/workarea/install/lrose" >> $BASH_ENV
            echo "export LROSE_ROOT_DIR=/tmp/workarea/install/lrose" >> $BASH_ENV

      - run:
          name: Build/install samurai  
          command: |
            echo "building samurai"
            cd workarea/$SOURCE_DIR/samurai
            cmake -DCMAKE_INSTALL_PREFIX=$LROSE_INSTALL_DIR .
            make 
            make install

      - run: $LROSE_INSTALL_DIR/bin/samurai -h


  test-macos-cyclone-tgz-build-vortrac-latest:
    macos:
      xcode: "11.2.1"

    working_directory: /tmp
    steps:
      - attach_workspace:
          at: /tmp/workspace_macos
      - attach_workspace:
          at: /tmp/workarea

        # needed for QJSEngine: qt5-qtdeclarative-devel
      - run:
          name: Install needed packages
          command: |
            brew install cmake
            brew install eigen
            brew install fftw
            brew install qt5 netcdf
            brew install szip pkg-config                                                            
            brew install armadillo                                                         
            brew install libzip
            brew install rsync

      - run: brew cask install xquartz 

      - run: 
          name: Setup Environment Variables
          command: |
            echo "export RELEASE_DATE=$(date '+%Y%m%d')" >> $BASH_ENV
            echo "export PKG_CONFIG_PATH=/usr/local/opt/qt/lib/pkgconfig" >> $BASH_ENV

      - run: echo $HOME

      # mkdir: /usr/local/lrose: Permission denied
      # mkdir: /usr/local/lrose: No such file or directory
      - run:
          name: Add to Environment Variables
          command: |
            echo "export TARGET=lrose-cyclone-$RELEASE_DATE.src.mac_osx" >> $BASH_ENV
            echo "export SOURCE_DIR=lrose-cyclone-$RELEASE_DATE.mac_osx" >> $BASH_ENV
            echo "export LROSE_INSTALL_DIR=/tmp/workarea/install/lrose" >> $BASH_ENV
            echo "export LROSE_ROOT_DIR=/tmp/workarea/install/lrose" >> $BASH_ENV
                        
      - run:
          name: Add to Environment Variables for vortrac
          command: |
            echo "export RADX_INCLUDE=$LROSE_INSTALL_DIR/include" >> $BASH_ENV
            echo "export RADX_LIB=$LROSE_INSTALL_DIR/lib" >> $BASH_ENV
            echo "export ARMADILLO_INCLUDE=`pkg-config --variable=includedir armadillo`" >> $BASH_ENV
            echo "export ARMADILLO_LIB=`pkg-config --variable=libdir armadillo`" >> $BASH_ENV
            echo "export NETCDF_INCLUDE=`pkg-config --variable=includedir netcdf`" >> $BASH_ENV
            echo "export NETCDF_LIB=`pkg-config --variable=libdir netcdf`" >> $BASH_ENV
            echo "export QT5_BIN=/usr/lib64/qt5/bin" >> $BASH_ENV
            echo "export LD_LIBRARY_PATH=$LROSE_INSTALL_DIR/lib" >> $BASH_ENV
                                                              
      - run:
          name: Build/install vortrac  
          command: |
            echo "building vortrac"
            cd workarea/$SOURCE_DIR/vortrac/src
            $QT5_BIN/qmake .
            make
            cp vortrac $LROSE_INSTALL_DIR/bin
            cd ..
            rsync -av Resources $LROSE_INSTALL_DIR

      - run:
          name: Build Vortrac DMG
          command: |
            cd workarea/$SOURCE_DIR/vortrac
            mkdir -p deploy
            cd src
            # /usr/local/opt/qt/bin/qmake .
            # make

#
# this creates vortrac.app and vortrac.dmg files/directories in src dir
#
#        /usr/local/opt/qt/bin/macdeployqt vortrac.app -dmg -always-overwrite

#
# TODO: install setfileicon 
#
# 
# ./deploy/setfileicon ./src/images/vortrac.icns vortrac.app
# vortrac/Resources contains *.xml
# cp *.xml vortrac.app/Contents/Resources/
# rm -rf deploy/mac/vortrac.app/
# cp -R vortrac.app deploy/mac/
# cp VORTRAC_Users_Guide_v1.pdf deploy/mac/ 

      - run: $LROSE_INSTALL_DIR/bin/vortrac  -h

      - store_artifacts:
          path: /tmp/workspace_macos/releases/lrose-cyclone



  test-macos-cyclone-tgz-build-hawkeye-latest:
    macos:
      xcode: "11.2.1"

    working_directory: /tmp
    steps:
      - attach_workspace:
          at: /tmp/workspace_macos
      - attach_workspace:
          at: /tmp/workarea

        # needed for QJSEngine: qt5-qtdeclarative-devel
      - run:
          name: Install needed packages
          command: |
            brew install fftw
            brew install qt5 netcdf
            brew install szip pkg-config                                                            
            brew install libzip
            brew install rsync

      - run: brew cask install xquartz 

      - run: 
          name: Setup Environment Variables
          command: |
            echo "export RELEASE_DATE=$(date '+%Y%m%d')" >> $BASH_ENV
            echo "export PKG_CONFIG_PATH=/usr/local/opt/qt/lib/pkgconfig" >> $BASH_ENV

      - run: echo $HOME

      # mkdir: /usr/local/lrose: Permission denied
      # mkdir: /usr/local/lrose: No such file or directory
      - run:
          name: Add to Environment Variables
          command: |
            echo "export TARGET=lrose-cyclone-$RELEASE_DATE.src.mac_osx" >> $BASH_ENV
            echo "export SOURCE_DIR=lrose-cyclone-$RELEASE_DATE.mac_osx" >> $BASH_ENV
            echo "export LROSE_INSTALL_DIR=/tmp/workarea/install/lrose" >> $BASH_ENV
            echo "export LROSE_ROOT_DIR=/tmp/workarea/install/lrose" >> $BASH_ENV

      # TODO: create the DMG then, save as an artifact
      - run:
          name: Build HawkEye DMG
          command: |
            cd workarea/$SOURCE_DIR/apps/radar/src/HawkEye
            mkdir -p HawkEye.app/Contents/Frameworks
            cp /usr/lib/libexpat.1.dylib HawkEye.app/Contents/Frameworks/.
            cp /usr/lib/libbz2.1.0.dylib HawkEye.app/Contents/Frameworks/.
            cp /usr/lib/libz.1.dylib HawkEye.app/Contents/Frameworks/.
            cp /usr/lib/libSystem.B.dylib HawkEye.app/Contents/Frameworks/.
            mkdir -p HawkEye.app/Contents/MacOS/../share
            cp -r $LROSE_INSTALL_DIR/share/color_scales HawkEye.app/Contents/MacOS/../share/.
            macdeployqt HawkEye.app -dmg -always-overwrite
            hdiutil create -volname HawkEye_Installer -srcfolder /tmp/workarea/codebase/apps/radar/src/HawkEye/HawkEye.app -ov -format UDZO HawkEye.dmg
            cp HawkEye.dmg /tmp/workspace_macos/releases/lrose-cyclone

      - store_artifacts:
          path: /tmp/workspace_macos/releases/lrose-cyclone

  test-macos-cyclone-tgz-build-fractl-latest:
    macos:
      xcode: "11.2.1"

    working_directory: /tmp
    steps:
      - attach_workspace:
          at: /tmp/workspace_macos
      - attach_workspace:
          at: /tmp/workarea

        # needed for QJSEngine: qt5-qtdeclarative-devel
      - run:
          name: Install needed packages
          command: |
            brew install cmake
            brew install eigen
            brew install fftw flex
            brew install qt5 netcdf
            brew install szip pkg-config                                                            
            brew install geographiclib                                                     
            brew install libomp libzip
            brew install rsync

      - run: brew cask install xquartz 

      - run: 
          name: Setup Environment Variables
          command: |
            echo "export RELEASE_DATE=$(date '+%Y%m%d')" >> $BASH_ENV
            echo "export PKG_CONFIG_PATH=/usr/local/opt/qt/lib/pkgconfig" >> $BASH_ENV

      - run: echo $HOME

      # mkdir: /usr/local/lrose: Permission denied
      # mkdir: /usr/local/lrose: No such file or directory
      - run:
          name: Add to Environment Variables
          command: |
            echo "export TARGET=lrose-cyclone-$RELEASE_DATE.src.mac_osx" >> $BASH_ENV
            echo "export SOURCE_DIR=lrose-cyclone-$RELEASE_DATE.mac_osx" >> $BASH_ENV
            echo "export LROSE_INSTALL_DIR=/tmp/workarea/install/lrose" >> $BASH_ENV
            echo "export LROSE_ROOT_DIR=/tmp/workarea/install/lrose" >> $BASH_ENV

      # annoying ... returns error: Exited with code exit status 1                                  
      # which causes a failure, but it works.  So, we need to fix this ... 
#      - run: $LROSE_INSTALL_DIR/bin/fractl -h

      # create soft link for geographiclib since brew install didn't 
      - run: ln -s ../Cellar/geographiclib /usr/local/include/GeographicLib
      - run: ls -l /usr/local/include/geographiclib
      - run: ls -R /usr/local/include/GeographicLib

      - run:
          name: Build/install fractl  
          command: |
            echo "building fractl"
            cd workarea/$SOURCE_DIR/fractl
            cmake -DCMAKE_INSTALL_PREFIX=$LROSE_INSTALL_DIR .
            make
            make install 

      - run: $LROSE_INSTALL_DIR/bin/fractl  -h


  test-macos-lrose-cyclone-tgz-previous-old:
    macos:
      xcode: "10.3.0"

    working_directory: /tmp
    steps:
      - attach_workspace:
          at: /tmp/workspace_macos

#      - restore_cache:
#          key: macos-full-of-packages-cache1

        # needed for QJSEngine: qt5-qtdeclarative-devel
      - run:
          name: Install needed packages
          command: |
            brew install cmake
            brew install eigen
            brew install fftw flex
            brew install qt5 netcdf
            brew install szip pkg-config                                                            
            brew install geographiclib                                                     
            brew install armadillo                                                         
            brew install libomp libzip
            brew install rsync

      - run: brew cask install xquartz 

#      - save_cache:
#          key: macos-full-of-packages-cache1
#          paths:
#            - /usr/local

      - run: 
          name: Setup Environment Variables
          command: |
            echo "export RELEASE_DATE=$(date '+%Y%m%d')" >> $BASH_ENV
            echo "export PKG_CONFIG_PATH=/usr/local/opt/qt/lib/pkgconfig" >> $BASH_ENV

      - run: echo $HOME

      # mkdir: /usr/local/lrose: Permission denied
      # mkdir: /usr/local/lrose: No such file or directory
      - run:
          name: Add to Environment Variables
          command: |
            echo "export TARGET=lrose-cyclone-$RELEASE_DATE.src.mac_osx" >> $BASH_ENV
            echo "export SOURCE_DIR=lrose-cyclone-$RELEASE_DATE.mac_osx" >> $BASH_ENV
            echo "export LROSE_INSTALL_DIR=$HOME/lrose" >> $BASH_ENV
            echo "export LROSE_ROOT_DIR=$HOME/lrose" >> $BASH_ENV

            #echo "export LROSE_INSTALL_DIR=/usr/local/lrose" >> $BASH_ENV
            #echo "export LROSE_ROOT_DIR=/usr/local/lrose" >> $BASH_ENV

     # - restore_cache:
     #     key: v1-macos-with-lrose-core-installed-cache

      - run:
          name: extract lrose-cyclone tgz 
          command: |
            echo "extracting lrose-cyclone from tgz"
            mkdir workarea
            cd workarea
            tar xf /tmp/workspace_macos/releases/lrose-cyclone/osx/$TARGET.tgz

      #- run:
      #    name: build lrose-cyclone 
      #    command: |
      #      echo "building lrose-cyclone from tgz"
      - run: cd workarea; ls

      - run: cd workarea/$SOURCE_DIR; pwd

      - run: cd workarea/$SOURCE_DIR; ./configure --disable-dependency-tracking --prefix=$LROSE_INSTALL_DIR
      - run: cd workarea/$SOURCE_DIR; make install

     # - save_cache:
     #     key: v1-macos-with-lrose-core-installed-cache
     #     paths:
     #       - workarea
     #       - $LROSE_INSTALL_DIR


      - run: cd workarea/$SOURCE_DIR; rsync -av share $LROSE_INSTALL_DIR                                                                               

      - run:
          name: Build/install samurai  
          command: |
            echo "building samurai"
            cd workarea/$SOURCE_DIR/samurai
            cmake -DCMAKE_INSTALL_PREFIX=$LROSE_INSTALL_DIR .
            make 
            make install
                        
      - run:
          name: Add to Environment Variables for vortrac
          command: |
            echo "export RADX_INCLUDE=$LROSE_INSTALL_DIR/include" >> $BASH_ENV
            echo "export RADX_LIB=$LROSE_INSTALL_DIR/lib" >> $BASH_ENV
            echo "export ARMADILLO_INCLUDE=`pkg-config --variable=includedir armadillo`" >> $BASH_ENV
            echo "export ARMADILLO_LIB=`pkg-config --variable=libdir armadillo`" >> $BASH_ENV
            echo "export NETCDF_INCLUDE=`pkg-config --variable=includedir netcdf`" >> $BASH_ENV
            echo "export NETCDF_LIB=`pkg-config --variable=libdir netcdf`" >> $BASH_ENV
            echo "export QT5_BIN=/usr/lib64/qt5/bin" >> $BASH_ENV
            echo "export LD_LIBRARY_PATH=$LROSE_INSTALL_DIR/lib" >> $BASH_ENV
                                                              
      - run:
          name: Build/install vortrac  
          command: |
            echo "building vortrac"
            cd workarea/$SOURCE_DIR/vortrac/src
            $QT5_BIN/qmake .
            make
            cp vortrac $LROSE_INSTALL_DIR/bin
            cd ..
            rsync -av Resources $LROSE_INSTALL_DIR

      - run:
          name: Build Vortrac DMG
          command: |
            cd workarea/$SOURCE_DIR/vortrac
            mkdir -p deploy
            cd src
            # /usr/local/opt/qt/bin/qmake .
            # make

#
# this creates vortrac.app and vortrac.dmg files/directories in src dir
#
#        /usr/local/opt/qt/bin/macdeployqt vortrac.app -dmg -always-overwrite

#
# TODO: install setfileicon 
#
# 
# ./deploy/setfileicon ./src/images/vortrac.icns vortrac.app
# vortrac/Resources contains *.xml
# cp *.xml vortrac.app/Contents/Resources/
# rm -rf deploy/mac/vortrac.app/
# cp -R vortrac.app deploy/mac/
# cp VORTRAC_Users_Guide_v1.pdf deploy/mac/ 



      # TODO: create the DMG then, save as an artifact
      - run:
          name: Build HawkEye DMG
          command: |
            cd workarea/$SOURCE_DIR/apps/radar/src/HawkEye
            mkdir -p HawkEye.app/Contents/Frameworks
            cp /usr/lib/libexpat.1.dylib HawkEye.app/Contents/Frameworks/.
            cp /usr/lib/libbz2.1.0.dylib HawkEye.app/Contents/Frameworks/.
            cp /usr/lib/libz.1.dylib HawkEye.app/Contents/Frameworks/.
            cp /usr/lib/libSystem.B.dylib HawkEye.app/Contents/Frameworks/.
            mkdir -p HawkEye.app/Contents/MacOS/../share
            cp -r $LROSE_INSTALL_DIR/share/color_scales HawkEye.app/Contents/MacOS/../share/.
            macdeployqt HawkEye.app -dmg -always-overwrite
            hdiutil create -volname HawkEye_Installer -srcfolder /tmp/workarea/codebase/apps/radar/src/HawkEye/HawkEye.app -ov -format UDZO HawkEye.dmg
            cp HawkEye.dmg /tmp/workspace_macos/releases/lrose-cyclone


      # annoying ... returns error: Exited with code exit status 1                                  
      # which causes a failure, but it works.  So, we need to fix this ... 
#      - run: $LROSE_INSTALL_DIR/bin/fractl -h

      # create soft link for geographiclib since brew install didn't 
      - run: ln -s ../Cellar/geographiclib /usr/local/include/GeographicLib
      - run: ls -l /usr/local/include/geographiclib
      - run: ls -R /usr/local/include/GeographicLib

      - run:
          name: Build/install fractl  
          command: |
            echo "building fractl"
            cd workarea/$SOURCE_DIR/fractl
            cmake -DCMAKE_INSTALL_PREFIX=$LROSE_INSTALL_DIR .
            make
            make install 



      - run: $LROSE_INSTALL_DIR/bin/RadxPrint -h
      - run: $LROSE_INSTALL_DIR/bin/vortrac  -h
      - run: $LROSE_INSTALL_DIR/bin/samurai -h

      - store_artifacts:
          path: /tmp/workspace_macos/releases/lrose-cyclone


  package-linux-lrose-cyclone-tgz:
    executor: centos7-executor
    working_directory: /tmp
    steps:
      - attach_workspace:
          at: /tmp/workspace_linux
      - run:
          name: package lrose-cyclone packages ( .tgz )
          command: echo "package lrose-cyclone software"
      - run: echo "package lrose-cyclone .tgz ..."
      - run: ls -R
      - run: pwd   # /private/tmp
      - run: 
          name: Setup Environment Variables
          command: |
            echo "export RELEASE_DATE=$(date '+%Y%m%d')" >> $BASH_ENV
            echo "export RELEASE_DIR=/tmp/workpace_linux/releases" >> $BASH_ENV
            #echo "export LROSE_CORE_RELEASE_DATE=$RELEASE_DATE" >> $BASH_ENV
            echo "export TAG=lrose-cyclone-20190726" >> $BASH_ENV

      - run:
          name: Add to Environment Variables
          command: |        
            echo "export TARGET=lrose-cyclone-$RELEASE_DATE.src" >> $BASH_ENV

      - run: ls -R /tmp/workspace_linux
      - run: echo "RELEASE_DATE = " $RELEASE_DATE
      - run: echo "TARGET = " $TARGET
      - run: tar zxf /tmp/workspace_linux/releases/lrose-core/lrose-core-$RELEASE_DATE.src.tgz
      - run: ls

# Grab the color scales
      - run: git clone https://github.com/ncar/lrose-displays
      - run: rsync -av lrose-displays/color_scales lrose-core-$RELEASE_DATE/share 

# Grab addons from mmbell
      - run: cd lrose-core-$RELEASE_DATE; git clone https://github.com/mmbell/samurai
      # - run: cd lrose-core-$RELEASE_DATE/samurai; git checkout -q $TAG
      - run: cd lrose-core-$RELEASE_DATE/samurai; rm -rf .git

      - run: cd lrose-core-$RELEASE_DATE; git clone https://github.com/mmbell/fractl 
      # - run: cd lrose-core-$RELEASE_DATE/fractl; git checkout -q $TAG
      - run: cd lrose-core-$RELEASE_DATE/fractl; rm -rf .git

      - run: cd lrose-core-$RELEASE_DATE; git clone https://github.com/mmbell/vortrac 
      #- run: cd lrose-core-$RELEASE_DATE/vortrac; git checkout -q $TAG
      - run: cd lrose-core-$RELEASE_DATE/vortrac; rm -rf .git

        # make the cyclone tar file 
      - run: mv lrose-core-$RELEASE_DATE lrose-cyclone-$RELEASE_DATE
      - run: tar zcf $TARGET.tgz lrose-cyclone-$RELEASE_DATE
      - run: ls 

      - run: mkdir -p /tmp/workspace_linux/releases/lrose-cyclone

        # move the tar file into the persisted workspace 
      - run: mv $TARGET.tgz /tmp/workspace_linux/releases/lrose-cyclone

      - persist_to_workspace:
          root: workspace_linux
          paths: 
            - releases/lrose-cyclone

      - store_artifacts:
          path: /tmp/workspace_linux/releases/lrose-cyclone


  test-linux-lrose-cyclone-tgz:
    executor: centos7-executor

    working_directory: /tmp
    steps:
      - attach_workspace:
          at: /tmp/workspace_linux

      # done in centos7-executor container
        # needed for QJSEngine
      # - run: yum install -y qt5-qtdeclarative-devel
        # needed for fractl, etc.
      #- run: yum install -y cmake
      #- run: yum install -y cmake3

      - run: mkdir workarea

      #- run:
      #    name: Install lrose-netcdf (provides netcdfcpp.h needed by fractl)
      #    command: |
      #      cd workarea
      #      git clone https://github.com/NCAR/lrose-netcdf
      #      cd lrose-netcdf
      #      ./build_and_install_netcdf -x /usr/local/lrose
      #      ls /usr/local/lrose/include/net*
      # - run: yum install -y netcdf-devel


      - run: 
          name: Setup Environment Variables
          command: |
            echo "export RELEASE_DATE=$(date '+%Y%m%d')" >> $BASH_ENV
            echo "export PKG_CONFIG_PATH=/usr/local/opt/qt/lib/pkgconfig" >> $BASH_ENV

      - run:
          name: Add to Environment Variables
          command: |
            echo "export TARGET=lrose-cyclone-$RELEASE_DATE" >> $BASH_ENV
            echo "export LROSE_INSTALL_DIR=/usr/local/lrose" >> $BASH_ENV
            echo "export LROSE_ROOT_DIR=/usr/local/lrose" >> $BASH_ENV
            echo "export NETCDF_INCLUDES=/usr/include" >> $BASH_ENV 
            echo "export NETCDF_LIBRARIES=/usr/lib" >> $BASH_ENV 

# TODO: may need these ...
#   81  export LROSE_LIBRARIES=/usr/local/lrose/lib
#   82  export LROSE_INCLUDE_DIRS=/usr/local/lrose/include
#   77  export LROSE_LIB_DIR=/usr/local/lrose/lib

      - run:
          name: extract lrose-cyclone tgz 
          command: |
            echo "extracting lrose-cyclone from tgz"
            cd workarea; tar xf /tmp/workspace_linux/releases/lrose-cyclone/$TARGET.src.tgz
            pwd
            ls
      - run:
          name: build lrose-cyclone 
          command: |
            echo "building lrose-cyclone from tgz"
            cd workarea; cd $TARGET; ./configure --disable-dependency-tracking --prefix=$LROSE_INSTALL_DIR
            make install

      #- run:
      #    name: install locate tool
      #    command: |
      #
      #      locate hdf5
    
      # TODO:
      # - run: rsync -av share $LROSE_INSTALL_DIR                                        
      # sending incremental file list
      # rsync: link_stat "/tmp/share" failed: No such file or directory (2)
      # Q: Are the color scales included in the tar file?
        
      # done in cento7-executor container    
      # - run: yum install -y libzip-devel
      # - run: yum install -y GeographicLib-devel        
      # - run: yum install -y eigen3-devel
      # - run: yum install -y armadillo-devel
      # - run: yum install -y openmpi-devel


      #- run: ls -R /usr/local/lrose/include
      # - run: echo $NETCDF_INCLUDES

      - run:
          name: Build/install fractl  
          command: |
            echo "building fractl"
            cd workarea/$TARGET/fractl
            cmake -DCMAKE_INSTALL_PREFIX=$LROSE_INSTALL_DIR .
            make
            make install   # without CMAKE_INSTALL_PREFIX installs in /usr/local/bin/fractl

   #   - run: cd fractl                                                                
   # # ENV['LROSE_ROOT_DIR'] = prefix                                                     
   # system "cmake", "."                                                                
   # system "make"                                                                      
   # bin.install 'build/release/bin/fractl'                                             
   # Dir.chdir("..")                                                                    
                                                                                       
    # Build/install samurai                                                            
#    Dir.chdir("samurai")                                                               
#    ENV['LROSE_ROOT_DIR'] = prefix                                                     
#    system "cmake", "."                                                                
#    system "make", "VERBOSE=1"                                                         
#    bin.install 'build/release/bin/samurai'                                            
#    lib.install 'build/release/lib/libsamurai.a'                                       
#    lib.install 'build/release/lib/libsamurai.dylib'                                   
#    include.install 'src/samurai.h'                                                    
#    Dir.chdir("..")                                                                    

      - run:
          name: Build/install samurai  
          command: |
            echo "building samurai"
            cd workarea/$TARGET/samurai
            /usr/bin/cmake3 -DCMAKE_INSTALL_PREFIX=$LROSE_INSTALL_DIR .
            make   # VERBOSE=1
            make install   # without CMAKE_INSTALL_PREFIX installs in /usr/local/bin/fractl
          

      # INCLUDEPATH += $$(RADX_INCLUDE) $$(NETCDF_INCLUDE) $$(ARMADILLO_INCLUDE) /usr/local/include
      #         QMAKE_LIBDIR += $$(RADX_LIB) $$(NETCDF_LIB) $$(ARMADILLO_LIB)
      # QMAKE_LFLAGS += -Wl,-rpath,$$(NETCDF_LIB)
      #
      - run:
          name: Add to Environment Variables for vortrac
          command: |
            echo "export RADX_INCLUDE=$LROSE_INSTALL_DIR/include" >> $BASH_ENV
            echo "export RADX_LIB=$LROSE_INSTALL_DIR/lib" >> $BASH_ENV
            echo "export ARMADILLO_INCLUDE=`pkg-config --variable=includedir armadillo`" >> $BASH_ENV
            echo "export ARMADILLO_LIB=`pkg-config --variable=libdir armadillo`" >> $BASH_ENV
            echo "export NETCDF_INCLUDE=`pkg-config --variable=includedir netcdf`" >> $BASH_ENV 
            echo "export NETCDF_LIB=`pkg-config --variable=libdir netcdf`" >> $BASH_ENV 
            echo "export QT5_BIN=/usr/lib64/qt5/bin" >> $BASH_ENV
            echo "export LD_LIBRARY_PATH=/usr/local/lrose/lib" >> $BASH_ENV  
       # LD_LIBRARY_PATH needed by vortrac
       # /usr/local/lrose/bin/vortrac: error while loading shared libraries: libRadx.so.0: cannot open shared object file: No such file or directory

      
      #- run:
      #    name: fetch build_changes branch of vortrac  
      #    command: |
      #      echo "cloning branch"
      #      cd workarea/$TARGET
      #      mv vortrac vortrac_master_branch
      #      git clone https://github.com/mmbell/vortrac --branch build_changes --single-branch
      #      ls -R vortrac

      - run:
          name: Build/install vortrac  
          command: |
            echo "building vortrac"
            cd workarea/$TARGET/vortrac/src
            $QT5_BIN/qmake .
            make
            cp vortrac $LROSE_INSTALL_DIR/bin
            cd ..
            rsync -av Resources $LROSE_INSTALL_DIR
                
                                                                                       
    # Build/install vortrac                                                            
    #Dir.chdir("vortrac/src")                                                          
    #ENV['LROSE_ROOT_DIR'] = prefix                                                    
    #ENV['NETCDF_INCLUDE'] = "#{prefix}/include"                                       
    #ENV['NETCDF_LIB'] = "#{prefix}/lib"                                               
    #system "qmake", "."                                                               
    #system "make"                                                                     
    #bin.install 'vortrac.app/Contents/MacOS/vortrac'                                  
    #Dir.chdir("..")                                                                   
    #system "rsync", "-av", "Resources", "#{prefix}"                                   
    #Dir.chdir("..")                
      
      - run: $LROSE_INSTALL_DIR/bin/RadxPrint -h
      - run: $LROSE_INSTALL_DIR/bin/vortrac  -h
      - run: $LROSE_INSTALL_DIR/bin/samurai -h

      # annoying ... returns error: Exited with code exit status 1 
      # which causes a failure, but it works.  So, we need to fix this ...
      - run: $LROSE_INSTALL_DIR/bin/fractl -h

      - run: workarea/$TARGET/vortrac/src/vortrac -h

#       - run: fractl -h
      #- run: RadxPrint -h


  workspace-producer:
    executor: my-executor
    working_directory: /tmp
    steps:
      - run: mkdir -p workspace_macos/releases/lrose-core/osx
      - run: echo "this is really annoying" > workspace_macos/releases/lrose-core/osx/somejunk
      - persist_to_workspace:
          root: workspace_macos
          paths:
#            - releases/*
            - releases/lrose-core/osx

  workspace-consumer:
    executor: my-executor
    working_directory: /tmp
    steps:
      - attach_workspace:
          at: /tmp/workspace_macos
      - run: cat /tmp/workspace_macos/releases/lrose-core/osx/somejunk
      - run: awk '{print $1;}' /tmp/workspace_macos/releases/lrose-cyclone/osx/somejunk
      - run: 
          name: Add to Environment Variables
          command: |
            echo "export CHECKSUM32=`awk '{print $1;}' /tmp/workspace_macos/releases/lrose-cyclone/osx/somejunk`" >> $BASH_ENV
            echo "export checksum=`cat /tmp/workspace_macos/releases/lrose-cyclone/osx/somejunk`'" >> $BASH_ENV
      - run: echo $checksum
      - run: echo $CHECKSUM32

  package-lrose-cyclone:
    macos:
      xcode: "10.1.0"
    working_directory: /tmp

    steps:
      - attach_workspace:
          at: /tmp/workspace_macos
      - run:
          name: package lrose-cyclone mac specific apps ( .app )
          command: echo "building HawkEye.app"
      - run: echo "building HawkEye.app"

#      - run: ls -R
#       - run: brew install ??? -y qt5-qtdeclarative-devel
      # - run: cd workspace_macos; git clone https://github.com/NCAR/release-tools
#      - run: pwd   # /private/tmp
      #- run: ls workspace_macos
      #- run: cd release-tools/cyclone


#      - persist_to_workspace:
#          root: workspace_macos
#          paths: 
#            - releases
#      - store_artifacts:
#          path: /tmp/workspace_macos/releases/lrose-core/osx
          # should store  lrose-core-YYYYMMDD.mac_osx.tgz and lrose-core.rb
          # Ah, but don't we want lrose-core.src.osx.tgz?

 
 
#  build-docker-image-lrose-cyclone:
#    macos:
#      xcode: "10.1.0"
#    working_directory: /tmp
#    steps:
      # - run:
      # - store_artifacts:
      #     path: /tmp/docker-image
      #     destination: lrose-cyclone-docker.x


  build-brew-formula-lrose-cyclone:
    macos:
      xcode: "10.1.0"
    working_directory: /tmp
    steps:
      - attach_workspace:
          at: /tmp/workspace_macos
      - run:
          name: build brew formula lrose-cyclone.rb 
          command: echo "building brew formula for MacOS-Cyclone"
      - run: brew install wget
      - run: brew cask install xquartz 
        # should this be from a workspace? 
      # - run: wget https://github.com/NCAR/lrose-release-test/releases/download/testing/lrose-cyclone.rb
      # - run: brew install lrose-cyclone.rb
      - run: git clone https://github.com/nsf-lrose/release-tools
      # NOTE: 1 on xxxx.src.mac_osx.tgz <======
      - run: release-tools/cyclone/homebrew-scripts/make-lrose-cyclone.sh
      - persist_to_workspace:
          root: workspace
          paths: 
            - output
      - store_artifacts:
          path: /tmp/brew-formula
          destination: lrose-cyclone.rb
 
 
  buildCentos-Cyclone-vortrac-build-changes:
    executor: my-executor
    steps:
      - run: date
      ## - checkout
      - run: yum install -y qt5-qtdeclarative-devel
      - run: yum install -y armadillo-devel
      - run: yum install -y cmake
      - run: yum install -y cmake3
      - run: export PKG_CONFIG_PATH=/usr/local/opt/qt/lib/pkgconfig
      - run: echo "building lrose-cyclone ..."
      - run: mkdir -p workspace
      - run: cd workspace; wget https://github.com/NCAR/lrose-release-test/releases/download/testing/lrose-cyclone-20190910-vortrac-build-changes.tgz
      - run: cd workspace; tar zxf lrose-cyclone-20190910-vortrac-build-changes.tgz
      - run: cd workspace/lrose-cyclone-20190801.src/codebase
      - run: pwd
      - run: ls workspace
      ## build lrose-core
      - run: cd workspace/lrose-cyclone-20190801.src/codebase; ./configure --disable-dependency-tracking --prefix /usr/local/lrose
      - run: cd workspace/lrose-cyclone-20190801.src/codebase; make install
      - run: rsync -av workspace/lrose-cyclone-20190801.src/share /usr/local/lrose                

      - run: export LROSE_ROOT_DIR=/usr/local/lrose

      ## build vortrac 
      - run: cd workspace/lrose-cyclone-20190801.src/vortrac/src; /usr/bin/qmake-qt5 .
      - run: cd workspace/lrose-cyclone-20190801.src/vortrac/src; make
      - run: cd workspace/lrose-cyclone-20190801.src/vortrac/src/vortrac.app/Contents/MacOS/vortrac -h

      ## build fractl
      - run: cd workspace/lrose-cyclone-20190801.src/fractl; /usr/bin/cmake3 .
      - run: cd workspace/lrose-cyclone-20190801.src/fractl; make
      - run: cd workspace/lrose-cyclone-20190801.src/fractl/build/release/bin/fractl -h

      ## build samurai
      - run: cd workspace/lrose-cyclone-20190801.src/samurai; /usr/bin/cmake3 .
      - run: cd workspace/lrose-cyclone-20190801.src/samurai; make
      - run: cd workspace/lrose-cyclone-20190801.src/samurai/build/release/bin/samurai -h
      ## maybe move the libs, executable, and includes into place?



      - run: ls -R /usr/local/lrose
      - run: /usr/local/lrose/bin/RadxPrint -h
      - run: /usr/local/lrose/bin/samurai -h
      - run: /usr/local/lrose/bin/fractl -h
      - run: /usr/local/lrose/bin/vortrac -h


#  working here ...
#  buildntest-osx-lrose-cyclone-tgz:
#    macos:
#  ...
#    attach_workspace:
#           - package-lrose-cyclone-tgz
#
#    - run: tar xvf lrose-cyclone-xxxxxx.mac_osx.tgz
#    - run: build libs
#    - run: build apps
#    - persist_workspace:
#        - path: entire_build and install area

#  package-osx-lrose-cyclone-apps:
#    macos:
 #...
#    attach_workspace:
#    - path: entire_build and install area
#           - buildntest-osx-lrose-cyclone-tgz
#    - run: cd codebase/apps/radar/src/HawkEye; make hawkeye_app_nosign
#    - run: cd vortrac; make app?
#    - persist_artifacts:
#      - path: HawkEye.app
#    - persist_artifacts:
#      - path: Vortrac.app


  # build from a tagged version of lrose-core
  build-cyclone-docker-tagged-version:
    ## just use a generic ubuntu. The Dockerfile installs the dependent packages.
    executor: ubuntu-executor
    steps:
      - run: date
      ## - checkout
      - run: echo "building lrose-cyclone docker image ..."
      - run: mkdir -p workspace
      - run: cd workspace; git clone https://github.com/nsf-lrose/release-tools
      - run: pwd
      - run: ls workspace
      - run: cd workspace/git/release-tools/cyclone/lrose-docker-scripts; ./build.sh --releaseDate lrose-cyclone-20190801
      - run: |
          if [[ `echo "y" | ./workspace/lrose-core/build/checkout_and_build_auto.py --useSystemNetcdf --package=lrose-blaze --prefix /usr/local/lrose` == 0 ]]; then
              echo "It worked"
          else 
              tail -n 100 /tmp/lrose_build/logs/*
          fi
               
      - run: ls -R /usr/local/lrose
      - run: /usr/local/lrose/bin/RadxPrint -h

  # build from the head of lrose-core
  package-cyclone-docker:
    ## just use a generic ubuntu. The Dockerfile installs the dependent packages.
    # executor: ubuntu-executor
    machine:
      docker_layer_caching: true

    steps:
      - run: date
      - run:
          name: Set Environment Variables
          command: |
            echo "export RELEASE_DATE=$(date '+%Y%m%d')" >> $BASH_ENV

      ## - checkout
      - run: echo "building lrose-cyclone docker image ..."
      - run: mkdir -p workspace
      - run: cd workspace; git clone https://github.com/nsf-lrose/release-tools
      - run: pwd
      - run: ls workspace

      - run:
          name: Build the container
          command: |
            cd workspace/release-tools/cyclone/lrose-docker-scripts
            ./build_latest.sh -u 18.10

      - run: ls -R
      - run: which docker
      - run: docker images
      - run: mkdir -p workspace/deploy/docker-images

      - run:
          name: Set Docker Image Name
          command: |
            echo "export IMAGE_NAME=nsflrose/lrose-cyclone:$RELEASE_DATE" >> $BASH_ENV

      - run: echo $IMAGE_NAME
      
#      - run: docker save -o /tmp/workspace/deploy/docker-images nsflrose/lrose-cyclone:16.04  
      - run: docker save -o workspace/deploy/docker-images/nsflrose.tar $IMAGE_NAME

#"nsflrose/lrose-cyclone:${RELEASE_DATE}"

      - persist_to_workspace:
          root: workspace
          paths: deploy/docker-images
      - store_artifacts:
          path: workspace/deploy/docker-images


  test-cyclone-docker:
    ## just use a generic ubuntu. The Dockerfile installs the dependent packages.
    # executor: ubuntu-executor
    machine: true
#      docker_layer_caching: true

    working_directory: /tmp
    steps:
      - attach_workspace:
          at: /tmp/workspace

#          root: workspace
#          paths: deploy/docker-images

      - run: date
      - run:
          name: Set Environment Variables
          command: |
            echo "export RELEASE_DATE=$(date '+%Y%m%d')" >> $BASH_ENV

      - run: 
          name: load docker image 
          command: |
            docker load -i /tmp/workspace/deploy/docker-images/nsflrose.tar  

      - run: docker images

      - run: cd workspace; git clone https://github.com/nsf-lrose/release-tools
      - run: pwd
      - run: ls workspace

      - run:
          name: Run tests in the container
          command: |
            cd workspace/release-tools/cyclone/lrose-docker-scripts
            docker run  nsflrose/lrose-cyclone:$RELEASE_DATE RadxPrint -h
            docker run  nsflrose/lrose-cyclone:$RELEASE_DATE fractl -h
            docker run  nsflrose/lrose-cyclone:$RELEASE_DATE samurai -h
            docker run  nsflrose/lrose-cyclone:$RELEASE_DATE vortrac -h
  

  test_1:
    macos:
      xcode: "11.2.1"

    working_directory: /tmp
    steps:
      - run:
          name: Set Environment Variables for MacOS Installer
          command: |
            echo "export INSTALL_BASE_DIR=/usr/local" >> $BASH_ENV
            echo "export ARCHIVE_FILENAME=LROSE-Cyclone_Installer.pkg" >> $BASH_ENV
            echo "export PACKAGE_NAME=LROSE-Core.pkg" >> $BASH_ENV
            echo "export SOURCE_BASE_DIR=/usr/local" >> $BASH_ENV
            echo "export STAGING=/usr/local" >> $BASH_ENV

# ---------- for Elle release ----------


  # NOTE: in order to build the .src.mac_osx.tgz file, we need to 
  #       build it on a linux platform using automake and libtool
  #  TODO: need to add tag to clone command
  package-lrose-core-tag-tgz:
    executor: centos7-executor
    working_directory: /tmp
    steps:
      - run:
          name: build MacOS tgz
          command: echo "build MacOS source tgz"
      - run: echo "building lrose-core ..."
      # - run: yum install -y qt5-qtdeclarative-devel  ---> done in centos7-executor container
      - run: mkdir -p workspace_macos
      - run: cd workspace_macos; git clone https://github.com/NCAR/lrose-core
      - run: pwd
      - run: ls workspace_macos
      #- run: alias qmake-qt5='qmake'
      - run: 
          name: Setup Qt5 variables
          command: |
            echo "export PKG_CONFIG_PATH=/usr/lib64/pkgconfig" >> $BASH_ENV
            echo "PKG_CONFIG_PATH = $PKG_CONFIG_PATH" 
            echo "export QT5_BINDIR=`pkg-config --variable=bindir Qt5`"  >> $BASH_ENV
            echo "QT5_BINDIR = $QT5_BINDIR "
      - run:
          name: Setup path variable
          command: |
            echo "export PATH=$QT5_BINDIR:$PATH" >> $BASH_ENV
            echo "PATH = $PATH"
        
        # Remember, the variables are not available until the command is finished. Grrh!
      - run:
          name: Check path variables
          command: |
            echo "PKG_CONFIG_PATH = $PKG_CONFIG_PATH"
            echo "QT5_BINDIR = $QT5_BINDIR "
            echo "PATH = $PATH"

      - run: 
          name: Setup Environment Variables
          command: |
            echo "export RELEASE_DATE=$(date '+%Y%m%d')" >> $BASH_ENV
      - run: echo "RELEASE_DATE = " ${RELEASE_DATE}
        # package for macos
      - run: ./workspace_macos/lrose-core/build/create_src_tar.py --force --releaseDir=/tmp/workspace_macos/releases --package=lrose-core --osx

      - run: ls /tmp/workspace_macos/releases/lrose-core/osx
      - run: cd /tmp/workspace_macos/releases/lrose-core/osx; mv lrose-core-$RELEASE_DATE.mac_osx.tgz lrose-core-$RELEASE_DATE.src.mac_osx.tgz
        # package for linux 
      - run: ./workspace_macos/lrose-core/build/create_src_tar.py --force --releaseDir=/tmp/workspace_linux/releases --package=lrose-core 
      - run: cd /tmp/workspace_linux/releases/lrose-core; mv lrose-core-$RELEASE_DATE.tgz lrose-core-$RELEASE_DATE.src.tgz

      - run: ls /tmp/workspace_linux/releases/lrose-core

      - persist_to_workspace:
          root: workspace_macos
          paths: 
            - releases/lrose-core/osx
      - persist_to_workspace:
          root: workspace_linux
          paths: 
            - releases/lrose-core
      - store_artifacts:
          path: /tmp/workspace_macos/releases/lrose-core/osx
      - store_artifacts:   
          path: /tmp/workspace_linux/releases/lrose-core
          # should store  lrose-core-YYYYMMDD.mac_osx.tgz and lrose-core.rb
          # Ah, but don't we want lrose-core.src.mac_osx.tgz?



  package-linux-lrose-elle-tgz:
    executor: centos7-executor
    working_directory: /tmp
    steps:
      - attach_workspace:
          at: /tmp/workspace_linux
      - run:
          name: package lrose-elle packages ( .tgz )
          command: echo "package lrose-elle software"
      - run: echo "package lrose-elle .tgz ..."
      - run: ls -R
      - run: pwd   # /private/tmp
      - run: 
          name: Setup Environment Variables
          command: |
            echo "export RELEASE_DATE=$(date '+%Y%m%d')" >> $BASH_ENV
            echo "export RELEASE_DIR=/tmp/workpace_linux/releases" >> $BASH_ENV
            # echo "export TAG=lrose-elle-20200601" >> $BASH_ENV

      - run:
          name: Add to Environment Variables
          command: |        
            echo "export TARGET=lrose-elle-$RELEASE_DATE.src" >> $BASH_ENV

      - run: ls -R /tmp/workspace_linux
      - run: echo "RELEASE_DATE = " $RELEASE_DATE
      - run: echo "TARGET = " $TARGET
      - run: tar zxf /tmp/workspace_linux/releases/lrose-core/lrose-core-$RELEASE_DATE.src.tgz
      - run: ls

# Grab the color scales
      - run: git clone https://github.com/ncar/lrose-displays
      - run: rsync -av lrose-displays/color_scales lrose-core-$RELEASE_DATE/share 

# Grab addons from mmbell
      - run: cd lrose-core-$RELEASE_DATE; git clone https://github.com/mmbell/samurai
      # - run: cd lrose-core-$RELEASE_DATE/samurai; git checkout -q $TAG
      - run: cd lrose-core-$RELEASE_DATE/samurai; rm -rf .git

      - run: cd lrose-core-$RELEASE_DATE; git clone https://github.com/mmbell/fractl 
      # - run: cd lrose-core-$RELEASE_DATE/fractl; git checkout -q $TAG
      - run: cd lrose-core-$RELEASE_DATE/fractl; rm -rf .git

      - run: cd lrose-core-$RELEASE_DATE; git clone https://github.com/mmbell/vortrac 
      #- run: cd lrose-core-$RELEASE_DATE/vortrac; git checkout -q $TAG
      - run: cd lrose-core-$RELEASE_DATE/vortrac; rm -rf .git

        # make the elle tar file 
      - run: mv lrose-core-$RELEASE_DATE lrose-elle-$RELEASE_DATE
      - run: tar zcf $TARGET.tgz lrose-elle-$RELEASE_DATE
      - run: ls 

      - run: mkdir -p /tmp/workspace_linux/releases/lrose-elle

        # move the tar file into the persisted workspace 
      - run: mv $TARGET.tgz /tmp/workspace_linux/releases/lrose-elle

      - persist_to_workspace:
          root: workspace_linux
          paths: 
            - releases/lrose-elle

      - store_artifacts:
          path: /tmp/workspace_linux/releases/lrose-elle


  test-linux-lrose-elle-tgz:
    executor: centos7-executor

    working_directory: /tmp
    steps:
      - attach_workspace:
          at: /tmp/workspace_linux

      - run: mkdir workarea

      - run: 
          name: Setup Environment Variables
          command: |
            echo "export RELEASE_DATE=$(date '+%Y%m%d')" >> $BASH_ENV
            echo "export PKG_CONFIG_PATH=/usr/local/opt/qt/lib/pkgconfig" >> $BASH_ENV

      - run:
          name: Add to Environment Variables
          command: |
            echo "export TARGET=lrose-elle-$RELEASE_DATE" >> $BASH_ENV
            echo "export LROSE_INSTALL_DIR=/usr/local/lrose" >> $BASH_ENV
            echo "export LROSE_ROOT_DIR=/usr/local/lrose" >> $BASH_ENV
            echo "export NETCDF_INCLUDES=/usr/include" >> $BASH_ENV 
            echo "export NETCDF_LIBRARIES=/usr/lib" >> $BASH_ENV 

      - run:
          name: extract lrose-elle tgz 
          command: |
            echo "extracting lrose-elle from tgz"
            cd workarea; tar xf /tmp/workspace_linux/releases/lrose-elle/$TARGET.src.tgz
            pwd
            ls
      - run:
          name: build lrose-elle
          command: |
            echo "building lrose-elle from tgz"
            cd workarea; cd $TARGET; ./configure --disable-dependency-tracking --prefix=$LROSE_INSTALL_DIR
            make install

      - run:
          name: Build/install fractl  
          command: |
            echo "building fractl"
            cd workarea/$TARGET/fractl
            cmake -DCMAKE_INSTALL_PREFIX=$LROSE_INSTALL_DIR .
            make
            make install   # without CMAKE_INSTALL_PREFIX installs in /usr/local/bin/fractl

      - run:
          name: Build/install samurai  
          command: |
            echo "building samurai"
            cd workarea/$TARGET/samurai
            /usr/bin/cmake3 -DCMAKE_INSTALL_PREFIX=$LROSE_INSTALL_DIR .
            make   # VERBOSE=1
            make install   # without CMAKE_INSTALL_PREFIX installs in /usr/local/bin/fractl
          
      - run: $LROSE_INSTALL_DIR/bin/RadxPrint -h
      - run: $LROSE_INSTALL_DIR/bin/samurai -h

      # annoying ... returns error: Exited with code exit status 1 
      # which causes a failure, but it works.  So, we need to fix this ...
      - run: $LROSE_INSTALL_DIR/bin/fractl -h

      - run:
          name: Add to Environment Variables for vortrac
          command: |
            echo "export RADX_INCLUDE=$LROSE_INSTALL_DIR/include" >> $BASH_ENV
            echo "export RADX_LIB=$LROSE_INSTALL_DIR/lib" >> $BASH_ENV
            echo "export ARMADILLO_INCLUDE=`pkg-config --variable=includedir armadillo`" >> $BASH_ENV
            echo "export ARMADILLO_LIB=`pkg-config --variable=libdir armadillo`" >> $BASH_ENV
            echo "export NETCDF_INCLUDE=`pkg-config --variable=includedir netcdf`" >> $BASH_ENV 
            echo "export NETCDF_LIB=`pkg-config --variable=libdir netcdf`" >> $BASH_ENV 
            echo "export QT5_BIN=/usr/lib64/qt5/bin" >> $BASH_ENV
            echo "export LD_LIBRARY_PATH=/usr/local/lrose/lib" >> $BASH_ENV  

      - run:
          name: Build/install vortrac  
          command: |
            echo "building vortrac"
            cd workarea/$TARGET/vortrac/src
            $QT5_BIN/qmake .
            make
            cp vortrac $LROSE_INSTALL_DIR/bin
            cd ..
            rsync -av Resources $LROSE_INSTALL_DIR
                                                                                            
      - run: $LROSE_INSTALL_DIR/bin/vortrac  -h
      - run: workarea/$TARGET/vortrac/src/vortrac -h

  # we are just packaging the tgz file; no building, so we don't need macos machine
  package-macos-lrose-elle-tgz:
    executor: centos7-executor
    working_directory: /tmp
    steps:
      - attach_workspace:
          at: /tmp/workspace_macos
      - run:
          name: package lrose-elle packages (.tgz)
          command: echo "package lrose-elle software"
      - run: ls -R

      # - run: cd workspace_macos; git clone https://github.com/NCAR/release-tools
      - run: pwd   # /private/tmp
      - run: 
          name: Setup Environment Variables
          command: |
            echo "export RELEASE_DATE=$(date '+%Y%m%d')" >> $BASH_ENV
            echo "export RELEASE_DIR=/tmp/workpace_macos/releases" >> $BASH_ENV

      - run:
          name: Add to Environment Variables
          command: |        
            echo "export TARGET=lrose-elle-$RELEASE_DATE.src.mac_osx" >> $BASH_ENV

      - run: ls -R /tmp/workspace_macos
      - run: echo "RELEASE_DATE = " $RELEASE_DATE
      - run: echo "TARGET = " $TARGET
      - run: tar zxf /tmp/workspace_macos/releases/lrose-core/osx/lrose-core-$RELEASE_DATE.src.mac_osx.tgz
      - run: ls

      # Grab the color scales
      - run: git clone https://github.com/ncar/lrose-displays
      - run: rsync -av lrose-displays/color_scales lrose-core-$RELEASE_DATE.mac_osx/share 

      # Grab addons from mmbell
      - run: cd lrose-core-$RELEASE_DATE.mac_osx; git clone https://github.com/mmbell/samurai
      - run: cd lrose-core-$RELEASE_DATE.mac_osx/samurai; rm -rf .git

      - run: cd lrose-core-$RELEASE_DATE.mac_osx; git clone https://github.com/mmbell/fractl
      - run: cd lrose-core-$RELEASE_DATE.mac_osx/fractl; rm -rf .git

      - run: cd lrose-core-$RELEASE_DATE.mac_osx; git clone https://github.com/mmbell/vortrac
      - run: cd lrose-core-$RELEASE_DATE.mac_osx/vortrac; rm -rf .git

        # make the elle tar file 
      - run: mv lrose-core-$RELEASE_DATE.mac_osx lrose-elle-$RELEASE_DATE.mac_osx
      - run: tar zcf $TARGET.tgz lrose-elle-$RELEASE_DATE.mac_osx
      - run: ls 

      - run: mkdir -p /tmp/workspace_macos/releases/lrose-elle/osx

        # generate a checksum for the brew formula; add it to the persisted workspace
      - run: sha256sum $TARGET.tgz > /tmp/workspace_macos/releases/lrose-elle/osx/checksum
      - run: cat /tmp/workspace_macos/releases/lrose-elle/osx/checksum

        # move the tar file into the persisted workspace 
      - run: mv $TARGET.tgz /tmp/workspace_macos/releases/lrose-elle/osx

      - persist_to_workspace:
          root: workspace_macos
          paths: 
            - releases/lrose-elle/osx

      - store_artifacts:
          path: /tmp/workspace_macos/releases/lrose-elle


  test-macos-lrose-elle-tgz-latest:
    macos:
      xcode: "11.2.1"

    working_directory: /tmp
    steps:
      - attach_workspace:
          at: /tmp/workspace_macos

        # needed for QJSEngine: qt5-qtdeclarative-devel
      - run:
          name: Install needed packages
          command: |
            git -C /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core fetch --unshallow
            git -C /usr/local/Homebrew/Library/Taps/homebrew/homebrew-cask fetch --unshallow
            brew install cmake
            brew install eigen
            brew install fftw flex
            brew install qt5 netcdf
            brew install szip pkg-config                                                            
            brew install geographiclib                                                     
            brew install armadillo                                                         
            brew install libomp libzip
            brew install rsync

#      - run: brew cask install xquartz 

#      brew cask install xquartz
#Error: 
#  homebrew-core is a shallow clone.
#  homebrew-cask is a shallow clone.
#To `brew update`, first run:
#  git -C /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core fetch --unshallow
#  git -C /usr/local/Homebrew/Library/Taps/homebrew/homebrew-cask fetch --unshallow
#This restriction has been made on GitHub's request because updating shallow
#clones is an extremely expensive operation due to the tree layout and traffic of
#Homebrew/homebrew-core and Homebrew/homebrew-cask. We don't do this for you
#automatically to avoid repeatedly performing an expensive unshallow operation in
#CI systems (which should instead be fixed to not use shallow clones). Sorry for
#the inconvenience!
#Error: Calling brew cask install is disabled! Use brew install [--cask] instead.
      - run: brew install --cask xquartz

      - run: 
          name: Setup Environment Variables
          command: |
            echo "export RELEASE_DATE=$(date '+%Y%m%d')" >> $BASH_ENV
            echo "export PKG_CONFIG_PATH=/usr/local/opt/qt/lib/pkgconfig" >> $BASH_ENV
            echo "export PATH=/usr/local/opt/qt/bin:$PATH" >> $BASH_ENV

      - run: echo $HOME

      - run:
          name: Add to Environment Variables
          command: |
            echo "export TARGET=lrose-elle-$RELEASE_DATE.src.mac_osx" >> $BASH_ENV
            echo "export SOURCE_DIR=lrose-elle-$RELEASE_DATE.mac_osx" >> $BASH_ENV
            echo "export LROSE_INSTALL_DIR=/tmp/workarea/install/lrose" >> $BASH_ENV
            echo "export LROSE_ROOT_DIR=/tmp/workarea/install/lrose" >> $BASH_ENV
            echo "export PATH=/usr/local/opt/qt/bin:$PATH" >> $BASH_ENV
            echo "export FCFLAGS='-w -fallow-argument-mismatch -O2'" >> $BASH_ENV
            echo "export FFLAGS='-w -fallow-argument-mismatch -O2'" >> $BASH_ENV
            # samurai needs LROSE_ROOT_DIR
            #echo "export LROSE_INSTALL_DIR=/usr/local/lrose" >> $BASH_ENV
            #echo "export LROSE_ROOT_DIR=/usr/local/lrose" >> $BASH_ENV

      - run:
          name: extract lrose-elle tgz 
          command: |
            echo "extracting lrose-elle from tgz"
            mkdir workarea
            cd workarea
            tar xf /tmp/workspace_macos/releases/lrose-elle/osx/$TARGET.tgz

      - run: cd workarea; ls

      - run: cd workarea/$SOURCE_DIR; pwd

      - run: cd workarea/$SOURCE_DIR; ./configure --disable-dependency-tracking --prefix=$LROSE_INSTALL_DIR
      - run: cd workarea/$SOURCE_DIR; make install

      - run: cd workarea/$SOURCE_DIR; rsync -av share $LROSE_INSTALL_DIR                                                                               
      - run:
          name: Install needed packages
          command: |
            brew install cmake
            brew install eigen
            brew install libomp libzip
            brew install llvm

      # don't exit if one of the commands fails 
      # - run: set +e

      - run:
          name: Set Environment Variables
          command: |
            echo "export RADX_INCLUDE=$LROSE_INSTALL_DIR/include" >> $BASH_ENV
            echo "export RADX_LIB=$LROSE_INSTALL_DIR/lib" >> $BASH_ENV
            echo "export ARMADILLO_INCLUDE=`pkg-config --variable=includedir armadillo`" >> $BASH_ENV
            echo "export ARMADILLO_LIB=`pkg-config --variable=libdir armadillo`" >> $BASH_ENV
            echo "export NETCDF_INCLUDE=/usr/local/include" >> $BASH_ENV
            echo "export NETCDF_LIB=/usr/local/lib" >> $BASH_ENV
            echo "export LD_LIBRARY_PATH=$LROSE_INSTALL_DIR/lib" >> $BASH_ENV

      - run: find /usr/local/ -name Qt5Config.cmake

      # NOTE: This may no longer be true; Qt was removed from Samurai
      # samurai needs Qt, from this error ...
      # CMake Error at CMakeLists.txt:20 (find_package):
      # By not providing "FindQt5.cmake" in CMAKE_MODULE_PATH this project has
      # asked CMake to find a package configuration file provided by "Qt5", but
      # CMake did not find one.
      #
      # Could not find a package configuration file provided by "Qt5" with any of
      # the following names:
      # 
      # Qt5Config.cmake
      # qt5-config.cmake

      #  from https://github.com/Cockatrice/Cockatrice/issues/205   -DCMAKE_PREFIX_PATH=/usr/local/Cellar/qt5/5.3.1/

      #
      # cmake -DCMAKE_INSTALL_PREFIX=$LROSE_INSTALL_DIR -DCMAKE_MODULE_PATH=/usr/local/Cellar/qt/5.13.1/lib/cmake/Qt5 -D OpenMP_C_FLAGS=`pkg-config --cflags ompi-c`  -D OpenMP_C_LIB_NAMES="" -D OpenMP_CXX_FLAGS=`pkg-config --cflags ompi-cxx` -D OpenMP_CXX_LIB_NAMES=""  .
      #

#            ln -s /usr/local/opt/llvm/bin/clang /usr/local/bin/clang-omp
#            ln -s /usr/local/opt/llvm/bin/clang++ /usr/local/bin/clang-omp++

# 
#            cmake -DCMAKE_INSTALL_PREFIX=$LROSE_INSTALL_DIR \
#               -DCMAKE_MODULE_PATH=/usr/local/Cellar/qt/5.13.2/lib/cmake/Qt5 \
#               -D OpenMP_C_FLAGS=`pkg-config --cflags ompi-c` \
#               -D OpenMP_C_LIB_NAMES="" \ 
#               -D OpenMP_CXX_FLAGS=`pkg-config --cflags ompi-cxx` \
#               -D OpenMP_CXX_LIB_NAMES="" /private/tmp/workarea/$SOURCE_DIR/samurai
#

      - run:
          name: Set Environment Variables for samurai
          command: |
            echo "export OCFLAGS=`pkg-config --cflags ompi-c`" >> $BASH_ENV
            echo "export OCXXFLAGS=`pkg-config --cflags ompi-cxx`" >> $BASH_ENV

            #  echo "export CMAKE_QT5=/usr/local/opt/qt/lib/cmake/Qt5" >> $BASH_ENV

      - run:
          name: Build/install samurai  
          command: |
            set +e
            echo "building samurai"
            echo "ls $LROSE_INSTALL_DIR"
            ls $LROSE_INSTALL_DIR
            echo " ... after ls $LROSE_INSTALL_DIR"
            echo " ... cmake.qt5.config or something should be here"
            ls $CMAKE_QT5
            echo $OCFLAGS
            echo $OCXXFLAGS
            cd /private/tmp/workarea/$SOURCE_DIR/samurai
            cmake -DCMAKE_INSTALL_PREFIX=$LROSE_INSTALL_DIR -DCMAKE_MODULE_PATH=$CMAKE_QT5 -D OpenMP_C_FLAGS=$OCFLAGS -D OpenMP_C_LIB_NAMES="" -D OpenMP_CXX_FLAGS=$OCXXFLAGS -D OpenMP_CXX_LIB_NAMES="" .
            make 
            make install
            pwd
            echo "building vortrac"
            find /usr/local -name netcdf.h
            cd /private/tmp/workarea/$SOURCE_DIR/vortrac/src
            pwd
            qmake .
            make
            cp ../Resources/*.xml vortrac.app/Contents/Resources/
            cp vortrac.app/Contents/MacOS/vortrac $LROSE_INSTALL_DIR/bin
            cd ..
            rsync -av Resources $LROSE_INSTALL_DIR
            echo "building fractl"
            ln -s /usr/local/Cellar/geographiclib /usr/local/include/GeographicLib
            ls -l /usr/local/include/geographiclib
            ls -R /usr/local/include/GeographicLib
            cd /private/tmp/workarea/$SOURCE_DIR/fractl
            cmake -DCMAKE_INSTALL_PREFIX=$LROSE_INSTALL_DIR .
            make
            make install 
            echo "building HawkEye.dmg"
            cd /private/tmp/workarea/$SOURCE_DIR/apps/radar/src/HawkEye
            pwd            
            make clean
            qmake -o Makefile.qmake
            echo " ...  make from_qmake"
            make -f Makefile.qmake
            echo " ... after qmake"
            mkdir -p HawkEye.app/Contents/Frameworks
            echo " ... after mkdir"
            cp /usr/lib/libexpat.1.dylib HawkEye.app/Contents/Frameworks/.
            cp /usr/lib/libbz2.1.0.dylib HawkEye.app/Contents/Frameworks/.
            cp /usr/lib/libz.1.dylib HawkEye.app/Contents/Frameworks/.
            cp /usr/lib/libSystem.B.dylib HawkEye.app/Contents/Frameworks/.
            mkdir -p HawkEye.app/Contents/MacOS/../share
            cp -r /private/tmp/workarea/$SOURCE_DIR/share/color_scales HawkEye.app/Contents/MacOS/../share/.
            echo " ... before calling macdeployqt"
            macdeployqt HawkEye.app -dmg -always-overwrite
            echo " .. before calling hdiutil"
            hdiutil create -volname HawkEye_Installer -srcfolder /private/tmp/workarea/$SOURCE_DIR/apps/radar/src/HawkEye/HawkEye.app -ov -format UDZO HawkEye.dmg
            echo " ... after dmp build"
            cp HawkEye.dmg /private/tmp/workspace_macos/releases/lrose-elle
            echo " ... done with building HawkEye"
            echo "building vortrac.dmg"
            cd /private/tmp/workarea/$SOURCE_DIR/vortrac
            pwd            
            echo " ... before calling macdeployqt"
            cd src
            macdeployqt vortrac.app -dmg -always-overwrite
            cp ../Resources/*.xml vortrac.app/Contents/Resources/
            echo " .. before calling hdiutil"
            hdiutil create -volname Vortrac_Installer -srcfolder /private/tmp/workarea/$SOURCE_DIR/vortrac/src/vortrac.app -ov -format UDZO vortrac.dmg
            echo " ... after dmp build"
            cp vortrac.dmg /private/tmp/workspace_macos/releases/lrose-elle
            echo " ... done with building vortrac"
            echo " Start of tests ... "
            echo "   testing RadxPrint ..."
            $LROSE_INSTALL_DIR/bin/RadxPrint -h
            echo "   testing vortrac ..."
            $LROSE_INSTALL_DIR/bin/vortrac  -h
            echo "   testing fractl ..."
            $LROSE_INSTALL_DIR/bin/fractl -h
            echo "   testing samurai ..."
            $LROSE_INSTALL_DIR/bin/samurai -h
            echo " End of tests"

      - run:
          name: Set Environment Variables for MacOS Installer
          command: |
            echo "export INSTALL_BASE_DIR=/usr/local" >> $BASH_ENV
            echo "export ARCHIVE_FILENAME=LROSE-Cyclone_Installer.pkg" >> $BASH_ENV
            echo "export PACKAGE_NAME=LROSE-Core.pkg" >> $BASH_ENV
            echo "export PARTY3_BASE_DIR=/usr/local" >> $BASH_ENV
            echo "export STAGING=$LROSE_INSTALL_DIR" >> $BASH_ENV

#
# just use the install area as the staging area
#     echo "export LROSE_INSTALL_DIR=/tmp/workarea/install/lrose" >> $BASH_ENV

      - run:
          name: Build MacOS Installer
          command: |
            set +e
            cd /private/tmp/workarea
            mkdir macos_installer
            cd macos_installer
            mkdir scripts
            echo "#!/bin/sh" >> scripts/postinstall
            echo "echo \"Running postinstall\" > /tmp/my_postinstall.log " >> scripts/postinstall
            echo "exit 0 # all good" >> scripts/postinstall
            echo "#!/bin/sh" >> scripts/preinstall
            echo "echo \"Running preinstall\" > /tmp/my_preinstall.log " >> scripts/preinstall
            echo "exit 0 # all good" >> scripts/preinstall
            chmod u+x scripts/postinstall
            chmod u+x scripts/preinstall
            mkdir myresources
            echo "license" >> myresources/LICENSE.html
            echo "readme" >> myresources/README.html
            echo "building MacOS Installer"
            echo "  copying 3rd party libraries to staging area"
            echo "  (use otool -L to find these dependencies)"
            cp ${PARTY3_BASE_DIR}/lib/libnetcdf.*.dylib ${STAGING}/lib
            cp ${PARTY3_BASE_DIR}/lib/libhdf5*.dylib ${STAGING}/lib
            cp ${PARTY3_BASE_DIR}/lib/libarmadillo.*.dylib ${STAGING}/lib
            cp ${PARTY3_BASE_DIR}/lib/libz*dylib ${STAGING}/lib
            cp ${PARTY3_BASE_DIR}/lib/libbz2*dylib ${STAGING}/lib
            cp ${PARTY3_BASE_DIR}/lib/libc++*dylib ${STAGING}/lib
            cp ${PARTY3_BASE_DIR}/lib/libfftw3*dylib ${STAGING}/lib
            cp ${PARTY3_BASE_DIR}/lib/libGeographic.*.dylib ${STAGING}/lib
            cp ${PARTY3_BASE_DIR}/lib/libomp.dylib ${STAGING}/lib
            cp ${PARTY3_BASE_DIR}/opt/libpng/lib/libpng16*dylib ${STAGING}/lib
            echo "  copy frameworks from 3rd parties"
            tar -czf staging.tar.gz /tmp/workarea/install 
            pkgbuild --analyze --root /tmp/workarea/install LROSE-Cyclone_Components.plist
            pkgbuild --root /tmp/workarea/install --scripts scripts --identifier edu.ucar.lrose --install-location "/usr/local/lrose_20200108"  ${PACKAGE_NAME}
            productbuild --synthesize --package ${PACKAGE_NAME} Distribution.xml
            productbuild --distribution ./Distribution.xml --package-path . --resources myresources/ ./${ARCHIVE_FILENAME}
            echo "   make the disk image (.dmg)"
            mkdir -p for_dmg_only
            cp ${ARCHIVE_FILENAME} for_dmg_only/.
            hdiutil create -volname LROSE-Cyclone_Installer -srcfolder for_dmg_only -ov -format UDZO LROSE-Cyclone_Installer.dmg
            cd ..
            cp -R macos_installer /private/tmp/workspace_macos/releases/lrose-elle


#            cp LROSE-Cyclone_Installer.dmg /private/tmp/workspace_macos/releases/lrose-elle
#            cp ${ARCHIVE_FILENAME} /private/tmp/workspace_macos/releases/lrose-elle
#            cp LROSE-Cyclone_Components.plist /private/tmp/workspace_macos/releases/lrose-elle
#            cp /private/tmp/workspace_macos/releases/lrose-elle
#            cp /private/tmp/workspace_macos/releases/lrose-elle

      - store_artifacts:
          path: /tmp/workspace_macos/releases/lrose-elle


# ----- working here ...

  what-is-mac-env:
    macos:
      xcode: "11.2.1"

    steps:
      - run: echo $HOME
      - run: ls -al /usr/local
      - run: ls -R /usr/local/Frameworks


  test-macos-lrose-elle-tag-20200201:
    macos:
      xcode: "11.2.1"

    working_directory: /tmp
    steps:
      - attach_workspace:
          at: /tmp/workspace_macos

      - run: 
          name: Setup Environment Variables
          command: |
            echo "export RELEASE_DATE=$(date '+%Y%m%d')" >> $BASH_ENV
            echo "export PKG_CONFIG_PATH=/usr/local/opt/qt/lib/pkgconfig" >> $BASH_ENV
            echo "export PATH=/usr/local/opt/qt/bin:$PATH" >> $BASH_ENV

      - run: echo $HOME

      - run:
          name: Add to Environment Variables
          command: |
            echo "export LROSE_INSTALL_DIR=/tmp/workarea/install/lrose" >> $BASH_ENV
            echo "export    LROSE_CORE_DIR=/tmp/workarea/lrose-core" >> $BASH_ENV
            echo "export HOST_OS=OSX_LROSE"

            
      - run: mkdir -p $LROSE_INSTALL_DIR
          #  echo "export TARGET=lrose-elle-$RELEASE_DATE.src.mac_osx" >> $BASH_ENV
          #  echo "export SOURCE_DIR=lrose-elle-$RELEASE_DATE.mac_osx" >> $BASH_ENV
          #  echo "export LROSE_INSTALL_DIR=/tmp/workarea/install/lrose" >> $BASH_ENV
          #  echo "export LROSE_ROOT_DIR=/tmp/workarea/install/lrose" >> $BASH_ENV
          #  echo "export PATH=/usr/local/opt/qt/bin:$PATH" >> $BASH_ENV
          #  echo "export FCFLAGS='-w -fallow-argument-mismatch -O2'" >> $BASH_ENV
          #  echo "export FFLAGS='-w -fallow-argument-mismatch -O2'" >> $BASH_ENV
          #  # samurai needs LROSE_ROOT_DIR
          #  #echo "export LROSE_INSTALL_DIR=/usr/local/lrose" >> $BASH_ENV
          #  #echo "export LROSE_ROOT_DIR=/usr/local/lrose" >> $BASH_ENV

      - run:
          name: clone as needed lrose-elle  HERE!!!
          command: |
            echo "cloning Elle release tag"
            mkdir -p workarea
            cd workarea            
            git clone --depth 1 --branch lrose-core-20210201 https://github.com/NCAR/lrose-core
            echo "cloning vortrac release tag"
            git clone --depth 1 --branch lrose-vortrac-20200701 https://github.com/mmbell/vortrac
            echo "contents of workarea ..."
            ls

      # should have 
      # /private/tmp/workarea/lrose-core
      #                      /vortrac
      #                      /lrose-displays

      - run:
          name: fetching color scales
          command: |
            cd workarea
            git clone https://github.com/ncar/lrose-displays
            cd lrose-displays
            mkdir -p $LROSE_INSTALL_DIR/share
            rsync -av color_scales $LROSE_INSTALL_DIR/share/  

        # needed for QJSEngine: qt5-qtdeclarative-devel
      - run:
          name: Install needed packages
          command: |
            git -C /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core fetch --unshallow
            git -C /usr/local/Homebrew/Library/Taps/homebrew/homebrew-cask fetch --unshallow
            brew install cmake eigen fftw flex qt5 netcdf szip pkg-config armadillo rsync

#            brew install eigen
#            brew install fftw flex
##            brew install qt5 netcdf
#            brew install szip pkg-config                                                                                                                
#            brew install armadillo                                                         
#            brew install libomp libzip
#            brew install rsync

      - run:
          name: Install needed packages
          command: |
            brew install cmake llvm

      - run: brew install --cask xquartz

      - run:
          name: Set Environment Variables
          command: |
            echo "export RADX_INCLUDE=$LROSE_INSTALL_DIR/include" >> $BASH_ENV
            echo "export RADX_LIB=$LROSE_INSTALL_DIR/lib" >> $BASH_ENV
            echo "export ARMADILLO_INCLUDE=`pkg-config --variable=includedir armadillo`" >> $BASH_ENV
            echo "export ARMADILLO_LIB=`pkg-config --variable=libdir armadillo`" >> $BASH_ENV
            echo "export NETCDF_INCLUDE=/usr/local/include" >> $BASH_ENV
            echo "export NETCDF_LIB=/usr/local/lib" >> $BASH_ENV
            echo "export LD_LIBRARY_PATH=$LROSE_INSTALL_DIR/lib" >> $BASH_ENV

      - run: find /usr/local/ -name Qt5Config.cmake

      - run:
          name: Build-install-DMG HawkEye and VORTRAC 
          command: |
            set +e
            echo "building lrose-core"
            cd $LROSE_CORE_DIR
            ./build/scripts/installPackageMakefiles.py
            echo "build and install tdrp_gen"
            cd $LROSE_CORE_DIR/codebase/libs/tdrp/src
            make install
            cd $LROSE_CORE_DIR/codebase/apps/tdrp/src/tdrp_gen
            make install
            echo "build and install the libraries"
            cd $LROSE_CORE_DIR/codebase/libs/
            make -j 8 install_include
            make -j 8 install
            echo "done with libraries"
            echo "ls $LROSE_INSTALL_DIR"
            ls $LROSE_INSTALL_DIR
            echo " ... after ls $LROSE_INSTALL_DIR"
            echo " ... cmake.qt5.config or something should be here"
            ls $CMAKE_QT5
            pwd
            echo "building vortrac"
            find /usr/local -name netcdf.h
            cd /private/tmp/workarea/vortrac/src
            pwd
            qmake .
            make
            cp ../Resources/*.xml vortrac.app/Contents/Resources/
            cp vortrac.app/Contents/MacOS/vortrac $LROSE_INSTALL_DIR/bin
            cd ..
            rsync -av Resources $LROSE_INSTALL_DIR
            echo "building HawkEye.dmg"
            cd /private/tmp/workarea/lrose-core/codebase/apps/radar/src/HawkEye
            pwd            
            make clean
            qmake -o Makefile.qmake
            echo " ...  make from_qmake"
            make -f Makefile.qmake
            echo " ... after qmake"
            mkdir -p HawkEye.app/Contents/Frameworks
            echo " ... after mkdir"
            mkdir -p HawkEye.app/Contents/MacOS/../share
            cp -r /private/tmp/workarea/lrose-displays/color_scales HawkEye.app/Contents/MacOS/../share/.
            echo " ... before calling macdeployqt"
            macdeployqt HawkEye.app -dmg -always-overwrite
            echo " .. before calling hdiutil"
            hdiutil create -volname HawkEye_Installer -srcfolder /private/tmp/workarea/lrose-core/codebase/apps/radar/src/HawkEye/HawkEye.app -ov -format UDZO HawkEye.dmg
            echo " ... after dmg build"
            cp HawkEye.dmg /private/tmp/workspace_macos/releases/lrose-elle
            echo " ... done with building HawkEye"
            echo "building vortrac.dmg"
            cd /private/tmp/workarea/vortrac
            pwd            
            echo " ... before calling macdeployqt"
            cd src
            cp ../Resources/*.xml vortrac.app/Contents/Resources/
            macdeployqt vortrac.app -dmg -always-overwrite
            echo " .. before calling hdiutil"
            hdiutil create -volname Vortrac_Installer -srcfolder /private/tmp/workarea/vortrac/src/vortrac.app -ov -format UDZO vortrac.dmg
            echo " ... after dng build"
            cp vortrac.dmg /private/tmp/workspace_macos/releases/lrose-elle
            echo " ... done with building vortrac"
            echo " Start of tests ... "
            echo "   testing RadxPrint ..."
            $LROSE_INSTALL_DIR/bin/RadxPrint -h
            echo "   testing vortrac ..."
            $LROSE_INSTALL_DIR/bin/vortrac  -h
            echo " End of tests"

      - store_artifacts:
          path: /tmp/workspace_macos/releases/lrose-elle


# ----- end working here ...

  package-brew-formula-elle-workspace:
    executor: my-executor
    working_directory: /tmp
    steps:
      - attach_workspace:
          at: /tmp/workspace_macos
      - run: cat /tmp/workspace_macos/releases/lrose-elle/osx/checksum
  
#       - run: git clone ... get the release tools <====
      #- run: ls workspace_macos
      #- run: cd release-tools/elle

#  just call the script to build the brew formula
#  I'll just have to extract the .rb file from the script? But, that should be easy, I think.

# begin script ...
#       - run: git clone ...release-tools

      - run: 
          name: Setup Environment Variables
          command: |
            echo "export RELEASE_DATE=$(date '+%Y%m%d')" >> $BASH_ENV

      - run: 
          name: Add to Environment Variables
          command: |
            echo "export TARFILE=lrose-elle-$RELEASE_DATE.src.mac_osx.tgz" >> $BASH_ENV

      - run: 
          name: Add to Environment Variables
          command: |
            echo "export URL=https://github.com/NCAR/lrose-release-test/releases/download/$RELEASE_DATE/$TARFILE" >> $BASH_ENV
            echo "export checksum2='cat /tmp/workspace_macos/releases/lrose-elle/osx/checksum'" >> $BASH_ENV
            echo "export checksum=`sha256sum /tmp/workspace_macos/releases/lrose-elle/osx/$TARFILE`" >> $BASH_ENV

      - run: echo $checksum
      - run: echo $URL
      - run: echo $TARFILE
      - run: echo $RELEASE_DATE

      - run: git clone https://github.com/nsf-lrose/release-tools

      - run: ./release-tools/elle/homebrew-scripts/make-lrose-elle-brew-formula.sh 
      - run: mv lrose-elle.rb /tmp/workspace_macos/releases/lrose-elle/osx

      - persist_to_workspace:
          root: workspace_macos
          paths: 
            - releases/lrose-elle/osx

      - store_artifacts:
          path: /tmp/workspace_macos/releases/lrose-elle/osx

  # ----------------------

  test-linux-elle-checkout-and-build:
    executor: centos7-executor
    working_directory: /tmp 

    steps:
      - run:
          name: checkout_and_build 
          no_output_timeout: 30m
          command: |
            set +e
            export LROSE_INSTALL_DIR=/usr/local/lrose
            echo "create link for qtmake ..."
            cd /usr/bin 
            ln -s qmake-qt5 qmake
            cd /tmp
            echo "pwd ..."
            pwd
            echo "fetch the lrose checkout_and_build script ... "
            wget "https://raw.githubusercontent.com/NCAR/lrose-core/master/build/checkout_and_build_auto.py"
            ls
            chmod u+x checkout_and_build_auto.py
            echo "running  checkout and build script core_apps ... "
            /tmp/checkout_and_build_auto.py \
              --package lrose-core \
              --prefix $LROSE_INSTALL_DIR \
              --buildDir /tmp/lrose_build \
              --logDir /tmp/build_logs/core_apps \
              --installLroseRuntimeLibs \
              --cmake3 --fractl --vortrac --samurai \
              --noScripts
            echo "checking lrose/lib contents ..."
            ls -R $LROSE_INSTALL_DIR/lib
            echo "testing RadxPrint ..."
            $LROSE_INSTALL_DIR/bin/RadxPrint -h
            echo "testing fractl ..."
            $LROSE_INSTALL_DIR/bin/fractl -h
            echo "testing samurai ..."
            $LROSE_INSTALL_DIR/bin/samurai -h
            echo "testing vortrac ..."
            $LROSE_INSTALL_DIR/bin/vortrac -h

      - store_artifacts:
          path: /tmp/build_logs

  # -----------------------
  
  test-macos-lrose-samurai-rb:
    macos:
      xcode: "10.2.1"
      
      #       xcode: "11.2.1"

    steps:
      - run:
          name: brew install lrose-samurai.rb
          command: echo "testing brew install MacOS-Elle lrose-samurai.rb"
 
      - run: brew update
      - run: brew install wget
      - run: wget https://github.com/NCAR/lrose-core/releases/download/lrose-core-20200701/lrose-core.rb
      - run: wget https://github.com/NCAR/lrose-core/releases/download/lrose-core-20200701/lrose-samurai.rb
      - run: brew cask install xquartz 
      - run: 
          name: installing lrose-core
          no_output_timeout: 60m
          command: |
            brew install lrose-core.rb
      - run: brew install lrose-samurai.rb
      - run: samurai -h

  test-macos-elle-rb:
    macos:
      xcode: "12.4.0"  # 11.2.1"      # xcode: "10.2.1"

    steps:
      - run:
          name: brew install lrose-elle.rb
          command: echo "testing brew install MacOS-Elle lrose-core.rb"
 
      - run: brew update
      - run: brew install wget
      # this is my patched brew formula ...
      # - run: wget https://github.com/leavesntwigs/lrose-test/releases/download/20210120/lrose-core.rb    
      - run: wget https://github.com/NCAR/lrose-core/releases/download/lrose-core-20210201/lrose-core.rb
      #- run: brew cask install xquartz  # for older versions of brew 
      - run: brew install --cask xquartz
      - run: 
          name: installing lrose-core
          no_output_timeout: 60m
          command: |
            brew install lrose-core.rb
      # getting this warning ...
      # ==> Installing lrose-core
      # Warning: Calling depends_on :x11 is deprecated! Use depends_on specific X11 formula(e) instead.
      # ==> ./configure --prefix=/usr/local/Cellar/lrose-core/core-20200719
      # ==> make install
      - run: RadxPrint -h

  test-macos-elle-rb-20210216:
    macos:
      xcode: "12.4.0"  # 11.2.1"      # xcode: "10.2.1"

    steps:
      - run:
          name: brew install lrose-elle.rb
          command: echo "testing brew install MacOS-Elle lrose-core.rb"
 
      - run: brew update
      - run: brew install wget
      # this is my patched brew formula ...
      - run: wget https://github.com/NCAR/lrose-core/releases/download/lrose-core-20210216/lrose-core.rb
      # - run: wget https://github.com/leavesntwigs/lrose-test/releases/download/20210311/lrose-core.rb    
      # - run: wget https://github.com/NCAR/lrose-core/releases/download/lrose-core-20210216/lrose-core.rb
      #- run: brew cask install xquartz  # for older versions of brew 
      - run: brew install --cask xquartz
      #- run: brew install qt5
      # installs qt6! ACK!
      # ==> Installing qt
#==> Pouring qt-6.0.2.catalina.bottle.tar.gz
#🍺  /usr/local/Cellar/qt/6.0.2: 8,233 files, 158.1MB
#==> Upgrading 2 dependents:
      #- run: find / -name Qt5Config.cmake

      #- run: find /usr/local/ -name qt5-config.cmake

      # ---- from old Samurai build ...
      #- run: find /usr/local/ -name Qt5Config.cmake
      # found here /usr/local//Cellar/qt@5/5.15.2/lib/cmake/Qt5/Qt5Config.cmake
      #- run: echo "export Qt5_DIR=/usr/local//Cellar/qt@5/5.15.2/lib/cmake/Qt5" >> $BASH_ENV
      #- run: ls /usr/local/opt/qt/lib/cmake/Qt5

      # samurai needs Qt, from this error ...
      # CMake Error at CMakeLists.txt:20 (find_package):
      # By not providing "FindQt5.cmake" in CMAKE_MODULE_PATH this project has
      # asked CMake to find a package configuration file provided by "Qt5", but
      # CMake did not find one.
      #
      # Could not find a package configuration file provided by "Qt5" with any of
      # the following names:
      # 
      # Qt5Config.cmake
      # qt5-config.cmake

      #  from https://github.com/Cockatrice/Cockatrice/issues/205   -DCMAKE_PREFIX_PATH=/usr/local/Cellar/qt5/5.3.1/

      #
      # cmake -DCMAKE_INSTALL_PREFIX=$LROSE_INSTALL_DIR -DCMAKE_MODULE_PATH=/usr/local/Cellar/qt/5.13.1/lib/cmake/Qt5 -D OpenMP_C_FLAGS=`pkg-config --cflags ompi-c`  -D OpenMP_C_LIB_NAMES="" -D OpenMP_CXX_FLAGS=`pkg-config --cflags ompi-cxx` -D OpenMP_CXX_LIB_NAMES=""  .
      #

#            ln -s /usr/local/opt/llvm/bin/clang /usr/local/bin/clang-omp
#            ln -s /usr/local/opt/llvm/bin/clang++ /usr/local/bin/clang-omp++

# 
#            cmake -DCMAKE_INSTALL_PREFIX=$LROSE_INSTALL_DIR \
#               -DCMAKE_MODULE_PATH=/usr/local/Cellar/qt/5.13.2/lib/cmake/Qt5 \
#               -D OpenMP_C_FLAGS=`pkg-config --cflags ompi-c` \
#               -D OpenMP_C_LIB_NAMES="" \ 
#               -D OpenMP_CXX_FLAGS=`pkg-config --cflags ompi-cxx` \
#               -D OpenMP_CXX_LIB_NAMES="" /private/tmp/workarea/$SOURCE_DIR/samurai
#

#      - run:
#          name: Set Environment Variables for samurai
#          command: |
#            echo "export CMAKE_QT5=/usr/local/opt/qt/lib/cmake/Qt5" >> $BASH_ENV
# ---- end from old Samurai build


      - run: 
          name: installing lrose-core
          no_output_timeout: 60m
          command: |
            brew install lrose-core.rb
      # getting this warning ...
      # ==> Installing lrose-core
      # Warning: Calling depends_on :x11 is deprecated! Use depends_on specific X11 formula(e) instead.
      # ==> ./configure --prefix=/usr/local/Cellar/lrose-core/core-20200719
      # ==> make install
      - run: RadxPrint -h
  
  # -----------

  test-macos-elle-checkout-and-build:
    macos:
      xcode: "11.2.1"

    working_directory: /tmp
    steps:
      - attach_workspace:
          at: /tmp/workspace_macos

        # needed for QJSEngine: qt5-qtdeclarative-devel
      - run:
          name: Install needed packages
          command: |
            brew install cmake
            brew install eigen
            brew install fftw flex
            brew install qt5 netcdf
            brew install szip pkg-config
            brew install geographiclib
            brew install armadillo
            brew install libomp libzip
            brew install rsync

      - run: brew cask install xquartz

      - run:
          name: Setup Environment Variables
          command: |
            echo "export RELEASE_DATE=$(date '+%Y%m%d')" >> $BASH_ENV
            echo "export PKG_CONFIG_PATH=/usr/local/opt/qt/lib/pkgconfig" >> $BASH_ENV
            echo "export PATH=/usr/local/opt/qt/bin:$PATH" >> $BASH_ENV

  test-macos-elle-checkout-and-build-cmake:
    macos:
      xcode: "11.2.1"

    working_directory: /tmp
    steps:

      - run: brew install --cask xquartz

      - run:
          name: Install needed packages
          command: |
            brew install cmake
            brew install eigen
            brew install fftw flex
            brew install qt5 netcdf
            brew install szip pkg-config
            brew install armadillo
            brew install libomp libzip
            brew install rsync

      - run:
          name: Clone bootstrap and build
          no_output_timeout: 30m
          command: |
            cd /tmp
            git clone https://github.com/ncar/lrose-bootstrap
            echo "before running checkout_and_build_cmake ..."
            ls
            lrose-bootstrap/scripts/checkout_and_build_cmake.py
            echo "after running checkout_and_build_cmake ..."
            ls

        # *** Installed in dir: /Users/distiller/lrose-install ***
      - run:
          name: test install
          command: |
            echo "testing with path ..."
            /Users/distiller/lrose-install/bin/RadxPrint -h
            echo "All done."

        # does not work without path 
        # echo "testing with no path ... "
        # RadxPrint -h



  # --------------------------

  # build from the head of lrose-core
  package-elle-docker:
    ## just use a generic ubuntu. The Dockerfile installs the dependent packages.
    # executor: ubuntu-executor
    machine:
      docker_layer_caching: true

    steps:
      - run: date
      - run:
          name: Set Environment Variables
          command: |
            echo "export RELEASE_DATE=$(date '+%Y%m%d')" >> $BASH_ENV

      ## - checkout
      - run: echo "building lrose-elle docker image ..."
      - run: mkdir -p workspace
      - run: cd workspace; git clone https://github.com/nsf-lrose/release-tools
      - run: pwd
      - run: echo $HOME
      - run: ls workspace

      - run:
          name: Build the container
          no_output_timeout: 30m
          command: |
            cd workspace/release-tools/elle/lrose-docker-scripts
            ./build_latest.sh -t latest

      - run: ls -R
      - run: which docker
      - run: docker images
      - run: mkdir -p workspace/deploy/docker-images

      - run:
          name: Set Docker Image Name
          command: |
            echo "export IMAGE_NAME=nsflrose/lrose-elle:$RELEASE_DATE" >> $BASH_ENV

      - run: echo $IMAGE_NAME
      
#      - run: docker save -o /tmp/workspace/deploy/docker-images nsflrose/lrose-cyclone:16.04  
      - run: docker save -o workspace/deploy/docker-images/nsflrose.tar $IMAGE_NAME

#"nsflrose/lrose-cyclone:${RELEASE_DATE}"

      - persist_to_workspace:
          root: workspace
          paths: deploy/docker-images
      - store_artifacts:
          path: workspace/deploy/docker-images 

# path: workspace/release-tools/elle/lrose-docker-scripts

#          path: workspace/deploy/docker-images


  test-elle-docker:
    ## just use a generic ubuntu machine. The Dockerfile installs the dependent packages.
    # executor: ubuntu-executor
    machine: true

    working_directory: /tmp
    steps:
      - attach_workspace:
          at: /tmp/workspace

#          root: workspace
#          paths: deploy/docker-images

      - run: date
      - run:
          name: Set Environment Variables
          command: |
            echo "export RELEASE_DATE=$(date '+%Y%m%d')" >> $BASH_ENV

      - run: 
          name: load docker image 
          command: |
            docker load -i /tmp/workspace/deploy/docker-images/nsflrose.tar  

      - run: docker images

      - run: cd workspace; git clone https://github.com/nsf-lrose/release-tools
      - run: pwd
      - run: ls workspace

      - run:
          name: Run tests in the container
          command: |
            cd workspace/release-tools/elle/lrose-docker-scripts
            docker run  nsflrose/lrose-elle:$RELEASE_DATE RadxPrint -h
            docker run  nsflrose/lrose-elle:$RELEASE_DATE fractl -h
            docker run  nsflrose/lrose-elle:$RELEASE_DATE samurai -h
            docker run  nsflrose/lrose-elle:$RELEASE_DATE vortrac -h



  package-lrose-topaz-python3-tgz:
    executor: centos7-executor
    working_directory: /tmp
    steps:
      - run:
          name: build MacOS tgz
          command: echo "build MacOS source tgz"
      - run: echo "building lrose-core ..."
      # - run: yum install -y qt5-qtdeclarative-devel  ---> done in centos7-executor container
      - run: mkdir -p workspace_macos_topaz_branch
      - run: cd workspace_macos_topaz_branch; git clone -b python3 https://github.com/NCAR/lrose-core
      - run: pwd
      - run: ls workspace_macos_topaz_branch
      - run: alias qmake-qt5='qmake'
      - run: 
          name: Setup Environment Variables
          command: |
            echo "export RELEASE_DATE=$(date '+%Y%m%d')" >> $BASH_ENV
            echo "BRANCH = python3" >> $BASH_ENV

      - run: echo "RELEASE_DATE = " ${RELEASE_DATE}
        # cannot use lrose_checkout_and_build because it clones the master branch of the repo and we need a branch
        # package for macos
# TODO: need to do something different here ... create_src_tar has a "git clone ..." embedded
# even with --tag option, this still doesn't work
      - run: ./workspace_macos_topaz_branch/lrose-core/build/release/create_src_release.py --force --releaseDir=/tmp/workspace_macos_topaz_branch/releases --package=lrose-core --osx --tag=python3

      - run: ls /tmp/workspace_macos_topaz_branch/releases
      - run: ls /tmp/workspace_macos_topaz_branch/releases/lrose-core     
      - run: ls /tmp/workspace_macos_topaz_branch/releases/lrose-core/osx
      # - run: cd /tmp/workspace_macos_topaz_branch/releases/lrose-core/osx; mv lrose-core-$RELEASE_DATE.src.mac_osx.tgz lrose-core-$BRANCH-$RELEASE_DATE.src.mac_osx.tgz

      - persist_to_workspace:
          root: workspace_macos_topaz_branch
          paths: 
            - releases/lrose-core/osx
      - store_artifacts:
          path: /tmp/workspace_macos_topaz_branch/releases/lrose-core/osx
          # should store  lrose-core-YYYYMMDD.src.mac_osx.tgz and lrose-core.rb
          # Then, download artifact, edit .rb to change url to lrose-test-release
          # then upload .rb  and .tgz to lrose-test-release site, then call
          #  build-macos-lrose-topaz-python3 on macOS image


# probably don't need this step because the new create_src_release script adds the color scales
  package-lrose-topaz-python3-colorscales-tgz:
    executor: centos7-executor
    working_directory: /tmp
    steps:
      - attach_workspace:
          at: /tmp/workspace_macos_topaz_branch
      - run:
          name: package lrose-topaz python3 packages (.tgz)
          command: echo "package lrose-topaz python3 software"
      - run: ls -R

      - run: pwd   # /private/tmp
      - run: 
          name: Setup Environment Variables
          command: |
            echo "export RELEASE_DATE=$(date '+%Y%m%d')" >> $BASH_ENV
            echo "export RELEASE_DIR=/tmp/workpace_macos/releases" >> $BASH_ENV
            echo "BRANCH = python3" >> $BASH_ENV

      - run:
          name: Add to Environment Variables
          command: |
            echo "export TARGET=lrose-topaz-$BRANCH-$RELEASE_DATE.src.mac_osx" >> $BASH_ENV

      - run: ls -R /tmp/workspace_macos_topaz_branch
      - run: echo "RELEASE_DATE = " $RELEASE_DATE
      - run: echo "TARGET = " $TARGET
      - run: echo "BRANCH = " $BRANCH
      - run: tar zxf /tmp/workspace_macos_topaz_branch/releases/lrose-core/osx/lrose-core-$BRANCH-$RELEASE_DATE.src.mac_osx.tgz
      - run: ls

      # Grab the color scales
      - run: git clone https://github.com/ncar/lrose-displays
      - run: rsync -av lrose-displays/color_scales lrose-core-$BRANCH-$RELEASE_DATE.mac_osx/share 

        # make the elle tar file 
      - run: mv lrose-core-$BRANCH-$RELEASE_DATE.mac_osx lrose-topaz-$BRANCH-$RELEASE_DATE.mac_osx
      - run: tar zcf $TARGET.tgz lrose-topaz-$BRANCH-$RELEASE_DATE.mac_osx
      - run: ls 

      - run: mkdir -p /tmp/workspace_macos_topaz_branch/releases/lrose-topaz/osx

        # move the tar file into the persisted workspace 
      - run: mv $TARGET.tgz /tmp/workspace_macos_topaz_branch/releases/lrose-topaz/osx

      - persist_to_workspace:
          root: workspace_macos_topaz_branch
          paths: 
            - releases/lrose-topaz/osx

      - store_artifacts:
          path: /tmp/workspace_macos_topaz_branch/releases/lrose-topaz


  build-macos-lrose-topaz-python3:
    macos:
      xcode: "13.3"  # corresponds to MacOS 12.3.1 Monterey

    working_directory: /tmp
    steps:
      - attach_workspace:
          at: /tmp/workspace_macos_topaz_branch
      - run:
          name: package lrose-topaz python3 packages (.tgz)
          command: echo "package lrose-topaz python3 software"
      - run: ls -R

      - run:
          name: brew install lrose-topaz.rb Monterey Xcode 13.3.0
          command: echo "testing brew install MacOS-Topaz lrose-core.rb"
 
      - run: brew update
      - run: brew install wget            

      - run: wget https://github.com/NCAR/lrose-release-test/releases/download/20220514/lrose-core.rb

      #- run: brew cask install xquartz  # for older versions of brew 
      - run: brew install --cask xquartz
      #- run: brew install qt5
      # installs qt6! ACK!

      - run: 
          name: installing lrose-core
          no_output_timeout: 60m
          command: |
            brew install lrose-core.rb
      # getting this warning ...
      # ==> Installing lrose-core
      # Warning: Calling depends_on :x11 is deprecated! Use depends_on specific X11 formula(e) instead.
      # ==> ./configure --prefix=/usr/local/Cellar/lrose-core/core-20200719
      # ==> make install
      - run: RadxPrint -h

      - store_artifacts:
          path: /Users/distiller/Library/Logs/Homebrew/lrose-core

  test-linux-lrose-topaz-tgz:
        docker:
      - image: debian:10
      # - image: cimg/base:2022.04

    working_directory: /tmp
    steps:

      - run: mkdir workarea

      - run: sudo apt-get update && sudo apt-get install -y 

      # https://github.com/NCAR/lrose-core/releases/download/lrose-core-20220222/lrose-core-20220222.ubuntu_20.04.amd64.deb


      - run: 
          name: Setup Environment Variables
          command: |
            echo "export RELEASE_DATE=$(date '+%Y%m%d')" >> $BASH_ENV
            echo "export PKG_CONFIG_PATH=/usr/local/opt/qt/lib/pkgconfig" >> $BASH_ENV

      - run:
          name: Add to Environment Variables
          command: |
            echo "export TARGET=lrose-elle-$RELEASE_DATE" >> $BASH_ENV
            echo "export LROSE_INSTALL_DIR=/usr/local/lrose" >> $BASH_ENV
            echo "export LROSE_ROOT_DIR=/usr/local/lrose" >> $BASH_ENV
            echo "export NETCDF_INCLUDES=/usr/include" >> $BASH_ENV 
            echo "export NETCDF_LIBRARIES=/usr/lib" >> $BASH_ENV 

        # needed for QJSEngine: qt5-qtdeclarative-devel
      - run:
          name: Install needed packages
          command: |
            apt-get install -y cmake eigen fftw flex qt5 netcdf
            apt-get install -y szip pkg-config                                                            
            apt-get install -y geographiclib                                                     
            apt-get install -y armadillo                                                         
            apt-get install -y libomp libzip
            apt-get install -y rsync

      - run: 
          name: Setup Environment Variables
          command: |
            echo "export RELEASE_DATE=20220222" >> $BASH_ENV
            echo "export PKG_CONFIG_PATH=/usr/local/opt/qt/lib/pkgconfig" >> $BASH_ENV
            echo "export PATH=/usr/local/opt/qt/bin:$PATH" >> $BASH_ENV
            echo "export BASE_DIR=/private" >> $BASH_ENV

      - run: echo $HOME

      - run:
          name: Add to Environment Variables
          command: |
            echo "export TARGET=lrose-core-$RELEASE_DATE.src" >> $BASH_ENV
            echo "export SOURCE_DIR=lrose-topaz-$RELEASE_DATE" >> $BASH_ENV
            echo "export LROSE_INSTALL_DIR=/tmp/workarea/lrose" >> $BASH_ENV
            echo "export    LROSE_ROOT_DIR=/tmp/workarea/lrose" >> $BASH_ENV
            echo "export PATH=/usr/local/opt/qt/bin:$PATH" >> $BASH_ENV
            echo "export FCFLAGS='-w -fallow-argument-mismatch -O2'" >> $BASH_ENV
            echo "export FFLAGS='-w -fallow-argument-mismatch -O2'" >> $BASH_ENV
            # samurai needs LROSE_ROOT_DIR
            #echo "export LROSE_INSTALL_DIR=/usr/local/lrose" >> $BASH_ENV
            echo "export WORKAREA=$BASE_DIR/tmp/workarea" >> $BASH_ENV

      - run:
          name: extract lrose-topaz tgz 
          command: |
            mkdir $WORKAREA
            pwd 
            cd /tmp/workarea
            echo "fetching tar files from release ... "
            wget https://github.com/NCAR/lrose-core/releases/download/lrose-core-$RELEASE_DATE/lrose-core-$RELEASE_DATE.src.tgz
            echo "extracting lrose-topaz from tgz ..."
            tar xf lrose-core-$RELEASE_DATE.src.tgz
            cd lrose-core-$RELEASE_DATE.src/build/cmake
            echo "installing in ~/lrose ... "
            ./createCMakeLists.py --prefix /tmp/workarea/lrose
            cd ../../codebase
            mkdir build
            cd build
            cmake -DQt5_DIR=$QT5_INSTALL_DIR ..
            cd $SOURCE_DIR/libs
            make install
            cd ../apps/tdrp/src/tdrp_gen
            make install
            cd $SOURCE_DIR/apps
            make install

      - run: 
          name: text the install
          command: |
            $LROSE_INSTALL_DIR/bin/RadxPrint -h  
         

      - run:
          name: Add to Environment Variables for vortrac
          command: |
            echo "export RADX_INCLUDE=$LROSE_INSTALL_DIR/include" >> $BASH_ENV
            echo "export RADX_LIB=$LROSE_INSTALL_DIR/lib" >> $BASH_ENV
            echo "export ARMADILLO_INCLUDE=`pkg-config --variable=includedir armadillo`" >> $BASH_ENV
            echo "export ARMADILLO_LIB=`pkg-config --variable=libdir armadillo`" >> $BASH_ENV
            echo "export NETCDF_INCLUDE=`pkg-config --variable=includedir netcdf`" >> $BASH_ENV 
            echo "export NETCDF_LIB=`pkg-config --variable=libdir netcdf`" >> $BASH_ENV 
            echo "export QT5_BIN=/usr/lib64/qt5/bin" >> $BASH_ENV
            echo "export LD_LIBRARY_PATH=/usr/local/lrose/lib" >> $BASH_ENV  



  # NOTE: in order to build the .src.mac_osx.tgz file, we need to 
  #       build it on a linux platform using automake and libtool
  #
  package-lrose-elle-BoundaryEditorIntegrate-tgz:
    executor: centos7-executor
    working_directory: /tmp
    steps:
      - run:
          name: build MacOS tgz
          command: echo "build MacOS source tgz"
      - run: echo "building lrose-core ..."
      # - run: yum install -y qt5-qtdeclarative-devel  ---> done in centos7-executor container
      - run: mkdir -p workspace_macos_elle_branch
      - run: cd workspace_macos_elle_branch; git clone -b BoundaryEditorIntegrate https://github.com/NCAR/lrose-core
      - run: pwd
      - run: ls workspace_macos_elle_branch
      - run: alias qmake-qt5='qmake'
      - run: 
          name: Setup Environment Variables
          command: |
            echo "export RELEASE_DATE=$(date '+%Y%m%d')" >> $BASH_ENV
            echo "BRANCH = BoundaryEditorIntegrate" >> $BASH_ENV

      - run: echo "RELEASE_DATE = " ${RELEASE_DATE}
        # package for macos
# TODO: need to do something different here ... create_src_tar has a "git clone ..." embedded
# even with --tag option, this still doesn't work
#      - run: ./workspace_macos_elle_branch/lrose-core/build/create_src_tar.py --force --releaseDir=/tmp/workspace_macos_elle_branch/releases --package=lrose-core --osx --tag=BoundaryEditorIntegrate

      - run: ls /tmp/workspace_macos_elle_branch/releases/lrose-core/osx
      - run: cd /tmp/workspace_macos_elle_branch/releases/lrose-core/osx; mv lrose-core-$RELEASE_DATE.mac_osx.tgz lrose-core-$BRANCH-$RELEASE_DATE.src.mac_osx.tgz

      - persist_to_workspace:
          root: workspace_macos_elle_branch
          paths: 
            - releases/lrose-core/osx
      - store_artifacts:
          path: /tmp/workspace_macos_elle_branch/releases/lrose-core/osx
          # should store  lrose-core-YYYYMMDD.mac_osx.tgz and lrose-core.rb
          # Ah, but don't we want lrose-core.src.mac_osx.tgz?



  # we are just packaging the tgz file; no building, so we don't need macos machine
  package-macos-lrose-elle-BoundaryEditorIntegrate-tgz:
    executor: centos7-executor
    working_directory: /tmp
    steps:
      - attach_workspace:
          at: /tmp/workspace_macos_elle_branch
      - run:
          name: package lrose-elle BoundaryEditorIntegrate packages (.tgz)
          command: echo "package lrose-elle BoundaryEditorIntegrate software"
      - run: ls -R

      - run: pwd   # /private/tmp
      - run: 
          name: Setup Environment Variables
          command: |
            echo "export RELEASE_DATE=$(date '+%Y%m%d')" >> $BASH_ENV
            echo "export RELEASE_DIR=/tmp/workpace_macos/releases" >> $BASH_ENV
            echo "BRANCH = BoundaryEditorIntegrate" >> $BASH_ENV

# TODO: checkout/pull the BoundaryEditorIntegrate branch; tar it to the workspace area??
# basically include the steps to package the branch release

      - run:
          name: Add to Environment Variables
          command: |        
            echo "export TARGET=lrose-elle-$BRANCH-$RELEASE_DATE.src.mac_osx" >> $BASH_ENV

      - run: ls -R /tmp/workspace_macos_elle_branch
      - run: echo "RELEASE_DATE = " $RELEASE_DATE
      - run: echo "TARGET = " $TARGET
      - run: echo "BRANCH = " $BRANCH
      - run: tar zxf /tmp/workspace_macos_elle_branch/releases/lrose-core/osx/lrose-core-$BRANCH-$RELEASE_DATE.src.mac_osx.tgz
      - run: ls

      # Grab the color scales
      - run: git clone https://github.com/ncar/lrose-displays
      - run: rsync -av lrose-displays/color_scales lrose-core-$BRANCH-$RELEASE_DATE.mac_osx/share 

        # make the elle tar file 
      - run: mv lrose-core-$BRANCH-$RELEASE_DATE.mac_osx lrose-elle-$BRANCH-$RELEASE_DATE.mac_osx
      - run: tar zcf $TARGET.tgz lrose-elle-$BRANCH-$RELEASE_DATE.mac_osx
      - run: ls 

      - run: mkdir -p /tmp/workspace_macos_elle_branch/releases/lrose-elle/osx

        # move the tar file into the persisted workspace 
      - run: mv $TARGET.tgz /tmp/workspace_macos_elle_branch/releases/lrose-elle/osx

      - persist_to_workspace:
          root: workspace_macos_elle_branch
          paths: 
            - releases/lrose-elle/osx

      - store_artifacts:
          path: /tmp/workspace_macos_elle_branch/releases/lrose-elle


  build-macos-lrose-elle-HawkEye-Edit:
    macos:
      xcode: "11.2.1"

    #working_directory: /tmp
    steps:
      - attach_workspace:
          at: /tmp/workspace_macos

        # needed for QJSEngine: qt5-qtdeclarative-devel
      - run:
          name: Install needed packages
          command: |
            brew install qt5 netcdf szip pkg-config libzip rsync


#            brew install cmake eigen fftw flex qt5 netcdf szip pkg-config libzip rsync

#      - run: brew cask install xquartz 

      - run: 
          name: Setup Environment Variables
          command: |
            echo "export RELEASE_DATE=$(date '+%Y%m%d')" >> $BASH_ENV
            echo "export PKG_CONFIG_PATH=/usr/local/opt/qt/lib/pkgconfig" >> $BASH_ENV
            echo "export PATH=/usr/local/opt/qt/bin:$PATH" >> $BASH_ENV
            echo "export BRANCH=BoundaryEditorIntegrate" >> $BASH_ENV
            
# echo "export MYHOME=/tmp/workarea" >> $BASH_ENV

        # $HOME should be /Users/distiller
      - run: echo $HOME

      - run:
          name: Add to Environment Variables
          command: |
            echo "export TARGET=lrose-elle-$BRANCH-$RELEASE_DATE.src.mac_osx" >> $BASH_ENV
            echo "export SOURCE_DIR=lrose-elle-$BRANCH-$RELEASE_DATE.mac_osx" >> $BASH_ENV
            echo "export LROSE_INSTALL_DIR=$HOME/install/lrose" >> $BASH_ENV
            echo "export LROSE_ROOT_DIR=$HOME/install/lrose" >> $BASH_ENV
            echo "export PATH=/usr/local/opt/qt/bin:$PATH" >> $BASH_ENV
            echo "export HOST_OS=OSX_LROSE" >> $BASH_ENV
            echo "export LROSE_CORE_DIR=$HOME/lrose-core" >> $BASH_ENV

      - run:
          name: build libraries and HawkEye app 
          command: |
            echo "cloning branch"
            cd $HOME
            pwd
            git clone -b BoundaryEditorIntegrate https://github.com/NCAR/lrose-core
            ls 
            alias qmake-qt5='qmake'
            echo "-------"
            cd $LROSE_CORE_DIR/codebase
            pwd
            ls
            echo "--------"
            ./make_bin/installPackageMakefiles.py --osx
            echo "building tdrp ..."
            cd $LROSE_CORE_DIR/codebase/libs/tdrp/src
            make install
            cd $LROSE_CORE_DIR/codebase/apps/tdrp/src/tdrp_gen
            make install
            echo "building libraries"
            cd $LROSE_CORE_DIR/codebase/libs/
            make -j 8 install_include
            make -j 8 install      
            echo "building HawkEye app ..."
            cd $LROSE_CORE_DIR/codebase/apps/radar/src/HawkEye 
            make install


#            cd /tmp/workarea/lrose-core/codebase/apps/radar/src/HawkEye; make install

      # Grab the color scales
      - run: git clone https://github.com/ncar/lrose-displays
      # should be in /tmp/workarea/lrose-displays
# TODO: merge these two commands ....
      #- run: rsync -av lrose-displays/color_scales lrose-core-$BRANCH-$RELEASE_DATE.mac_osx/share 
      #- run: cd workarea/$SOURCE_DIR; rsync -av share $LROSE_INSTALL_DIR                                                                               
      - run:
          name: Install needed packages
          command: |
            brew install llvm

      # don't exit if one of the commands fails 
      # - run: set +e

      - run:
          name: Set Environment Variables
          command: |
            echo "export RADX_INCLUDE=$LROSE_INSTALL_DIR/include" >> $BASH_ENV
            echo "export RADX_LIB=$LROSE_INSTALL_DIR/lib" >> $BASH_ENV
            echo "export NETCDF_INCLUDE=/usr/local/include" >> $BASH_ENV
            echo "export NETCDF_LIB=/usr/local/lib" >> $BASH_ENV
            echo "export LD_LIBRARY_PATH=$LROSE_INSTALL_DIR/lib" >> $BASH_ENV

      - run: find /usr/local/ -name Qt5Config.cmake

      - run:
          name: Build/install HawkEye-Edit  
          command: |
            set +e
            echo "building HawkEye-Edit.dmg"
            cd $LROSE_CORE_DIR/codebase/apps/radar/src/HawkEye
            pwd            
            make clean
            qmake -o Makefile.qmake
            echo " ...  make from_qmake"
            make -f Makefile.qmake
            echo " ... after qmake"
            mkdir -p HawkEye-Edit.app/Contents/Frameworks
            echo " ... after mkdir"
            cp /usr/lib/libexpat.1.dylib HawkEye-Edit.app/Contents/Frameworks/.
            cp /usr/lib/libbz2.1.0.dylib HawkEye-Edit.app/Contents/Frameworks/.
            cp /usr/lib/libz.1.dylib HawkEye-Edit.app/Contents/Frameworks/.
            cp /usr/lib/libSystem.B.dylib HawkEye-Edit.app/Contents/Frameworks/.
            mkdir -p HawkEye-Edit.app/Contents/MacOS/../share
            cp -r $HOME/lrose-displays/color_scales HawkEye-Edit.app/Contents/MacOS/../share/.
            echo " ... before calling macdeployqt"
            macdeployqt HawkEye-Edit.app -dmg -always-overwrite
            echo " .. before calling hdiutil"
            hdiutil create -volname HawkEye-Edit_Installer -srcfolder $LROSE_CORE_DIR/codebase/apps/radar/src/HawkEye/HawkEye-Edit.app -ov -format UDZO HawkEye-Edit.dmg
            echo " ... after dmg build"
            cp HawkEye-Edit.dmg /private/tmp/workspace_macos/releases/lrose-elle
            echo " ... done with building HawkEye-Edit"
            echo " Start of tests ... "
            echo "   testing HawkEye-Edit ..."
            $LROSE_INSTALL_DIR/bin/HawkEye -h
            echo " End of tests"


      - store_artifacts:
          path: /tmp/workspace_macos/releases/lrose-elle

  docker_cli:
    description: |
      Interact with Singularity via a Docker container. The containers are
      prebuilt, so this step supports any of the tags belonging to the
      quay.io/singularity/singularity Docker repository.
    executor: docker
    parameters:
      singularity-version:
        description: The Singularity version (tag on quay.io/singularity/singularity)
        type: string
        default: v3.8.2-slim
    steps:
      - run:
          name: Check Singularity Version
          singularity-version: <<parameters.singularity-version>>
          command: singularity --version

  build-sing-image-cidd:
    description: Build a Singularity container using Docker
    executor: docker
    parameters:
      singularity-version:
        type: string
        default: v3.8.2-slim
      from-uri:
        description: 'The Singularity recipe path or docker:// uri to build from.'
        type: string
        default: docker://nsflrose/lrose-cidd:latest
      image:
        description: 'The image binary to build (e.g., container.sif)'
        type: string
        default: lrose-cidd.sif
    steps:
      - run:
          name: Build Singularity Container
          singularity-version: <<parameters.singularity-version>>
          command: |
            if [ -f "$BASH_ENV" ]; then source $BASH_ENV; fi
            singularity build <<parameters.image>> <<parameters.from-uri>>
            singularity exec lrose-cidd.sif -help

  run-sing-image-cidd:
    description: Run cidd singularity container
    executor: docker
    parameters:
      singularity-version:
        type: string
        default: v3.8.2-slim
      from-uri:
        description: 'The Singularity recipe path or docker:// uri to build from.'
        type: string
        default: docker://nsflrose/lrose-cidd:latest
      image:
        description: 'The image binary to build (e.g., container.sif)'
        type: string
        default: lrose-cidd.sif
    steps:
      - run:
          name: Build Singularity Container
          singularity-version: <<parameters.singularity-version>>
          command: |
            if [ -f "$BASH_ENV" ]; then source $BASH_ENV; fi
            singularity exec library://leavesntwigs/lrose-gateway/lrose_cidd:latest xvfb-run -help





# ---------- end Elle release ----------



workflows:
  version: 2.1
  nightly:
    triggers: 
      - schedule:
          #     "mm hh day month dow"  Note: 22 is about 3pm MST
          cron: "45 10 1 1 *"   # for 5:30 am MST 
          filters:
            branches:
              only:
                - master
    jobs:
      - build-lrose-manual      
       # - one
      
  nightly_full:
    triggers: 
      - schedule:
          #     "mm hh day month dow"  Note: 22 is about 3pm MST
          cron: "45 7 1 1 *"   # for 5:30 am MST 
          filters:
            branches:
              only:
                - master
    jobs:      
      - current-head
      
     # - two:
     #    requires:
     #      - one
      #- three:
      #    requires:
      #      - one
      #      - two


# --------

  nightly_lrose_cyclone:
    triggers: 
      - schedule:
          #     "mm hh day month dow"  Note: 22 is about 3pm MST
          cron: "45 2 * 3 *"   # for 7:30 pm MST 
          filters:
            branches:
              only:
                - master
    jobs:      
      - package-lrose-core-tgz
      - package-linux-lrose-cyclone-tgz: 
          requires:
           - package-lrose-core-tgz
      - test-linux-lrose-cyclone-tgz:
          requires:
           - package-linux-lrose-cyclone-tgz

      - package-macos-lrose-cyclone-tgz: 
          requires:
           - package-lrose-core-tgz

#      - test-macos-lrose-cyclone-tgz-latest:
#          requires:
#           - package-macos-lrose-cyclone-tgz

      - package-brew-formula-workspace:
          requires:
           - package-macos-lrose-cyclone-tgz
        # upload lrose-cyclone.rb after this runs
        # then run
#      - test-macos-lrose-cyclone-rb

      # no dependencies for docker image; uses checkout_and_build_script to 
      # pull the top of master branch
      - package-cyclone-docker
      - test-cyclone-docker:
          requires:
           - package-cyclone-docker
          

# --------
  yearly_lrose_elle:
    triggers: 
      - schedule:
          #     "mm hh day month dow"  Note: 22 is about 3pm MST
          # cron: "45 4 * * *"   # for 7:30 pm MST 
          cron: "45 4 * 2 *"   # only in February
          filters:
            branches:
              only:
                - master
    jobs:   
      # TODO: need a tag here?
      - test-macos-elle-checkout-and-build-cmake  
      - test-macos-elle-rb

# TODO: can we get rid of these and replace with test-linux-elle-checkout-and-build-cmake???
      #- package-lrose-core-tag-tgz
      #- package-linux-lrose-elle-tgz: 
      #    requires:
      #     - package-lrose-core-tag-tgz
      #- test-linux-lrose-elle-tgz:
      #    requires:
      #     - package-linux-lrose-elle-tgz

      #- package-macos-lrose-elle-tgz: 
      #    requires:
      #     - package-lrose-core-tag-tgz

      #- test-macos-lrose-elle-tgz-latest:
      #    requires:
      #     - package-macos-lrose-elle-tgz

      #- package-brew-formula-elle-workspace:
      #    requires:
      #     - package-macos-lrose-elle-tgz

      # no dependencies for docker image; uses checkout_and_build_script to 
      # pull the top of master branch
      - package-elle-docker
      - test-elle-docker:
          requires:
           - package-elle-docker
          

  nightly_lrose_head:
    triggers: 
      - schedule:
          #     "mm hh day month dow"  Note: 22 is about 3pm MST
          cron: "45 4 1 1 *"   # for 7:30 pm MST 
          filters:
            branches:
              only:
                - master
    jobs:  
      # testing from current head
      - package-lrose-core-head-tgz
      - package-linux-lrose-head-tgz: 
          requires:
           - package-lrose-core-head-tgz
      - test-linux-lrose-head-tgz:
          requires:
           - package-linux-lrose-head-tgz

      - package-macos-lrose-head-tgz: 
          requires:
           - package-lrose-core-head-tgz

      - test-macos-lrose-head-tgz-latest:
          requires:
           - package-macos-lrose-head-tgz

# TODO: need to fix up these to use the head
#      - package-brew-formula-elle-workspace:
#          requires:
#           - package-macos-lrose-elle-tgz
#        # upload lrose-cyclone.rb after this runs
#        # then run
##      - test-macos-lrose-cyclone-rb
#
#      # no dependencies for docker image; uses checkout_and_build_script to 
#      # pull the top of master branch
#      - package-elle-docker
#      - test-elle-docker:
#          requires:
#           - package-elle-docker


# --------
          
  now:
    jobs:

      - test-linux-lrose-topaz-tgz:

      # - run-brew-no-szip
      # - run-brew-no-szip-workaround

      # testing for no szip; python3  lrose-core topaz release
      # - package-lrose-topaz-python3-tgz

      # call AFTER uploading .tgz and EDITED .rb to lrose-test-release
      # - build-macos-lrose-topaz-python3 

      # - package-lrose-topaz-python3-colorscales-tgz:
      #   requires:
      #    - package-lrose-topaz-python3-tgz


      # - build-macos-lrose-topaz-python3
      #    requires:
      #     - package-lrose-topaz-python3-colorscales-tgz
      # - test-macos-topaz-rb-noszip-python3      

        # end testing for no szip; python3  lrose-core topaz release





      # - run-sing-image-cidd
      # - docker_cli  # works

      # - test-macos-topaz-rb-20211114
      # - test-macos-lrose-topaz-tgz
      # - test-macos-elle-rb-20210216
      # - test-macos-elle-rb

      # - what-is-mac-env

      # - test-macos-lrose-elle-tag-20200201
      # - test-macos-elle-checkout-and-build-cmake


      # - build-lrose-manual

      # --- 
      # testing from current head
      #- package-lrose-core-head-tgz
      #- package-linux-lrose-head-tgz: 
      #    requires:
      #     - package-lrose-core-head-tgz
      #- test-linux-lrose-head-tgz:
      #    requires:
      #     - package-linux-lrose-head-tgz
      #
      #- package-macos-lrose-head-tgz: 
      #    requires:
      #     - package-lrose-core-head-tgz
      #
      #- test-macos-lrose-head-tgz-latest:
      #    requires:
      #     - package-macos-lrose-head-tgz
      # ---

      # - test-macos-lrose-samurai-rb
      # - package-lrose-core-tag-tgz
      # - test-linux-elle-checkout-and-build
      # - package-elle-docker
      # - test-elle-docker:
      #     requires:
      #      - package-elle-docker

      # testing for elle BoundaryEditorIntegrate release
      # - package-lrose-elle-BoundaryEditorIntegrate-tgz
      # - package-macos-lrose-elle-BoundaryEditorIntegrate-tgz: 
      #    requires:
      #     - package-lrose-elle-BoundaryEditorIntegrate-tgz


      # - build-macos-lrose-elle-HawkEye-Edit
      #    requires:
      #     - package-macos-lrose-elle-BoundaryEditorIntegrate-tgz

        # end testing for elle BoundaryEditorIntegrate release



      # testing for elle release
#      - package-lrose-core-tgz
#      - package-linux-lrose-elle-tgz: 
#          requires:
#           - package-lrose-core-tgz
#      - test-linux-lrose-elle-tgz:
#          requires:
#           - package-linux-lrose-elle-tgz
#
#      - package-macos-lrose-elle-tgz: 
#          requires:
#           - package-lrose-core-tgz
#
#      - test-macos-lrose-elle-tgz-latest:
#          requires:
#           - package-macos-lrose-elle-tgz

        # end testing for elle release


#       - test-brew-install-lrose-cyclone
#       - package-cyclone-docker  # error in build apps; not sure where; log file is /tmp/lrose_build/logs/build-apps.log

#      - package-lrose-core-tgz
#      - package-lrose-cyclone-tgz:
#          requires:
#           - package-lrose-core-tgz

#      - test-macos-lrose-samurai
#          requires:
#           - package-macos-lrose-cyclone-tgz
      
# ------ here

#     - test_1
#      - test-macos-lrose-cyclone-installer-latest

#     - package-cyclone-docker
#     - test-cyclone-docker:
#         requires:
#           - package-cyclone-docker
 
 
#      - package-lrose-core-tgz
      #- package-lrose-cyclone-tgz:
      #    requires:
      #     - package-lrose-core-tgz

#      - package-macos-lrose-cyclone-tgz: 
#          requires:
#           - package-lrose-core-tgz
#      - test-macos-lrose-cyclone-tgz-latest:
#          requires:
#           - package-macos-lrose-cyclone-tgz

#      - package-brew-formula-workspace:
#          requires:
#           - package-macos-lrose-cyclone-tgz
        # upload lrose-cyclone.rb after this runs
        # then run
#      - test-macos-lrose-cyclone-rb

#      - test-macos-lrose-core-rb

# ------ here 

# test lrose-cyclone using separate brew formulas ...

# separate install scripts
#      - test-macos-cyclone-tgz-build-core-latest:
#          requires:
#           - package-macos-lrose-cyclone-tgz
#      - test-macos-cyclone-tgz-build-samurai-latest:
#          requires:
#           - test-macos-cyclone-tgz-build-core-latest

#      - test-macos-cyclone-tgz-build-fractl-latest:
#          requires:
#           - test-macos-cyclone-tgz-build-core-latest
#      - test-macos-cyclone-tgz-build-hawkeye-latest:
#          requires:
#           - test-macos-cyclone-tgz-build-core-latest
#      - test-macos-cyclone-tgz-build-vortrac-latest:
#          requires:
#           - test-macos-cyclone-tgz-build-core-latest


# this works; turn on later
#      - package-linux-lrose-cyclone-tgz: 
#          requires:
#           - package-lrose-core-tgz
#      - test-linux-lrose-cyclone-tgz:
#          requires:
#           - package-linux-lrose-cyclone-tgz

#      - test-macos-lrose-cyclone-tgz-previous:
#          requires:
#           - package-macos-lrose-cyclone-tgz


          
#      - package-osx-brew-formula:
#          requires:
#           - package-lrose-cyclone-tgz

#      - buildntest-osx-lrose-cyclone-tgz:
#          requires:
#           - package-lrose-cyclone-tgz

#      - package-osx-lrose-cyclone-apps:
#          requires:
#           - buildntest-osx-lrose-cyclone-tgz


#      - buildntest-linux-lrose-cyclone-tgz:
#          requires:
#           - package-lrose-cyclone-tgz

#      - workspace-producer
#      - workspace-consumer:
#          requires:
#           - workspace-producer


# not functional until pushing artifacts to git repo ...
#      - test-brew-install-lrose-cyclone-from-workspace:
#          requires:
#           - package-osx-brew-formula



      # - build-cyclone-docker
      # - buildCentos-Cyclone-vortrac-build-changes  
      # - buildMacOS-Cyclone

#  main:
#    jobs:
#      - build:
#          filters:
#            tags:
#              only: /^\d+\.\d+\.\d+$/
#      - publish-github-release:
#          requires:
#            - build
#          filters:
#            branches:
#              ignore: /.*/
#            tags:
#              only: /^\d+\.\d+\.\d+$/


######
#
#Custom Docker Images
#
# keep Dockerfile in .circleci/images folder, e.g.
#
#  .circleci/images/primary/Dockerfile
# 
# Q: how to build and then use the image in this script
#
# these tools are required for Primary Containers in CircleCI
#git
#ssh
#tar
#gzip
#ca-certificates
# Q: Can I use a circleci container as a starting image?
# In order to allow CircleCI to use your custom image, store it in a public Docker Registry. 
#
#  or can we build the Docker image in CircleCI, then pass it to the downstream jobs?
#  Actually, this is preferable, since we don't have an external step that someone
#  has to maintain.
#
##########

# Executors and Images 

# Docker
 #
#jobs:
  #build_environment: # name of your job
    #docker: # executor type
      ##
      ## the image is stored in a public Docker repository
      ## 1. prepare the image for the registry
      ## $ docker build -t circleci/cci-demo-docker-primary:0.0.1 <path-to-dockerfile>
      ##
      ## 2. push the image to the registry
      ## $ docker login
      ## $ docker push circleci/cci-demo-docker-primary:0.0.1
      ##
      ## 3. use the image from the registry
      ## - image: circleci/cci-demo-docker-primary:0.0.1
      #-image: docker:stable-git 
#
#
    #working_directory: ~/
#

# Machine

#jobs:
  #build: 
    #machine: 
      #image: circleci/classic:201708-01 # VM will run: Ubuntu 14.04 for this release date
#
## macOS
#
#jobs:
  #build:
    #macos:
      #xcode: "9.0"
      #
    #steps:
      ## Commands will execute in macOS container
      ## with Xcode 9.0 installed
      #- run: xcodebuild -version
#
#
#
#############

# Note that the following stanza uses CircleCI 2.1 to make use of a Reusable Executor
# This allows defining a docker image to reuse across jobs.
# visit https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-executors to learn more.
#
#version: 2.1
#
#executors:
  #my-executor:
    #docker:
      #- image: centos  # buildpack-deps:jessie
    #working_directory: /tmp
#
#jobs:
  #flow:
    #executor: my-executor
    #steps:
      #- run: yum -y install ca-certificates
      #- run: mkdir -p workspace
      #- run: echo "Hello, world!" > workspace/echo-output
      #
      ### Persist the specified paths (workspace/echo-output) into the workspace for use in downstream job. 
      #- persist_to_workspace:
          ### Must be an absolute path, or relative path from working_directory. This is a directory on the container which is 
          ### taken to be the root directory of the workspace.
          #root: workspace
          ### Must be relative path from root
          #paths:
            #- echo-output
#
  #downstream:
    #executor: my-executor
    #steps:
      #- attach_workspace:
          ### Must be absolute path or relative path from working_directory
          #at: /tmp/workspace
#
      #- run: |
          #if [[ `cat /tmp/workspace/echo-output` == "Hello, world!" ]]; then
            #echo "It worked!";
          #else
            ##echo "Nope!"; exit 1
          #fi
#
#workflows:
  #version: 2.1
#
  #btd:
    #jobs:
      #- flow
      #- downstream:
          #requires:
            #- flow
